{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omar/Desktop/studio/src/app/api/upload/route.ts"],"sourcesContent":["// src\\app\\api\\upload\\route.ts\r\nimport { NextResponse } from 'next/server';\r\nimport path from 'path';\r\nimport { writeFile, mkdir } from 'fs/promises';\r\n\r\nexport async function POST(request: Request) {\r\n  try {\r\n    const formData = await request.formData();\r\n    const file = formData.get('file') as File;\r\n    const subject = formData.get('subject') as string;\r\n    const userName = formData.get('userName') as string;\r\n    const userId = formData.get('userId') as string;\r\n\r\n    if (!file || !subject || !userName || !userId) {\r\n      return NextResponse.json(\r\n        { error: 'Missing required fields' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Disallow PHP files by extension or MIME type\r\n    const ext = path.extname(file.name).toLowerCase();\r\n    const blockedExts = new Set(['.php', '.phtml', '.php3', '.php4', '.php5', '.phps']);\r\n    const mime = (file.type || '').toLowerCase();\r\n    const blockedMimes = ['application/x-httpd-php', 'text/x-php', 'application/php'];\r\n    if (blockedExts.has(ext) || blockedMimes.includes(mime)) {\r\n      return NextResponse.json(\r\n        { error: 'PHP files are not allowed.' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Create user-specific upload directory if it doesn't exist\r\n    const uploadDir = path.join(process.cwd(), 'uploads', userName, subject);\r\n    await mkdir(uploadDir, { recursive: true });\r\n\r\n    // Convert the file to buffer\r\n    const bytes = await file.arrayBuffer();\r\n    const buffer = Buffer.from(bytes);\r\n\r\n    // Write the file to the uploads directory\r\n    const filePath = path.join(uploadDir, file.name);\r\n    await writeFile(filePath, buffer);\r\n\r\n    // Generate the URL for the uploaded file\r\n    const fileUrl = `/uploads/${userName}/${subject}/${file.name}`;\r\n\r\n    // Store file metadata in your database if needed\r\n    // await db.files.create({ ... })\r\n\r\n    return NextResponse.json({ \r\n      url: fileUrl,\r\n      message: 'File uploaded successfully' \r\n    });\r\n    \r\n  } catch (error) {\r\n    console.error('Error uploading file:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error uploading file' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,8BAA8B;;;;AAC9B;AACA;AACA;;;;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,WAAW,MAAM,QAAQ,QAAQ;QACvC,MAAM,OAAO,SAAS,GAAG,CAAC;QAC1B,MAAM,UAAU,SAAS,GAAG,CAAC;QAC7B,MAAM,WAAW,SAAS,GAAG,CAAC;QAC9B,MAAM,SAAS,SAAS,GAAG,CAAC;QAE5B,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,YAAY,CAAC,QAAQ;YAC7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0B,GACnC;gBAAE,QAAQ;YAAI;QAElB;QAEA,+CAA+C;QAC/C,MAAM,MAAM,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE,WAAW;QAC/C,MAAM,cAAc,IAAI,IAAI;YAAC;YAAQ;YAAU;YAAS;YAAS;YAAS;SAAQ;QAClF,MAAM,OAAO,CAAC,KAAK,IAAI,IAAI,EAAE,EAAE,WAAW;QAC1C,MAAM,eAAe;YAAC;YAA2B;YAAc;SAAkB;QACjF,IAAI,YAAY,GAAG,CAAC,QAAQ,aAAa,QAAQ,CAAC,OAAO;YACvD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA6B,GACtC;gBAAE,QAAQ;YAAI;QAElB;QAEA,4DAA4D;QAC5D,MAAM,YAAY,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,WAAW,UAAU;QAChE,MAAM,CAAA,GAAA,qHAAA,CAAA,QAAK,AAAD,EAAE,WAAW;YAAE,WAAW;QAAK;QAEzC,6BAA6B;QAC7B,MAAM,QAAQ,MAAM,KAAK,WAAW;QACpC,MAAM,SAAS,OAAO,IAAI,CAAC;QAE3B,0CAA0C;QAC1C,MAAM,WAAW,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,WAAW,KAAK,IAAI;QAC/C,MAAM,CAAA,GAAA,qHAAA,CAAA,YAAS,AAAD,EAAE,UAAU;QAE1B,yCAAyC;QACzC,MAAM,UAAU,CAAC,SAAS,EAAE,SAAS,CAAC,EAAE,QAAQ,CAAC,EAAE,KAAK,IAAI,EAAE;QAE9D,iDAAiD;QACjD,iCAAiC;QAEjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,KAAK;YACL,SAAS;QACX;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAuB,GAChC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}