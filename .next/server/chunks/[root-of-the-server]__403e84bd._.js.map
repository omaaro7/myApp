{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omar/Desktop/an/studio/src/app/api/file/%5B...path%5D/route.ts"],"sourcesContent":["// src\\app\\api\\file\\[...path]\\route.ts\r\nimport { NextResponse } from 'next/server';\r\nimport { createReadStream } from 'fs';\r\nimport { stat } from 'fs/promises';\r\nimport path from 'path';\r\n\r\nexport async function GET(\r\n  request: Request,\r\n  { params }: { params: { path: string[] } }\r\n) {\r\n  try {\r\n    // Reconstruct the file path from the URL parameters\r\n    const filePath = path.join(process.cwd(), 'uploads', ...params.path);\r\n\r\n    // Check if file exists and get its stats\r\n    const stats = await stat(filePath);\r\n    if (!stats.isFile()) {\r\n      return NextResponse.json(\r\n        { error: 'Not found' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Create a readable stream of the file\r\n    const fileStream = createReadStream(filePath);\r\n\r\n    // Determine content type based on file extension\r\n    const ext = path.extname(filePath).toLowerCase();\r\n    const contentType = {\r\n      '.jpg': 'image/jpeg',\r\n      '.jpeg': 'image/jpeg',\r\n      '.png': 'image/png',\r\n      '.gif': 'image/gif',\r\n      '.mp3': 'audio/mpeg',\r\n      '.mp4': 'video/mp4',\r\n      '.webm': 'audio/webm',\r\n      '.pdf': 'application/pdf',\r\n    }[ext] || 'application/octet-stream';\r\n\r\n    // Return the file stream with appropriate headers\r\n    return new NextResponse(fileStream as any, {\r\n      headers: {\r\n        'Content-Type': contentType,\r\n        'Content-Length': stats.size.toString(),\r\n        'Cache-Control': 'public, max-age=31536000',\r\n      },\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Error serving file:', error);\r\n    return NextResponse.json(\r\n      { error: 'Error serving file' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA,sCAAsC;;;;AACtC;AACA;AACA;AACA;;;;;AAEO,eAAe,IACpB,OAAgB,EAChB,EAAE,MAAM,EAAkC;IAE1C,IAAI;QACF,oDAAoD;QACpD,MAAM,WAAW,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,cAAc,OAAO,IAAI;QAEnE,yCAAyC;QACzC,MAAM,QAAQ,MAAM,CAAA,GAAA,qHAAA,CAAA,OAAI,AAAD,EAAE;QACzB,IAAI,CAAC,MAAM,MAAM,IAAI;YACnB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAY,GACrB;gBAAE,QAAQ;YAAI;QAElB;QAEA,uCAAuC;QACvC,MAAM,aAAa,CAAA,GAAA,6FAAA,CAAA,mBAAgB,AAAD,EAAE;QAEpC,iDAAiD;QACjD,MAAM,MAAM,iGAAA,CAAA,UAAI,CAAC,OAAO,CAAC,UAAU,WAAW;QAC9C,MAAM,cAAc;YAClB,QAAQ;YACR,SAAS;YACT,QAAQ;YACR,QAAQ;YACR,QAAQ;YACR,QAAQ;YACR,SAAS;YACT,QAAQ;QACV,CAAC,CAAC,IAAI,IAAI;QAEV,kDAAkD;QAClD,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,YAAmB;YACzC,SAAS;gBACP,gBAAgB;gBAChB,kBAAkB,MAAM,IAAI,CAAC,QAAQ;gBACrC,iBAAiB;YACnB;QACF;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAqB,GAC9B;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}