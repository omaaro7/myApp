{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/i18n-config.ts"],"sourcesContent":["// src\\i18n-config.ts\r\n\r\nexport const i18n = {\r\n  defaultLocale: 'en',\r\n  locales: ['en', 'ar'],\r\n} as const\r\n\r\nexport type Locale = (typeof i18n)['locales'][number]\r\n"],"names":[],"mappings":"AAAA,qBAAqB;;;;AAEd,MAAM,OAAO;IAClB,eAAe;IACf,SAAS;QAAC;QAAM;KAAK;AACvB"}},
    {"offset": {"line": 40, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.ts"],"sourcesContent":["\r\nimport { NextRequest, NextResponse } from 'next/server';\r\nimport { i18n } from './i18n-config'\r\nimport { match as matchLocale } from '@formatjs/intl-localematcher'\r\nimport Negotiator from 'negotiator'\r\n\r\nfunction getLocale(request: NextRequest): string | undefined {\r\n  const negotiatorHeaders: Record<string, string> = {}\r\n  request.headers.forEach((value, key) => (negotiatorHeaders[key] = value))\r\n  \r\n  // The negotiator library expects a mutable array\r\n  const locales: string[] = [...i18n.locales]\r\n  \r\n  let languages;\r\n  try {\r\n    languages = new Negotiator({ headers: negotiatorHeaders }).languages(\r\n      locales\r\n    )\r\n  } catch (error) {\r\n    languages = [i18n.defaultLocale];\r\n  }\r\n\r\n  return matchLocale(languages, locales, i18n.defaultLocale)\r\n}\r\n\r\n\r\nexport function middleware(request: NextRequest) {\r\n  const pathname = request.nextUrl.pathname;\r\n\r\n  // // `/_next/` and `/api/` are ignored by the watcher, but we need to ignore files in `public` manually.\r\n  // // If you have multiple directories in `public`, you can pass them to `startsWith` as an array.\r\n  if (\r\n    [\r\n      '/manifest.json',\r\n      '/favicon.ico',\r\n      // Your other files in `public`\r\n    ].includes(pathname)\r\n  )\r\n    return\r\n\r\n  const pathnameIsMissingLocale = i18n.locales.every(\r\n    (locale) => !pathname.startsWith(`/${locale}/`) && pathname !== `/${locale}`\r\n  )\r\n\r\n  if (pathnameIsMissingLocale) {\r\n    const locale = getLocale(request)\r\n    return NextResponse.redirect(\r\n      new URL(\r\n        `/${locale}${pathname.startsWith('/') ? '' : '/'}${pathname}`,\r\n        request.url\r\n      )\r\n    )\r\n  }\r\n}\r\n\r\nexport const config = {\r\n  matcher: [\r\n    // Skip all internal paths (_next)\r\n    '/((?!_next|api|.*\\\\..*).*)',\r\n    // Optional: only run on root (/) URL\r\n    // '/'\r\n  ],\r\n};\r\n"],"names":[],"mappings":";;;;AACA;AAAA;AACA;AACA;AAAA;AACA;;;;;AAEA,SAAS,UAAU,OAAoB;IACrC,MAAM,oBAA4C,CAAC;IACnD,QAAQ,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,MAAS,iBAAiB,CAAC,IAAI,GAAG;IAElE,iDAAiD;IACjD,MAAM,UAAoB;WAAI,6HAAA,CAAA,OAAI,CAAC,OAAO;KAAC;IAE3C,IAAI;IACJ,IAAI;QACF,YAAY,IAAI,2IAAA,CAAA,UAAU,CAAC;YAAE,SAAS;QAAkB,GAAG,SAAS,CAClE;IAEJ,EAAE,OAAO,OAAO;QACd,YAAY;YAAC,6HAAA,CAAA,OAAI,CAAC,aAAa;SAAC;IAClC;IAEA,OAAO,CAAA,GAAA,2LAAA,CAAA,QAAW,AAAD,EAAE,WAAW,SAAS,6HAAA,CAAA,OAAI,CAAC,aAAa;AAC3D;AAGO,SAAS,WAAW,OAAoB;IAC7C,MAAM,WAAW,QAAQ,OAAO,CAAC,QAAQ;IAEzC,yGAAyG;IACzG,kGAAkG;IAClG,IACE;QACE;QACA;KAED,CAAC,QAAQ,CAAC,WAEX;IAEF,MAAM,0BAA0B,6HAAA,CAAA,OAAI,CAAC,OAAO,CAAC,KAAK,CAChD,CAAC,SAAW,CAAC,SAAS,UAAU,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,KAAK,aAAa,CAAC,CAAC,EAAE,QAAQ;IAG9E,IAAI,yBAAyB;QAC3B,MAAM,SAAS,UAAU;QACzB,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAC1B,IAAI,IACF,CAAC,CAAC,EAAE,SAAS,SAAS,UAAU,CAAC,OAAO,KAAK,MAAM,UAAU,EAC7D,QAAQ,GAAG;IAGjB;AACF;AAEO,MAAM,SAAS;IACpB,SAAS;QACP,kCAAkC;QAClC;KAGD;AACH"}}]
}