{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omar/Desktop/studio/node_modules/%40tldraw/editor/src/lib/primitives/easings.ts"],"sourcesContent":["/** @public */\nexport const EASINGS = {\n\tlinear: (t: number) => t,\n\teaseInQuad: (t: number) => t * t,\n\teaseOutQuad: (t: number) => t * (2 - t),\n\teaseInOutQuad: (t: number) => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t),\n\teaseInCubic: (t: number) => t * t * t,\n\teaseOutCubic: (t: number) => --t * t * t + 1,\n\teaseInOutCubic: (t: number) =>\n\t\tt < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1,\n\teaseInQuart: (t: number) => t * t * t * t,\n\teaseOutQuart: (t: number) => 1 - --t * t * t * t,\n\teaseInOutQuart: (t: number) => (t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t),\n\teaseInQuint: (t: number) => t * t * t * t * t,\n\teaseOutQuint: (t: number) => 1 + --t * t * t * t * t,\n\teaseInOutQuint: (t: number) => (t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t),\n\teaseInSine: (t: number) => 1 - Math.cos((t * Math.PI) / 2),\n\teaseOutSine: (t: number) => Math.sin((t * Math.PI) / 2),\n\teaseInOutSine: (t: number) => -(Math.cos(Math.PI * t) - 1) / 2,\n\teaseInExpo: (t: number) => (t <= 0 ? 0 : Math.pow(2, 10 * t - 10)),\n\teaseOutExpo: (t: number) => (t >= 1 ? 1 : 1 - Math.pow(2, -10 * t)),\n\teaseInOutExpo: (t: number) =>\n\t\tt <= 0\n\t\t\t? 0\n\t\t\t: t >= 1\n\t\t\t\t? 1\n\t\t\t\t: t < 0.5\n\t\t\t\t\t? Math.pow(2, 20 * t - 10) / 2\n\t\t\t\t\t: (2 - Math.pow(2, -20 * t + 10)) / 2,\n} as const\n\n/** @public */\nexport type EasingType = keyof typeof EASINGS\n"],"names":[],"mappings":";;;AACO,MAAM,UAAU;IACtB,QAAQ,CAAC,IAAc;IACvB,YAAY,CAAC,IAAc,IAAI;IAC/B,aAAa,CAAC,IAAc,IAAA,CAAK,IAAI,CAAA;IACrC,eAAe,CAAC,IAAe,IAAI,MAAM,IAAI,IAAI,IAAI,CAAA,IAAA,CAAM,IAAI,IAAI,CAAA,IAAK;IACxE,aAAa,CAAC,IAAc,IAAI,IAAI;IACpC,cAAc,CAAC,IAAc,EAAE,IAAI,IAAI,IAAI;IAC3C,gBAAgB,CAAC,IAChB,IAAI,MAAM,IAAI,IAAI,IAAI,IAAA,CAAK,IAAI,CAAA,IAAA,CAAM,IAAI,IAAI,CAAA,IAAA,CAAM,IAAI,IAAI,CAAA,IAAK;IACjE,aAAa,CAAC,IAAc,IAAI,IAAI,IAAI;IACxC,cAAc,CAAC,IAAc,IAAI,EAAE,IAAI,IAAI,IAAI;IAC/C,gBAAgB,CAAC,IAAe,IAAI,MAAM,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,IAAI,IAAI,IAAI;IACpF,aAAa,CAAC,IAAc,IAAI,IAAI,IAAI,IAAI;IAC5C,cAAc,CAAC,IAAc,IAAI,EAAE,IAAI,IAAI,IAAI,IAAI;IACnD,gBAAgB,CAAC,IAAe,IAAI,MAAM,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,EAAE,IAAI,IAAI,IAAI,IAAI;IAC9F,YAAY,CAAC,IAAc,IAAI,KAAK,GAAA,CAAK,IAAI,KAAK,EAAA,GAAM,CAAC;IACzD,aAAa,CAAC,IAAc,KAAK,GAAA,CAAK,IAAI,KAAK,EAAA,GAAM,CAAC;IACtD,eAAe,CAAC,IAAc,CAAA,CAAE,KAAK,GAAA,CAAI,KAAK,EAAA,GAAK,CAAC,IAAI,CAAA,IAAK;IAC7D,YAAY,CAAC,IAAe,KAAK,IAAI,IAAI,KAAK,GAAA,CAAI,GAAG,KAAK,IAAI,EAAE;IAChE,aAAa,CAAC,IAAe,KAAK,IAAI,IAAI,IAAI,KAAK,GAAA,CAAI,GAAG,CAAA,KAAM,CAAC;IACjE,eAAe,CAAC,IACf,KAAK,IACF,IACA,KAAK,IACJ,IACA,IAAI,MACH,KAAK,GAAA,CAAI,GAAG,KAAK,IAAI,EAAE,IAAI,IAAA,CAC1B,IAAI,KAAK,GAAA,CAAI,GAAG,CAAA,KAAM,IAAI,EAAE,CAAA,IAAK;AACzC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omar/Desktop/studio/node_modules/%40tldraw/editor/src/lib/primitives/Vec.ts"],"sourcesContent":["import { VecModel } from '@tldraw/tlschema'\nimport { EASINGS } from './easings'\nimport { clamp, toFixed } from './utils'\n\n/** @public */\nexport type VecLike = Vec | VecModel\n\n/** @public */\nexport class Vec {\n\tconstructor(\n\t\tpublic x = 0,\n\t\tpublic y = 0,\n\t\tpublic z = 1\n\t) {}\n\n\t// eslint-disable-next-line no-restricted-syntax\n\tget pressure() {\n\t\treturn this.z\n\t}\n\n\tset(x = this.x, y = this.y, z = this.z) {\n\t\tthis.x = x\n\t\tthis.y = y\n\t\tthis.z = z\n\t\treturn this\n\t}\n\n\tsetTo({ x = 0, y = 0, z = 1 }: VecLike) {\n\t\tthis.x = x\n\t\tthis.y = y\n\t\tthis.z = z\n\t\treturn this\n\t}\n\n\trot(r: number) {\n\t\tif (r === 0) return this\n\t\tconst { x, y } = this\n\t\tconst s = Math.sin(r)\n\t\tconst c = Math.cos(r)\n\t\tthis.x = x * c - y * s\n\t\tthis.y = x * s + y * c\n\t\treturn this\n\t}\n\n\trotWith(C: VecLike, r: number) {\n\t\tif (r === 0) return this\n\t\tconst x = this.x - C.x\n\t\tconst y = this.y - C.y\n\t\tconst s = Math.sin(r)\n\t\tconst c = Math.cos(r)\n\t\tthis.x = C.x + (x * c - y * s)\n\t\tthis.y = C.y + (x * s + y * c)\n\t\treturn this\n\t}\n\n\tclone(): Vec {\n\t\tconst { x, y, z } = this\n\t\treturn new Vec(x, y, z)\n\t}\n\n\tsub(V: VecLike) {\n\t\tthis.x -= V.x\n\t\tthis.y -= V.y\n\t\treturn this\n\t}\n\n\tsubXY(x: number, y: number) {\n\t\tthis.x -= x\n\t\tthis.y -= y\n\t\treturn this\n\t}\n\n\tsubScalar(n: number) {\n\t\tthis.x -= n\n\t\tthis.y -= n\n\t\t// this.z -= n\n\n\t\treturn this\n\t}\n\n\tadd(V: VecLike) {\n\t\tthis.x += V.x\n\t\tthis.y += V.y\n\t\treturn this\n\t}\n\n\taddXY(x: number, y: number) {\n\t\tthis.x += x\n\t\tthis.y += y\n\t\treturn this\n\t}\n\n\taddScalar(n: number) {\n\t\tthis.x += n\n\t\tthis.y += n\n\t\t// this.z += n\n\n\t\treturn this\n\t}\n\n\tclamp(min: number, max?: number) {\n\t\tthis.x = Math.max(this.x, min)\n\t\tthis.y = Math.max(this.y, min)\n\t\tif (max !== undefined) {\n\t\t\tthis.x = Math.min(this.x, max)\n\t\t\tthis.y = Math.min(this.y, max)\n\t\t}\n\t\treturn this\n\t}\n\n\tdiv(t: number) {\n\t\tthis.x /= t\n\t\tthis.y /= t\n\t\t// this.z /= t\n\t\treturn this\n\t}\n\n\tdivV(V: VecLike) {\n\t\tthis.x /= V.x\n\t\tthis.y /= V.y\n\t\t// this.z /= V.z\n\t\treturn this\n\t}\n\n\tmul(t: number) {\n\t\tthis.x *= t\n\t\tthis.y *= t\n\t\t// this.z *= t\n\t\treturn this\n\t}\n\n\tmulV(V: VecLike) {\n\t\tthis.x *= V.x\n\t\tthis.y *= V.y\n\t\t// this.z *= V.z\n\t\treturn this\n\t}\n\n\tabs() {\n\t\tthis.x = Math.abs(this.x)\n\t\tthis.y = Math.abs(this.y)\n\t\treturn this\n\t}\n\n\tnudge(B: VecLike, distance: number) {\n\t\tconst tan = Vec.Tan(B, this)\n\t\treturn this.add(tan.mul(distance))\n\t}\n\n\tneg() {\n\t\tthis.x *= -1\n\t\tthis.y *= -1\n\t\t// this.z *= -1\n\t\treturn this\n\t}\n\n\tcross(V: VecLike) {\n\t\tthis.x = this.y * V.z! - this.z * V.y\n\t\tthis.y = this.z * V.x - this.x * V.z!\n\t\t// this.z = this.x * V.y - this.y * V.x\n\t\treturn this\n\t}\n\n\tdpr(V: VecLike): number {\n\t\treturn Vec.Dpr(this, V)\n\t}\n\n\tcpr(V: VecLike) {\n\t\treturn Vec.Cpr(this, V)\n\t}\n\n\tlen2(): number {\n\t\treturn Vec.Len2(this)\n\t}\n\n\tlen(): number {\n\t\treturn Vec.Len(this)\n\t}\n\n\tpry(V: VecLike): number {\n\t\treturn Vec.Pry(this, V)\n\t}\n\n\tper() {\n\t\tconst { x, y } = this\n\t\tthis.x = y\n\t\tthis.y = -x\n\t\treturn this\n\t}\n\n\tuni() {\n\t\tconst l = this.len()\n\t\tif (l === 0) return this\n\t\tthis.x /= l\n\t\tthis.y /= l\n\t\treturn this\n\t}\n\n\ttan(V: VecLike): Vec {\n\t\treturn this.sub(V).uni()\n\t}\n\n\tdist(V: VecLike): number {\n\t\treturn Vec.Dist(this, V)\n\t}\n\n\tdistanceToLineSegment(A: VecLike, B: VecLike): number {\n\t\treturn Vec.DistanceToLineSegment(A, B, this)\n\t}\n\n\tslope(B: VecLike): number {\n\t\treturn Vec.Slope(this, B)\n\t}\n\n\tsnapToGrid(gridSize: number) {\n\t\tthis.x = Math.round(this.x / gridSize) * gridSize\n\t\tthis.y = Math.round(this.y / gridSize) * gridSize\n\t\treturn this\n\t}\n\n\tangle(B: VecLike): number {\n\t\treturn Vec.Angle(this, B)\n\t}\n\n\ttoAngle() {\n\t\treturn Vec.ToAngle(this)\n\t}\n\n\tlrp(B: VecLike, t: number): Vec {\n\t\tthis.x = this.x + (B.x - this.x) * t\n\t\tthis.y = this.y + (B.y - this.y) * t\n\t\treturn this\n\t}\n\n\tequals(B: VecLike) {\n\t\treturn Vec.Equals(this, B)\n\t}\n\n\tequalsXY(x: number, y: number) {\n\t\treturn Vec.EqualsXY(this, x, y)\n\t}\n\n\t/** @deprecated use `uni` instead */\n\tnorm() {\n\t\treturn this.uni()\n\t}\n\n\ttoFixed() {\n\t\tthis.x = toFixed(this.x)\n\t\tthis.y = toFixed(this.y)\n\t\treturn this\n\t}\n\n\ttoString() {\n\t\treturn Vec.ToString(Vec.ToFixed(this))\n\t}\n\n\ttoJson(): VecModel {\n\t\treturn Vec.ToJson(this)\n\t}\n\n\ttoArray(): number[] {\n\t\treturn Vec.ToArray(this)\n\t}\n\n\tstatic Add(A: VecLike, B: VecLike): Vec {\n\t\treturn new Vec(A.x + B.x, A.y + B.y)\n\t}\n\n\tstatic AddXY(A: VecLike, x: number, y: number): Vec {\n\t\treturn new Vec(A.x + x, A.y + y)\n\t}\n\n\tstatic Sub(A: VecLike, B: VecLike): Vec {\n\t\treturn new Vec(A.x - B.x, A.y - B.y)\n\t}\n\n\tstatic SubXY(A: VecLike, x: number, y: number): Vec {\n\t\treturn new Vec(A.x - x, A.y - y)\n\t}\n\n\tstatic AddScalar(A: VecLike, n: number): Vec {\n\t\treturn new Vec(A.x + n, A.y + n)\n\t}\n\n\tstatic SubScalar(A: VecLike, n: number): Vec {\n\t\treturn new Vec(A.x - n, A.y - n)\n\t}\n\n\tstatic Div(A: VecLike, t: number): Vec {\n\t\treturn new Vec(A.x / t, A.y / t)\n\t}\n\n\tstatic Mul(A: VecLike, t: number): Vec {\n\t\treturn new Vec(A.x * t, A.y * t)\n\t}\n\n\tstatic DivV(A: VecLike, B: VecLike): Vec {\n\t\treturn new Vec(A.x / B.x, A.y / B.y)\n\t}\n\n\tstatic MulV(A: VecLike, B: VecLike): Vec {\n\t\treturn new Vec(A.x * B.x, A.y * B.y)\n\t}\n\n\tstatic Neg(A: VecLike): Vec {\n\t\treturn new Vec(-A.x, -A.y)\n\t}\n\n\t/**\n\t * Get the perpendicular vector to A.\n\t */\n\tstatic Per(A: VecLike): Vec {\n\t\treturn new Vec(A.y, -A.x)\n\t}\n\n\tstatic Abs(A: VecLike): Vec {\n\t\treturn new Vec(Math.abs(A.x), Math.abs(A.y))\n\t}\n\n\t// Get the distance between two points.\n\tstatic Dist(A: VecLike, B: VecLike): number {\n\t\treturn ((A.y - B.y) ** 2 + (A.x - B.x) ** 2) ** 0.5\n\t}\n\n\t// Get the Manhattan distance between two points.\n\tstatic ManhattanDist(A: VecLike, B: VecLike): number {\n\t\treturn Math.abs(A.x - B.x) + Math.abs(A.y - B.y)\n\t}\n\n\t// Get whether a distance between two points is less than a number. This is faster to calulate than using `Vec.Dist(a, b) < n`.\n\tstatic DistMin(A: VecLike, B: VecLike, n: number): boolean {\n\t\treturn (A.x - B.x) * (A.x - B.x) + (A.y - B.y) * (A.y - B.y) < n ** 2\n\t}\n\n\t// Get the squared distance between two points. This is faster to calculate (no square root) so useful for \"minimum distance\" checks where the actual measurement does not matter.\n\tstatic Dist2(A: VecLike, B: VecLike): number {\n\t\treturn (A.x - B.x) * (A.x - B.x) + (A.y - B.y) * (A.y - B.y)\n\t}\n\n\t/**\n\t * Dot product of two vectors which is used to calculate the angle between them.\n\t */\n\tstatic Dpr(A: VecLike, B: VecLike): number {\n\t\treturn A.x * B.x + A.y * B.y\n\t}\n\n\tstatic Cross(A: VecLike, V: VecLike) {\n\t\treturn new Vec(\n\t\t\tA.y * V.z! - A.z! * V.y,\n\t\t\tA.z! * V.x - A.x * V.z!\n\t\t\t// A.z = A.x * V.y - A.y * V.x\n\t\t)\n\t}\n\n\t/**\n\t * Cross product of two vectors which is used to calculate the area of a parallelogram.\n\t */\n\tstatic Cpr(A: VecLike, B: VecLike) {\n\t\treturn A.x * B.y - B.x * A.y\n\t}\n\n\tstatic Len2(A: VecLike): number {\n\t\treturn A.x * A.x + A.y * A.y\n\t}\n\n\tstatic Len(A: VecLike): number {\n\t\treturn (A.x * A.x + A.y * A.y) ** 0.5\n\t}\n\n\t/**\n\t * Get the projection of A onto B.\n\t */\n\tstatic Pry(A: VecLike, B: VecLike): number {\n\t\treturn Vec.Dpr(A, B) / Vec.Len(B)\n\t}\n\n\t/**\n\t * Get the unit vector of A.\n\t */\n\tstatic Uni(A: VecLike) {\n\t\tconst l = Vec.Len(A)\n\t\treturn new Vec(l === 0 ? 0 : A.x / l, l === 0 ? 0 : A.y / l)\n\t}\n\n\tstatic Tan(A: VecLike, B: VecLike): Vec {\n\t\treturn Vec.Uni(Vec.Sub(A, B))\n\t}\n\n\tstatic Min(A: VecLike, B: VecLike): Vec {\n\t\treturn new Vec(Math.min(A.x, B.x), Math.min(A.y, B.y))\n\t}\n\n\tstatic Max(A: VecLike, B: VecLike): Vec {\n\t\treturn new Vec(Math.max(A.x, B.x), Math.max(A.y, B.y))\n\t}\n\n\tstatic From({ x, y, z = 1 }: VecModel) {\n\t\treturn new Vec(x, y, z)\n\t}\n\n\tstatic FromArray(v: number[]): Vec {\n\t\treturn new Vec(v[0], v[1])\n\t}\n\n\tstatic Rot(A: VecLike, r = 0): Vec {\n\t\tconst s = Math.sin(r)\n\t\tconst c = Math.cos(r)\n\t\treturn new Vec(A.x * c - A.y * s, A.x * s + A.y * c)\n\t}\n\n\tstatic RotWith(A: VecLike, C: VecLike, r: number): Vec {\n\t\tconst x = A.x - C.x\n\t\tconst y = A.y - C.y\n\t\tconst s = Math.sin(r)\n\t\tconst c = Math.cos(r)\n\t\treturn new Vec(C.x + (x * c - y * s), C.y + (x * s + y * c))\n\t}\n\n\t/**\n\t * Get the nearest point on a line with a known unit vector that passes through point A\n\t *\n\t * ```ts\n\t * Vec.nearestPointOnLineThroughPoint(A, u, Point)\n\t * ```\n\t *\n\t * @param A - Any point on the line\n\t * @param u - The unit vector for the line.\n\t * @param P - A point not on the line to test.\n\t */\n\tstatic NearestPointOnLineThroughPoint(A: VecLike, u: VecLike, P: VecLike): Vec {\n\t\treturn Vec.Mul(u, Vec.Sub(P, A).pry(u)).add(A)\n\t}\n\n\tstatic NearestPointOnLineSegment(A: VecLike, B: VecLike, P: VecLike, clamp = true): Vec {\n\t\tif (Vec.Equals(A, P)) return Vec.From(P)\n\t\tif (Vec.Equals(B, P)) return Vec.From(P)\n\n\t\tconst u = Vec.Tan(B, A)\n\t\tconst C = Vec.Add(A, Vec.Mul(u, Vec.Sub(P, A).pry(u)))\n\n\t\tif (clamp) {\n\t\t\tif (C.x < Math.min(A.x, B.x)) return Vec.Cast(A.x < B.x ? A : B)\n\t\t\tif (C.x > Math.max(A.x, B.x)) return Vec.Cast(A.x > B.x ? A : B)\n\t\t\tif (C.y < Math.min(A.y, B.y)) return Vec.Cast(A.y < B.y ? A : B)\n\t\t\tif (C.y > Math.max(A.y, B.y)) return Vec.Cast(A.y > B.y ? A : B)\n\t\t}\n\n\t\treturn C\n\t}\n\n\tstatic DistanceToLineThroughPoint(A: VecLike, u: VecLike, P: VecLike): number {\n\t\treturn Vec.Dist(P, Vec.NearestPointOnLineThroughPoint(A, u, P))\n\t}\n\n\tstatic DistanceToLineSegment(A: VecLike, B: VecLike, P: VecLike, clamp = true): number {\n\t\treturn Vec.Dist(P, Vec.NearestPointOnLineSegment(A, B, P, clamp))\n\t}\n\n\tstatic Snap(A: VecLike, step = 1) {\n\t\treturn new Vec(Math.round(A.x / step) * step, Math.round(A.y / step) * step)\n\t}\n\n\tstatic Cast(A: VecLike): Vec {\n\t\tif (A instanceof Vec) return A\n\t\treturn Vec.From(A)\n\t}\n\n\tstatic Slope(A: VecLike, B: VecLike): number {\n\t\tif (A.x === B.y) return NaN\n\t\treturn (A.y - B.y) / (A.x - B.x)\n\t}\n\n\tstatic IsNaN(A: VecLike): boolean {\n\t\treturn isNaN(A.x) || isNaN(A.y)\n\t}\n\n\t/**\n\t * Get the angle from position A to position B.\n\t */\n\tstatic Angle(A: VecLike, B: VecLike): number {\n\t\treturn Math.atan2(B.y - A.y, B.x - A.x)\n\t}\n\n\t/**\n\t * Get the angle between vector A and vector B. This will return the smallest angle between the\n\t * two vectors, between -π and π. The sign indicates direction of angle.\n\t */\n\tstatic AngleBetween(A: VecLike, B: VecLike): number {\n\t\tconst p = A.x * B.x + A.y * B.y\n\t\tconst n = Math.sqrt(\n\t\t\t(Math.pow(A.x, 2) + Math.pow(A.y, 2)) * (Math.pow(B.x, 2) + Math.pow(B.y, 2))\n\t\t)\n\t\tconst sign = A.x * B.y - A.y * B.x < 0 ? -1 : 1\n\t\tconst angle = sign * Math.acos(clamp(p / n, -1, 1))\n\n\t\treturn angle\n\t}\n\n\t/**\n\t * Linearly interpolate between two points.\n\t * @param A - The first point.\n\t * @param B - The second point.\n\t * @param t - The interpolation value between 0 and 1.\n\t * @returns The interpolated point.\n\t */\n\tstatic Lrp(A: VecLike, B: VecLike, t: number): Vec {\n\t\treturn Vec.Sub(B, A).mul(t).add(A)\n\t}\n\n\tstatic Med(A: VecLike, B: VecLike): Vec {\n\t\treturn new Vec((A.x + B.x) / 2, (A.y + B.y) / 2)\n\t}\n\n\tstatic Equals(A: VecLike, B: VecLike): boolean {\n\t\treturn Math.abs(A.x - B.x) < 0.0001 && Math.abs(A.y - B.y) < 0.0001\n\t}\n\n\tstatic EqualsXY(A: VecLike, x: number, y: number): boolean {\n\t\treturn A.x === x && A.y === y\n\t}\n\n\tstatic Clockwise(A: VecLike, B: VecLike, C: VecLike): boolean {\n\t\treturn (C.x - A.x) * (B.y - A.y) - (B.x - A.x) * (C.y - A.y) < 0\n\t}\n\n\tstatic Rescale(A: VecLike, n: number) {\n\t\tconst l = Vec.Len(A)\n\t\treturn new Vec((n * A.x) / l, (n * A.y) / l)\n\t}\n\n\tstatic ScaleWithOrigin(A: VecLike, scale: number, origin: VecLike) {\n\t\treturn Vec.Sub(A, origin).mul(scale).add(origin)\n\t}\n\n\tstatic ToFixed(A: VecLike) {\n\t\treturn new Vec(toFixed(A.x), toFixed(A.y))\n\t}\n\n\tstatic ToInt(A: VecLike) {\n\t\treturn new Vec(\n\t\t\tparseInt(A.x.toFixed(0)),\n\t\t\tparseInt(A.y.toFixed(0)),\n\t\t\tparseInt((A.z ?? 0).toFixed(0))\n\t\t)\n\t}\n\n\tstatic ToCss(A: VecLike) {\n\t\treturn `${A.x},${A.y}`\n\t}\n\n\tstatic Nudge(A: VecLike, B: VecLike, distance: number) {\n\t\treturn Vec.Add(A, Vec.Tan(B, A).mul(distance))\n\t}\n\n\tstatic ToString(A: VecLike) {\n\t\treturn `${A.x}, ${A.y}`\n\t}\n\n\tstatic ToAngle(A: VecLike) {\n\t\tlet r = Math.atan2(A.y, A.x)\n\t\tif (r < 0) r += Math.PI * 2\n\n\t\treturn r\n\t}\n\n\tstatic FromAngle(r: number, length = 1) {\n\t\treturn new Vec(Math.cos(r) * length, Math.sin(r) * length)\n\t}\n\n\tstatic ToArray(A: VecLike) {\n\t\treturn [A.x, A.y, A.z!]\n\t}\n\n\tstatic ToJson(A: VecLike) {\n\t\tconst { x, y, z } = A\n\t\treturn { x, y, z }\n\t}\n\n\tstatic Average(arr: VecLike[]) {\n\t\tconst len = arr.length\n\t\tconst avg = new Vec(0, 0)\n\t\tif (len === 0) {\n\t\t\treturn avg\n\t\t}\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tavg.add(arr[i])\n\t\t}\n\t\treturn avg.div(len)\n\t}\n\n\tstatic Clamp(A: Vec, min: number, max?: number) {\n\t\tif (max === undefined) {\n\t\t\treturn new Vec(Math.min(Math.max(A.x, min)), Math.min(Math.max(A.y, min)))\n\t\t}\n\n\t\treturn new Vec(Math.min(Math.max(A.x, min), max), Math.min(Math.max(A.y, min), max))\n\t}\n\n\t/**\n\t * Get an array of points (with simulated pressure) between two points.\n\t *\n\t * @param A - The first point.\n\t * @param B - The second point.\n\t * @param steps - The number of points to return.\n\t */\n\tstatic PointsBetween(A: VecModel, B: VecModel, steps = 6): Vec[] {\n\t\tconst results: Vec[] = []\n\n\t\tfor (let i = 0; i < steps; i++) {\n\t\t\tconst t = EASINGS.easeInQuad(i / (steps - 1))\n\t\t\tconst point = Vec.Lrp(A, B, t)\n\t\t\tpoint.z = Math.min(1, 0.5 + Math.abs(0.5 - ease(t)) * 0.65)\n\t\t\tresults.push(point)\n\t\t}\n\n\t\treturn results\n\t}\n\n\tstatic SnapToGrid(A: VecLike, gridSize = 8) {\n\t\treturn new Vec(Math.round(A.x / gridSize) * gridSize, Math.round(A.y / gridSize) * gridSize)\n\t}\n}\n\nconst ease = (t: number) => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t)\n"],"names":["clamp"],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 535, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omar/Desktop/studio/node_modules/%40tldraw/editor/src/lib/primitives/utils.ts"],"sourcesContent":["import { Vec, VecLike } from './Vec'\n\n/** @public */\nexport function precise(A: VecLike) {\n\treturn `${toDomPrecision(A.x)},${toDomPrecision(A.y)} `\n}\n\n/** @public */\nexport function average(A: VecLike, B: VecLike) {\n\treturn `${toDomPrecision((A.x + B.x) / 2)},${toDomPrecision((A.y + B.y) / 2)} `\n}\n\n/** @public */\nexport const PI = Math.PI\n/** @public */\nexport const HALF_PI = PI / 2\n/** @public */\nexport const PI2 = PI * 2\n/** @public */\nexport const SIN = Math.sin\n\n/**\n * Clamp a value into a range.\n *\n * @example\n *\n * ```ts\n * const A = clamp(0, 1) // 1\n * ```\n *\n * @param n - The number to clamp.\n * @param min - The minimum value.\n * @public\n */\nexport function clamp(n: number, min: number): number\n/**\n * Clamp a value into a range.\n *\n * @example\n *\n * ```ts\n * const A = clamp(0, 1, 10) // 1\n * const B = clamp(11, 1, 10) // 10\n * const C = clamp(5, 1, 10) // 5\n * ```\n *\n * @param n - The number to clamp.\n * @param min - The minimum value.\n * @param max - The maximum value.\n * @public\n */\nexport function clamp(n: number, min: number, max: number): number\nexport function clamp(n: number, min: number, max?: number): number {\n\treturn Math.max(min, typeof max !== 'undefined' ? Math.min(n, max) : n)\n}\n\n/**\n * Get a number to a precision.\n *\n * @param n - The number.\n * @param precision - The precision.\n * @public\n */\nexport function toPrecision(n: number, precision = 10000000000) {\n\tif (!n) return 0\n\treturn Math.round(n * precision) / precision\n}\n\n/**\n * Whether two numbers numbers a and b are approximately equal.\n *\n * @param a - The first point.\n * @param b - The second point.\n * @public\n */\nexport function approximately(a: number, b: number, precision = 0.000001) {\n\treturn Math.abs(a - b) <= precision\n}\n\n/**\n * Whether a number is approximately less than or equal to another number.\n *\n * @param a - The first number.\n * @param b - The second number.\n * @public\n */\nexport function approximatelyLte(a: number, b: number, precision = 0.000001) {\n\treturn a < b || approximately(a, b, precision)\n}\n\n/**\n * Find the approximate perimeter of an ellipse.\n *\n * @param rx - The ellipse's x radius.\n * @param ry - The ellipse's y radius.\n * @public\n */\nexport function perimeterOfEllipse(rx: number, ry: number): number {\n\tconst h = Math.pow(rx - ry, 2) / Math.pow(rx + ry, 2)\n\treturn PI * (rx + ry) * (1 + (3 * h) / (10 + Math.sqrt(4 - 3 * h)))\n}\n\n/**\n * @param a - Any angle in radians\n * @returns A number between 0 and 2 * PI\n * @public\n */\nexport function canonicalizeRotation(a: number) {\n\ta = a % PI2\n\tif (a < 0) {\n\t\ta = a + PI2\n\t} else if (a === 0) {\n\t\t// prevent negative zero\n\t\ta = 0\n\t}\n\treturn a\n}\n\n/**\n * Get the clockwise angle distance between two angles.\n *\n * @param a0 - The first angle.\n * @param a1 - The second angle.\n * @public\n */\nexport function clockwiseAngleDist(a0: number, a1: number): number {\n\ta0 = canonicalizeRotation(a0)\n\ta1 = canonicalizeRotation(a1)\n\tif (a0 > a1) {\n\t\ta1 += PI2\n\t}\n\treturn a1 - a0\n}\n\n/**\n * Get the counter-clockwise angle distance between two angles.\n *\n * @param a0 - The first angle.\n * @param a1 - The second angle.\n * @public\n */\nexport function counterClockwiseAngleDist(a0: number, a1: number): number {\n\treturn PI2 - clockwiseAngleDist(a0, a1)\n}\n\n/**\n * Get the short angle distance between two angles.\n *\n * @param a0 - The first angle.\n * @param a1 - The second angle.\n * @public\n */\nexport function shortAngleDist(a0: number, a1: number): number {\n\tconst da = (a1 - a0) % PI2\n\treturn ((2 * da) % PI2) - da\n}\n\n/**\n * Clamp radians within 0 and 2PI\n *\n * @param r - The radian value.\n * @public\n */\nexport function clampRadians(r: number): number {\n\treturn (PI2 + r) % PI2\n}\n\n/**\n * Clamp rotation to even segments.\n *\n * @param r - The rotation in radians.\n * @param segments - The number of segments.\n * @public\n */\nexport function snapAngle(r: number, segments: number): number {\n\tconst seg = PI2 / segments\n\tlet ang = (Math.floor((clampRadians(r) + seg / 2) / seg) * seg) % PI2\n\tif (ang < PI) ang += PI2\n\tif (ang > PI) ang -= PI2\n\treturn ang\n}\n\n/**\n * Checks whether two angles are approximately at right-angles or parallel to each other\n *\n * @param a - Angle a (radians)\n * @param b - Angle b (radians)\n * @returns True iff the angles are approximately at right-angles or parallel to each other\n * @public\n */\nexport function areAnglesCompatible(a: number, b: number) {\n\treturn a === b || approximately((a % (Math.PI / 2)) - (b % (Math.PI / 2)), 0)\n}\n\n/**\n * Convert degrees to radians.\n *\n * @param d - The degree in degrees.\n * @public\n */\nexport function degreesToRadians(d: number): number {\n\treturn (d * PI) / 180\n}\n\n/**\n * Convert radians to degrees.\n *\n * @param r - The degree in radians.\n * @public\n */\nexport function radiansToDegrees(r: number): number {\n\treturn (r * 180) / PI\n}\n\n/**\n * Get a point on the perimeter of a circle.\n *\n * @param center - The center of the circle.\n * @param r - The radius of the circle.\n * @param a - The angle in radians.\n * @public\n */\nexport function getPointOnCircle(center: VecLike, r: number, a: number) {\n\treturn new Vec(center.x, center.y).add(Vec.FromAngle(a, r))\n}\n\n/** @public */\nexport function getPolygonVertices(width: number, height: number, sides: number) {\n\tconst cx = width / 2\n\tconst cy = height / 2\n\tconst pointsOnPerimeter: Vec[] = []\n\n\tlet minX = Infinity\n\tlet maxX = -Infinity\n\tlet minY = Infinity\n\tlet maxY = -Infinity\n\tfor (let i = 0; i < sides; i++) {\n\t\tconst step = PI2 / sides\n\t\tconst t = -HALF_PI + i * step\n\t\tconst x = cx + cx * Math.cos(t)\n\t\tconst y = cy + cy * Math.sin(t)\n\t\tif (x < minX) minX = x\n\t\tif (y < minY) minY = y\n\t\tif (x > maxX) maxX = x\n\t\tif (y > maxY) maxY = y\n\t\tpointsOnPerimeter.push(new Vec(x, y))\n\t}\n\n\t// Bounds of calculated points\n\tconst w = maxX - minX\n\tconst h = maxY - minY\n\n\t// Difference between input bounds and calculated bounds\n\tconst dx = width - w\n\tconst dy = height - h\n\n\t// If there's a difference, scale the points to the input bounds\n\tif (dx !== 0 || dy !== 0) {\n\t\tfor (let i = 0; i < pointsOnPerimeter.length; i++) {\n\t\t\tconst pt = pointsOnPerimeter[i]\n\t\t\tpt.x = ((pt.x - minX) / w) * width\n\t\t\tpt.y = ((pt.y - minY) / h) * height\n\t\t}\n\t}\n\n\treturn pointsOnPerimeter\n}\n\n/**\n * @param a0 - The start point in the A range\n * @param a1 - The end point in the A range\n * @param b0 - The start point in the B range\n * @param b1 - The end point in the B range\n * @returns True if the ranges overlap\n * @public\n */\nexport function rangesOverlap(a0: number, a1: number, b0: number, b1: number): boolean {\n\treturn a0 < b1 && b0 < a1\n}\n\n/**\n * Finds the intersection of two ranges.\n *\n * @param a0 - The start point in the A range\n * @param a1 - The end point in the A range\n * @param b0 - The start point in the B range\n * @param b1 - The end point in the B range\n * @returns The intersection of the ranges, or null if no intersection\n * @public\n */\nexport function rangeIntersection(\n\ta0: number,\n\ta1: number,\n\tb0: number,\n\tb1: number\n): [number, number] | null {\n\tconst min = Math.max(a0, b0)\n\tconst max = Math.min(a1, b1)\n\tif (min <= max) {\n\t\treturn [min, max]\n\t}\n\treturn null\n}\n\n/** Helper for point in polygon */\nfunction cross(x: VecLike, y: VecLike, z: VecLike): number {\n\treturn (y.x - x.x) * (z.y - x.y) - (z.x - x.x) * (y.y - x.y)\n}\n\n/**\n * Get whether a point is inside of a polygon.\n *\n * ```ts\n * const result = pointInPolygon(myPoint, myPoints)\n * ```\n *\n * @public\n */\nexport function pointInPolygon(A: VecLike, points: VecLike[]): boolean {\n\tlet windingNumber = 0\n\tlet a: VecLike\n\tlet b: VecLike\n\n\tfor (let i = 0; i < points.length; i++) {\n\t\ta = points[i]\n\t\t// Point is the same as one of the corners of the polygon\n\t\tif (a.x === A.x && a.y === A.y) return true\n\n\t\tb = points[(i + 1) % points.length]\n\n\t\t// Point is on the polygon edge\n\t\tif (Vec.Dist(A, a) + Vec.Dist(A, b) === Vec.Dist(a, b)) return true\n\n\t\tif (a.y <= A.y) {\n\t\t\tif (b.y > A.y && cross(a, b, A) > 0) {\n\t\t\t\twindingNumber += 1\n\t\t\t}\n\t\t} else if (b.y <= A.y && cross(a, b, A) < 0) {\n\t\t\twindingNumber -= 1\n\t\t}\n\t}\n\n\treturn windingNumber !== 0\n}\n\n/**\n * The DOM likes values to be fixed to 3 decimal places\n *\n * @public\n */\nexport function toDomPrecision(v: number) {\n\treturn Math.round(v * 1e4) / 1e4\n}\n\n/**\n * @public\n */\nexport function toFixed(v: number) {\n\treturn Math.round(v * 1e2) / 1e2\n}\n\n/**\n * Check if a float is safe to use. ie: Not too big or small.\n * @public\n */\nexport const isSafeFloat = (n: number) => {\n\treturn Math.abs(n) < Number.MAX_SAFE_INTEGER\n}\n\n/**\n * Get the angle of a point on an arc.\n * @param fromAngle - The angle from center to arc's start point (A) on the circle\n * @param toAngle - The angle from center to arc's end point (B) on the circle\n * @param direction - The direction of the arc (1 = counter-clockwise, -1 = clockwise)\n * @returns The distance in radians between the two angles according to the direction\n * @public\n */\nexport function angleDistance(fromAngle: number, toAngle: number, direction: number) {\n\tconst dist =\n\t\tdirection < 0\n\t\t\t? clockwiseAngleDist(fromAngle, toAngle)\n\t\t\t: counterClockwiseAngleDist(fromAngle, toAngle)\n\treturn dist\n}\n\n/**\n * Returns the t value of the point on the arc.\n *\n * @param mAB - The measure of the arc from A to B, negative if counter-clockwise\n * @param A - The angle from center to arc's start point (A) on the circle\n * @param B - The angle from center to arc's end point (B) on the circle\n * @param P - The angle on the circle (P) to find the t value for\n *\n * @returns The t value of the point on the arc, with 0 being the start and 1 being the end\n *\n * @public\n */\nexport function getPointInArcT(mAB: number, A: number, B: number, P: number): number {\n\tlet mAP: number\n\tif (Math.abs(mAB) > PI) {\n\t\tmAP = shortAngleDist(A, P)\n\t\tconst mPB = shortAngleDist(P, B)\n\t\tif (Math.abs(mAP) < Math.abs(mPB)) {\n\t\t\treturn mAP / mAB\n\t\t} else {\n\t\t\treturn (mAB - mPB) / mAB\n\t\t}\n\t} else {\n\t\tmAP = shortAngleDist(A, P)\n\t\tconst t = mAP / mAB\n\n\t\t// If the arc is something like -2.8 to 2.2, then we'll get a weird bug\n\t\t// where the measurement to the center is negative but measure to points\n\t\t// near the end are positive\n\t\tif (Math.sign(mAP) !== Math.sign(mAB)) {\n\t\t\treturn Math.abs(t) > 0.5 ? 1 : 0\n\t\t}\n\n\t\treturn t\n\t}\n}\n\n/**\n * Get the measure of an arc.\n *\n * @param A - The angle from center to arc's start point (A) on the circle\n * @param B - The angle from center to arc's end point (B) on the circle\n * @param sweepFlag - 1 if the arc is clockwise, 0 if counter-clockwise\n * @param largeArcFlag - 1 if the arc is greater than 180 degrees, 0 if less than 180 degrees\n *\n * @returns The measure of the arc, negative if counter-clockwise\n *\n * @public\n */\nexport function getArcMeasure(A: number, B: number, sweepFlag: number, largeArcFlag: number) {\n\tconst m = ((2 * ((B - A) % PI2)) % PI2) - ((B - A) % PI2)\n\tif (!largeArcFlag) return m\n\treturn (PI2 - Math.abs(m)) * (sweepFlag ? 1 : -1)\n}\n\n/**\n * Get the center of a circle from three points.\n *\n * @param a - The first point\n * @param b - The second point\n * @param c - The third point\n *\n * @returns The center of the circle or null if the points are collinear\n *\n * @public\n */\nexport function centerOfCircleFromThreePoints(a: VecLike, b: VecLike, c: VecLike) {\n\tconst u = -2 * (a.x * (b.y - c.y) - a.y * (b.x - c.x) + b.x * c.y - c.x * b.y)\n\tconst x =\n\t\t((a.x * a.x + a.y * a.y) * (c.y - b.y) +\n\t\t\t(b.x * b.x + b.y * b.y) * (a.y - c.y) +\n\t\t\t(c.x * c.x + c.y * c.y) * (b.y - a.y)) /\n\t\tu\n\tconst y =\n\t\t((a.x * a.x + a.y * a.y) * (b.x - c.x) +\n\t\t\t(b.x * b.x + b.y * b.y) * (c.x - a.x) +\n\t\t\t(c.x * c.x + c.y * c.y) * (a.x - b.x)) /\n\t\tu\n\tif (!Number.isFinite(x) || !Number.isFinite(y)) {\n\t\treturn null\n\t}\n\treturn new Vec(x, y)\n}\n\n/** @public */\nexport function getPointsOnArc(\n\tstartPoint: VecLike,\n\tendPoint: VecLike,\n\tcenter: VecLike | null,\n\tradius: number,\n\tnumPoints: number\n): Vec[] {\n\tif (center === null) {\n\t\treturn [Vec.From(startPoint), Vec.From(endPoint)]\n\t}\n\tconst results: Vec[] = []\n\tconst startAngle = Vec.Angle(center, startPoint)\n\tconst endAngle = Vec.Angle(center, endPoint)\n\tconst l = clockwiseAngleDist(startAngle, endAngle)\n\tfor (let i = 0; i < numPoints; i++) {\n\t\tconst t = i / (numPoints - 1)\n\t\tconst angle = startAngle + l * t\n\t\tconst point = getPointOnCircle(center, radius, angle)\n\t\tresults.push(point)\n\t}\n\treturn results\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,WAAoB;;AAGtB,SAAS,QAAQ,CAAA,EAAY;IACnC,OAAO,GAAG,eAAe,EAAE,CAAC,CAAC,CAAA,CAAA,EAAI,eAAe,EAAE,CAAC,CAAC,CAAA,CAAA,CAAA;AACrD;AAGO,SAAS,QAAQ,CAAA,EAAY,CAAA,EAAY;IAC/C,OAAO,GAAG,eAAA,CAAgB,EAAE,CAAA,GAAI,EAAE,CAAA,IAAK,CAAC,CAAC,CAAA,CAAA,EAAI,eAAA,CAAgB,EAAE,CAAA,GAAI,EAAE,CAAA,IAAK,CAAC,CAAC,CAAA,CAAA,CAAA;AAC7E;AAGO,MAAM,KAAK,KAAK,EAAA;AAEhB,MAAM,UAAU,KAAK;AAErB,MAAM,MAAM,KAAK;AAEjB,MAAM,MAAM,KAAK,GAAA;AAiCjB,SAAS,MAAM,CAAA,EAAW,GAAA,EAAa,GAAA,EAAsB;IACnE,OAAO,KAAK,GAAA,CAAI,KAAK,OAAO,QAAQ,cAAc,KAAK,GAAA,CAAI,GAAG,GAAG,IAAI,CAAC;AACvE;AASO,SAAS,YAAY,CAAA,EAAW,YAAY,IAAA,EAAa;IAC/D,IAAI,CAAC,EAAG,CAAA,OAAO;IACf,OAAO,KAAK,KAAA,CAAM,IAAI,SAAS,IAAI;AACpC;AASO,SAAS,cAAc,CAAA,EAAW,CAAA,EAAW,YAAY,IAAA,EAAU;IACzE,OAAO,KAAK,GAAA,CAAI,IAAI,CAAC,KAAK;AAC3B;AASO,SAAS,iBAAiB,CAAA,EAAW,CAAA,EAAW,YAAY,IAAA,EAAU;IAC5E,OAAO,IAAI,KAAK,cAAc,GAAG,GAAG,SAAS;AAC9C;AASO,SAAS,mBAAmB,EAAA,EAAY,EAAA,EAAoB;IAClE,MAAM,IAAI,KAAK,GAAA,CAAI,KAAK,IAAI,CAAC,IAAI,KAAK,GAAA,CAAI,KAAK,IAAI,CAAC;IACpD,OAAO,KAAA,CAAM,KAAK,EAAA,IAAA,CAAO,IAAK,IAAI,IAAA,CAAM,KAAK,KAAK,IAAA,CAAK,IAAI,IAAI,CAAC,CAAA,CAAA;AACjE;AAOO,SAAS,qBAAqB,CAAA,EAAW;IAC/C,IAAI,IAAI;IACR,IAAI,IAAI,GAAG;QACV,IAAI,IAAI;IACT,OAAA,IAAW,MAAM,GAAG;QAEnB,IAAI;IACL;IACA,OAAO;AACR;AASO,SAAS,mBAAmB,EAAA,EAAY,EAAA,EAAoB;IAClE,KAAK,qBAAqB,EAAE;IAC5B,KAAK,qBAAqB,EAAE;IAC5B,IAAI,KAAK,IAAI;QACZ,MAAM;IACP;IACA,OAAO,KAAK;AACb;AASO,SAAS,0BAA0B,EAAA,EAAY,EAAA,EAAoB;IACzE,OAAO,MAAM,mBAAmB,IAAI,EAAE;AACvC;AASO,SAAS,eAAe,EAAA,EAAY,EAAA,EAAoB;IAC9D,MAAM,KAAA,CAAM,KAAK,EAAA,IAAM;IACvB,OAAS,IAAI,KAAM,MAAO;AAC3B;AAQO,SAAS,aAAa,CAAA,EAAmB;IAC/C,OAAA,CAAQ,MAAM,CAAA,IAAK;AACpB;AASO,SAAS,UAAU,CAAA,EAAW,QAAA,EAA0B;IAC9D,MAAM,MAAM,MAAM;IAClB,IAAI,MAAO,KAAK,KAAA,CAAA,CAAO,aAAa,CAAC,IAAI,MAAM,CAAA,IAAK,GAAG,IAAI,MAAO;IAClE,IAAI,MAAM,GAAI,CAAA,OAAO;IACrB,IAAI,MAAM,GAAI,CAAA,OAAO;IACrB,OAAO;AACR;AAUO,SAAS,oBAAoB,CAAA,EAAW,CAAA,EAAW;IACzD,OAAO,MAAM,KAAK,cAAe,IAAA,CAAK,KAAK,EAAA,GAAK,CAAA,IAAO,IAAA,CAAK,KAAK,EAAA,GAAK,CAAA,GAAK,CAAC;AAC7E;AAQO,SAAS,iBAAiB,CAAA,EAAmB;IACnD,OAAQ,IAAI,KAAM;AACnB;AAQO,SAAS,iBAAiB,CAAA,EAAmB;IACnD,OAAQ,IAAI,MAAO;AACpB;AAUO,SAAS,iBAAiB,MAAA,EAAiB,CAAA,EAAW,CAAA,EAAW;IACvE,OAAO,sLAAI,MAAA,CAAI,OAAO,CAAA,EAAG,OAAO,CAAC,EAAE,GAAA,mLAAI,MAAA,CAAI,SAAA,CAAU,GAAG,CAAC,CAAC;AAC3D;AAGO,SAAS,mBAAmB,KAAA,EAAe,MAAA,EAAgB,KAAA,EAAe;IAChF,MAAM,KAAK,QAAQ;IACnB,MAAM,KAAK,SAAS;IACpB,MAAM,oBAA2B,CAAC,CAAA;IAElC,IAAI,OAAO;IACX,IAAI,OAAO,CAAA;IACX,IAAI,OAAO;IACX,IAAI,OAAO,CAAA;IACX,IAAA,IAAS,IAAI,GAAG,IAAI,OAAO,IAAK;QAC/B,MAAM,OAAO,MAAM;QACnB,MAAM,IAAI,CAAC,UAAU,IAAI;QACzB,MAAM,IAAI,KAAK,KAAK,KAAK,GAAA,CAAI,CAAC;QAC9B,MAAM,IAAI,KAAK,KAAK,KAAK,GAAA,CAAI,CAAC;QAC9B,IAAI,IAAI,KAAM,CAAA,OAAO;QACrB,IAAI,IAAI,KAAM,CAAA,OAAO;QACrB,IAAI,IAAI,KAAM,CAAA,OAAO;QACrB,IAAI,IAAI,KAAM,CAAA,OAAO;QACrB,kBAAkB,IAAA,CAAK,sLAAI,MAAA,CAAI,GAAG,CAAC,CAAC;IACrC;IAGA,MAAM,IAAI,OAAO;IACjB,MAAM,IAAI,OAAO;IAGjB,MAAM,KAAK,QAAQ;IACnB,MAAM,KAAK,SAAS;IAGpB,IAAI,OAAO,KAAK,OAAO,GAAG;QACzB,IAAA,IAAS,IAAI,GAAG,IAAI,kBAAkB,MAAA,EAAQ,IAAK;YAClD,MAAM,KAAK,iBAAA,CAAkB,CAAC,CAAA;YAC9B,GAAG,CAAA,GAAA,CAAM,GAAG,CAAA,GAAI,IAAA,IAAQ,IAAK;YAC7B,GAAG,CAAA,GAAA,CAAM,GAAG,CAAA,GAAI,IAAA,IAAQ,IAAK;QAC9B;IACD;IAEA,OAAO;AACR;AAUO,SAAS,cAAc,EAAA,EAAY,EAAA,EAAY,EAAA,EAAY,EAAA,EAAqB;IACtF,OAAO,KAAK,MAAM,KAAK;AACxB;AAYO,SAAS,kBACf,EAAA,EACA,EAAA,EACA,EAAA,EACA,EAAA,EAC0B;IAC1B,MAAM,MAAM,KAAK,GAAA,CAAI,IAAI,EAAE;IAC3B,MAAM,MAAM,KAAK,GAAA,CAAI,IAAI,EAAE;IAC3B,IAAI,OAAO,KAAK;QACf,OAAO;YAAC;YAAK,GAAG;SAAA;IACjB;IACA,OAAO;AACR;AAGA,SAAS,MAAM,CAAA,EAAY,CAAA,EAAY,CAAA,EAAoB;IAC1D,OAAA,CAAQ,EAAE,CAAA,GAAI,EAAE,CAAA,IAAA,CAAM,EAAE,CAAA,GAAI,EAAE,CAAA,IAAA,CAAM,EAAE,CAAA,GAAI,EAAE,CAAA,IAAA,CAAM,EAAE,CAAA,GAAI,EAAE,CAAA;AAC3D;AAWO,SAAS,eAAe,CAAA,EAAY,MAAA,EAA4B;IACtE,IAAI,gBAAgB;IACpB,IAAI;IACJ,IAAI;IAEJ,IAAA,IAAS,IAAI,GAAG,IAAI,OAAO,MAAA,EAAQ,IAAK;QACvC,IAAI,MAAA,CAAO,CAAC,CAAA;QAEZ,IAAI,EAAE,CAAA,KAAM,EAAE,CAAA,IAAK,EAAE,CAAA,KAAM,EAAE,CAAA,CAAG,CAAA,OAAO;QAEvC,IAAI,MAAA,CAAA,CAAQ,IAAI,CAAA,IAAK,OAAO,MAAM,CAAA;QAGlC,sLAAI,MAAA,CAAI,IAAA,CAAK,GAAG,CAAC,sLAAI,MAAA,CAAI,IAAA,CAAK,GAAG,CAAC,wLAAM,MAAA,CAAI,IAAA,CAAK,GAAG,CAAC,EAAG,CAAA,OAAO;QAE/D,IAAI,EAAE,CAAA,IAAK,EAAE,CAAA,EAAG;YACf,IAAI,EAAE,CAAA,GAAI,EAAE,CAAA,IAAK,MAAM,GAAG,GAAG,CAAC,IAAI,GAAG;gBACpC,iBAAiB;YAClB;QACD,OAAA,IAAW,EAAE,CAAA,IAAK,EAAE,CAAA,IAAK,MAAM,GAAG,GAAG,CAAC,IAAI,GAAG;YAC5C,iBAAiB;QAClB;IACD;IAEA,OAAO,kBAAkB;AAC1B;AAOO,SAAS,eAAe,CAAA,EAAW;IACzC,OAAO,KAAK,KAAA,CAAM,IAAI,GAAG,IAAI;AAC9B;AAKO,SAAS,QAAQ,CAAA,EAAW;IAClC,OAAO,KAAK,KAAA,CAAM,IAAI,GAAG,IAAI;AAC9B;AAMO,MAAM,cAAc,CAAC,MAAc;IACzC,OAAO,KAAK,GAAA,CAAI,CAAC,IAAI,OAAO,gBAAA;AAC7B;AAUO,SAAS,cAAc,SAAA,EAAmB,OAAA,EAAiB,SAAA,EAAmB;IACpF,MAAM,OACL,YAAY,IACT,mBAAmB,WAAW,OAAO,IACrC,0BAA0B,WAAW,OAAO;IAChD,OAAO;AACR;AAcO,SAAS,eAAe,GAAA,EAAa,CAAA,EAAW,CAAA,EAAW,CAAA,EAAmB;IACpF,IAAI;IACJ,IAAI,KAAK,GAAA,CAAI,GAAG,IAAI,IAAI;QACvB,MAAM,eAAe,GAAG,CAAC;QACzB,MAAM,MAAM,eAAe,GAAG,CAAC;QAC/B,IAAI,KAAK,GAAA,CAAI,GAAG,IAAI,KAAK,GAAA,CAAI,GAAG,GAAG;YAClC,OAAO,MAAM;QACd,OAAO;YACN,OAAA,CAAQ,MAAM,GAAA,IAAO;QACtB;IACD,OAAO;QACN,MAAM,eAAe,GAAG,CAAC;QACzB,MAAM,IAAI,MAAM;QAKhB,IAAI,KAAK,IAAA,CAAK,GAAG,MAAM,KAAK,IAAA,CAAK,GAAG,GAAG;YACtC,OAAO,KAAK,GAAA,CAAI,CAAC,IAAI,MAAM,IAAI;QAChC;QAEA,OAAO;IACR;AACD;AAcO,SAAS,cAAc,CAAA,EAAW,CAAA,EAAW,SAAA,EAAmB,YAAA,EAAsB;IAC5F,MAAM,IAAM,IAAA,CAAA,CAAM,IAAI,CAAA,IAAK,GAAA,IAAQ,MAAA,CAAS,IAAI,CAAA,IAAK;IACrD,IAAI,CAAC,aAAc,CAAA,OAAO;IAC1B,OAAA,CAAQ,MAAM,KAAK,GAAA,CAAI,CAAC,CAAA,IAAA,CAAM,YAAY,IAAI,CAAA,CAAA;AAC/C;AAaO,SAAS,8BAA8B,CAAA,EAAY,CAAA,EAAY,CAAA,EAAY;IACjF,MAAM,IAAI,CAAA,IAAA,CAAM,EAAE,CAAA,GAAA,CAAK,EAAE,CAAA,GAAI,EAAE,CAAA,IAAK,EAAE,CAAA,GAAA,CAAK,EAAE,CAAA,GAAI,EAAE,CAAA,IAAK,EAAE,CAAA,GAAI,EAAE,CAAA,GAAI,EAAE,CAAA,GAAI,EAAE,CAAA;IAC5E,MAAM,IAAA,CAAA,CACH,EAAE,CAAA,GAAI,EAAE,CAAA,GAAI,EAAE,CAAA,GAAI,EAAE,CAAA,IAAA,CAAM,EAAE,CAAA,GAAI,EAAE,CAAA,IAAA,CAClC,EAAE,CAAA,GAAI,EAAE,CAAA,GAAI,EAAE,CAAA,GAAI,EAAE,CAAA,IAAA,CAAM,EAAE,CAAA,GAAI,EAAE,CAAA,IAAA,CAClC,EAAE,CAAA,GAAI,EAAE,CAAA,GAAI,EAAE,CAAA,GAAI,EAAE,CAAA,IAAA,CAAM,EAAE,CAAA,GAAI,EAAE,CAAA,CAAA,IACpC;IACD,MAAM,IAAA,CAAA,CACH,EAAE,CAAA,GAAI,EAAE,CAAA,GAAI,EAAE,CAAA,GAAI,EAAE,CAAA,IAAA,CAAM,EAAE,CAAA,GAAI,EAAE,CAAA,IAAA,CAClC,EAAE,CAAA,GAAI,EAAE,CAAA,GAAI,EAAE,CAAA,GAAI,EAAE,CAAA,IAAA,CAAM,EAAE,CAAA,GAAI,EAAE,CAAA,IAAA,CAClC,EAAE,CAAA,GAAI,EAAE,CAAA,GAAI,EAAE,CAAA,GAAI,EAAE,CAAA,IAAA,CAAM,EAAE,CAAA,GAAI,EAAE,CAAA,CAAA,IACpC;IACD,IAAI,CAAC,OAAO,QAAA,CAAS,CAAC,KAAK,CAAC,OAAO,QAAA,CAAS,CAAC,GAAG;QAC/C,OAAO;IACR;IACA,OAAO,sLAAI,MAAA,CAAI,GAAG,CAAC;AACpB;AAGO,SAAS,eACf,UAAA,EACA,QAAA,EACA,MAAA,EACA,MAAA,EACA,SAAA,EACQ;IACR,IAAI,WAAW,MAAM;QACpB,OAAO;8LAAC,MAAA,CAAI,IAAA,CAAK,UAAU;8LAAG,MAAA,CAAI,IAAA,CAAK,QAAQ,CAAC;SAAA;IACjD;IACA,MAAM,UAAiB,CAAC,CAAA;IACxB,MAAM,+LAAa,MAAA,CAAI,KAAA,CAAM,QAAQ,UAAU;IAC/C,MAAM,6LAAW,MAAA,CAAI,KAAA,CAAM,QAAQ,QAAQ;IAC3C,MAAM,IAAI,mBAAmB,YAAY,QAAQ;IACjD,IAAA,IAAS,IAAI,GAAG,IAAI,WAAW,IAAK;QACnC,MAAM,IAAI,IAAA,CAAK,YAAY,CAAA;QAC3B,MAAM,QAAQ,aAAa,IAAI;QAC/B,MAAM,QAAQ,iBAAiB,QAAQ,QAAQ,KAAK;QACpD,QAAQ,IAAA,CAAK,KAAK;IACnB;IACA,OAAO;AACR","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 786, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omar/Desktop/studio/node_modules/%40tldraw/editor/src/lib/primitives/Box.ts"],"sourcesContent":["import { BoxModel } from '@tldraw/tlschema'\nimport { Vec, VecLike } from './Vec'\nimport { PI, PI2, toPrecision } from './utils'\n\n/** @public */\nexport type BoxLike = BoxModel | Box\n\n/** @public */\nexport type SelectionEdge = 'top' | 'right' | 'bottom' | 'left'\n\n/** @public */\nexport type SelectionCorner = 'top_left' | 'top_right' | 'bottom_right' | 'bottom_left'\n\n/** @public */\nexport type SelectionHandle = SelectionEdge | SelectionCorner\n\n/** @public */\nexport type RotateCorner =\n\t| 'top_left_rotate'\n\t| 'top_right_rotate'\n\t| 'bottom_right_rotate'\n\t| 'bottom_left_rotate'\n\t| 'mobile_rotate'\n\n/** @public */\nexport class Box {\n\tconstructor(x = 0, y = 0, w = 0, h = 0) {\n\t\tthis.x = x\n\t\tthis.y = y\n\t\tthis.w = w\n\t\tthis.h = h\n\t}\n\n\tx = 0\n\ty = 0\n\tw = 0\n\th = 0\n\n\t// eslint-disable-next-line no-restricted-syntax\n\tget point() {\n\t\treturn new Vec(this.x, this.y)\n\t}\n\n\t// eslint-disable-next-line no-restricted-syntax\n\tset point(val: Vec) {\n\t\tthis.x = val.x\n\t\tthis.y = val.y\n\t}\n\n\t// eslint-disable-next-line no-restricted-syntax\n\tget minX() {\n\t\treturn this.x\n\t}\n\n\t// eslint-disable-next-line no-restricted-syntax\n\tset minX(n: number) {\n\t\tthis.x = n\n\t}\n\n\t// eslint-disable-next-line no-restricted-syntax\n\tget left() {\n\t\treturn this.x\n\t}\n\n\t// eslint-disable-next-line no-restricted-syntax\n\tget midX() {\n\t\treturn this.x + this.w / 2\n\t}\n\n\t// eslint-disable-next-line no-restricted-syntax\n\tget maxX() {\n\t\treturn this.x + this.w\n\t}\n\n\t// eslint-disable-next-line no-restricted-syntax\n\tget right() {\n\t\treturn this.x + this.w\n\t}\n\n\t// eslint-disable-next-line no-restricted-syntax\n\tget minY() {\n\t\treturn this.y\n\t}\n\n\t// eslint-disable-next-line no-restricted-syntax\n\tset minY(n: number) {\n\t\tthis.y = n\n\t}\n\n\t// eslint-disable-next-line no-restricted-syntax\n\tget top() {\n\t\treturn this.y\n\t}\n\n\t// eslint-disable-next-line no-restricted-syntax\n\tget midY() {\n\t\treturn this.y + this.h / 2\n\t}\n\n\t// eslint-disable-next-line no-restricted-syntax\n\tget maxY() {\n\t\treturn this.y + this.h\n\t}\n\n\t// eslint-disable-next-line no-restricted-syntax\n\tget bottom() {\n\t\treturn this.y + this.h\n\t}\n\n\t// eslint-disable-next-line no-restricted-syntax\n\tget width() {\n\t\treturn this.w\n\t}\n\n\t// eslint-disable-next-line no-restricted-syntax\n\tset width(n: number) {\n\t\tthis.w = n\n\t}\n\n\t// eslint-disable-next-line no-restricted-syntax\n\tget height() {\n\t\treturn this.h\n\t}\n\n\t// eslint-disable-next-line no-restricted-syntax\n\tset height(n: number) {\n\t\tthis.h = n\n\t}\n\n\t// eslint-disable-next-line no-restricted-syntax\n\tget aspectRatio() {\n\t\treturn this.width / this.height\n\t}\n\n\t// eslint-disable-next-line no-restricted-syntax\n\tget center() {\n\t\treturn new Vec(this.x + this.w / 2, this.y + this.h / 2)\n\t}\n\n\t// eslint-disable-next-line no-restricted-syntax\n\tset center(v: Vec) {\n\t\tthis.x = v.x - this.w / 2\n\t\tthis.y = v.y - this.h / 2\n\t}\n\n\t// eslint-disable-next-line no-restricted-syntax\n\tget corners() {\n\t\treturn [\n\t\t\tnew Vec(this.x, this.y),\n\t\t\tnew Vec(this.x + this.w, this.y),\n\t\t\tnew Vec(this.x + this.w, this.y + this.h),\n\t\t\tnew Vec(this.x, this.y + this.h),\n\t\t]\n\t}\n\n\t// eslint-disable-next-line no-restricted-syntax\n\tget cornersAndCenter() {\n\t\treturn [\n\t\t\tnew Vec(this.x, this.y),\n\t\t\tnew Vec(this.x + this.w, this.y),\n\t\t\tnew Vec(this.x + this.w, this.y + this.h),\n\t\t\tnew Vec(this.x, this.y + this.h),\n\t\t\tnew Vec(this.x + this.w / 2, this.y + this.h / 2),\n\t\t]\n\t}\n\n\t// eslint-disable-next-line no-restricted-syntax\n\tget sides(): Array<[Vec, Vec]> {\n\t\tconst { corners } = this\n\t\treturn [\n\t\t\t[corners[0], corners[1]],\n\t\t\t[corners[1], corners[2]],\n\t\t\t[corners[2], corners[3]],\n\t\t\t[corners[3], corners[0]],\n\t\t]\n\t}\n\n\t// eslint-disable-next-line no-restricted-syntax\n\tget size(): Vec {\n\t\treturn new Vec(this.w, this.h)\n\t}\n\n\ttoFixed() {\n\t\tthis.x = toPrecision(this.x)\n\t\tthis.y = toPrecision(this.y)\n\t\tthis.w = toPrecision(this.w)\n\t\tthis.h = toPrecision(this.h)\n\t\treturn this\n\t}\n\n\tsetTo(B: Box) {\n\t\tthis.x = B.x\n\t\tthis.y = B.y\n\t\tthis.w = B.w\n\t\tthis.h = B.h\n\t\treturn this\n\t}\n\n\tset(x = 0, y = 0, w = 0, h = 0) {\n\t\tthis.x = x\n\t\tthis.y = y\n\t\tthis.w = w\n\t\tthis.h = h\n\t\treturn this\n\t}\n\n\texpand(A: Box) {\n\t\tconst minX = Math.min(this.x, A.x)\n\t\tconst minY = Math.min(this.y, A.y)\n\t\tconst maxX = Math.max(this.x + this.w, A.x + A.w)\n\t\tconst maxY = Math.max(this.y + this.h, A.y + A.h)\n\n\t\tthis.x = minX\n\t\tthis.y = minY\n\t\tthis.w = maxX - minX\n\t\tthis.h = maxY - minY\n\t\treturn this\n\t}\n\n\texpandBy(n: number) {\n\t\tthis.x -= n\n\t\tthis.y -= n\n\t\tthis.w += n * 2\n\t\tthis.h += n * 2\n\t\treturn this\n\t}\n\n\tscale(n: number) {\n\t\tthis.x /= n\n\t\tthis.y /= n\n\t\tthis.w /= n\n\t\tthis.h /= n\n\t\treturn this\n\t}\n\n\tclone() {\n\t\tconst { x, y, w, h } = this\n\t\treturn new Box(x, y, w, h)\n\t}\n\n\ttranslate(delta: VecLike) {\n\t\tthis.x += delta.x\n\t\tthis.y += delta.y\n\t\treturn this\n\t}\n\n\tsnapToGrid(size: number) {\n\t\tconst minX = Math.round(this.x / size) * size\n\t\tconst minY = Math.round(this.y / size) * size\n\t\tconst maxX = Math.round((this.x + this.w) / size) * size\n\t\tconst maxY = Math.round((this.y + this.h) / size) * size\n\t\tthis.minX = minX\n\t\tthis.minY = minY\n\t\tthis.width = Math.max(1, maxX - minX)\n\t\tthis.height = Math.max(1, maxY - minY)\n\t}\n\n\tcollides(B: Box) {\n\t\treturn Box.Collides(this, B)\n\t}\n\n\tcontains(B: Box) {\n\t\treturn Box.Contains(this, B)\n\t}\n\n\tincludes(B: Box) {\n\t\treturn Box.Includes(this, B)\n\t}\n\n\tcontainsPoint(V: VecLike, margin = 0) {\n\t\treturn Box.ContainsPoint(this, V, margin)\n\t}\n\n\tgetHandlePoint(handle: SelectionCorner | SelectionEdge) {\n\t\tswitch (handle) {\n\t\t\tcase 'top_left':\n\t\t\t\treturn new Vec(this.x, this.y)\n\t\t\tcase 'top_right':\n\t\t\t\treturn new Vec(this.x + this.w, this.y)\n\t\t\tcase 'bottom_left':\n\t\t\t\treturn new Vec(this.x, this.y + this.h)\n\t\t\tcase 'bottom_right':\n\t\t\t\treturn new Vec(this.x + this.w, this.y + this.h)\n\t\t\tcase 'top':\n\t\t\t\treturn new Vec(this.x + this.w / 2, this.y)\n\t\t\tcase 'right':\n\t\t\t\treturn new Vec(this.x + this.w, this.y + this.h / 2)\n\t\t\tcase 'bottom':\n\t\t\t\treturn new Vec(this.x + this.w / 2, this.y + this.h)\n\t\t\tcase 'left':\n\t\t\t\treturn new Vec(this.x, this.y + this.h / 2)\n\t\t}\n\t}\n\n\ttoJson(): BoxModel {\n\t\treturn { x: this.x, y: this.y, w: this.w, h: this.h }\n\t}\n\n\tresize(handle: SelectionCorner | SelectionEdge | string, dx: number, dy: number) {\n\t\tconst { minX: a0x, minY: a0y, maxX: a1x, maxY: a1y } = this\n\t\tlet { minX: b0x, minY: b0y, maxX: b1x, maxY: b1y } = this\n\n\t\t// Use the delta to adjust the new box by changing its corners.\n\t\t// The dragging handle (corner or edge) will determine which\n\t\t// corners should change.\n\t\tswitch (handle) {\n\t\t\tcase 'left':\n\t\t\tcase 'top_left':\n\t\t\tcase 'bottom_left': {\n\t\t\t\tb0x += dx\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'right':\n\t\t\tcase 'top_right':\n\t\t\tcase 'bottom_right': {\n\t\t\t\tb1x += dx\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tswitch (handle) {\n\t\t\tcase 'top':\n\t\t\tcase 'top_left':\n\t\t\tcase 'top_right': {\n\t\t\t\tb0y += dy\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'bottom':\n\t\t\tcase 'bottom_left':\n\t\t\tcase 'bottom_right': {\n\t\t\t\tb1y += dy\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tconst scaleX = (b1x - b0x) / (a1x - a0x)\n\t\tconst scaleY = (b1y - b0y) / (a1y - a0y)\n\n\t\tconst flipX = scaleX < 0\n\t\tconst flipY = scaleY < 0\n\n\t\tif (flipX) {\n\t\t\tconst t = b1x\n\t\t\tb1x = b0x\n\t\t\tb0x = t\n\t\t}\n\n\t\tif (flipY) {\n\t\t\tconst t = b1y\n\t\t\tb1y = b0y\n\t\t\tb0y = t\n\t\t}\n\n\t\tthis.minX = b0x\n\t\tthis.minY = b0y\n\t\tthis.width = Math.abs(b1x - b0x)\n\t\tthis.height = Math.abs(b1y - b0y)\n\t}\n\n\tunion(box: BoxModel) {\n\t\tconst minX = Math.min(this.x, box.x)\n\t\tconst minY = Math.min(this.y, box.y)\n\t\tconst maxX = Math.max(this.x + this.w, box.x + box.w)\n\t\tconst maxY = Math.max(this.y + this.h, box.y + box.h)\n\n\t\tthis.x = minX\n\t\tthis.y = minY\n\t\tthis.width = maxX - minX\n\t\tthis.height = maxY - minY\n\n\t\treturn this\n\t}\n\n\tstatic From(box: BoxModel) {\n\t\treturn new Box(box.x, box.y, box.w, box.h)\n\t}\n\n\tstatic FromCenter(center: VecLike, size: VecLike) {\n\t\treturn new Box(center.x - size.x / 2, center.y - size.y / 2, size.x, size.y)\n\t}\n\n\tstatic FromPoints(points: VecLike[]) {\n\t\tif (points.length === 0) return new Box()\n\t\tlet minX = Infinity\n\t\tlet minY = Infinity\n\t\tlet maxX = -Infinity\n\t\tlet maxY = -Infinity\n\t\tlet point: VecLike\n\t\tfor (let i = 0, n = points.length; i < n; i++) {\n\t\t\tpoint = points[i]\n\t\t\tminX = Math.min(point.x, minX)\n\t\t\tminY = Math.min(point.y, minY)\n\t\t\tmaxX = Math.max(point.x, maxX)\n\t\t\tmaxY = Math.max(point.y, maxY)\n\t\t}\n\n\t\treturn new Box(minX, minY, maxX - minX, maxY - minY)\n\t}\n\n\tstatic Expand(A: Box, B: Box) {\n\t\tconst minX = Math.min(B.minX, A.minX)\n\t\tconst minY = Math.min(B.minY, A.minY)\n\t\tconst maxX = Math.max(B.maxX, A.maxX)\n\t\tconst maxY = Math.max(B.maxY, A.maxY)\n\n\t\treturn new Box(minX, minY, maxX - minX, maxY - minY)\n\t}\n\n\tstatic ExpandBy(A: Box, n: number) {\n\t\treturn new Box(A.minX - n, A.minY - n, A.width + n * 2, A.height + n * 2)\n\t}\n\n\tstatic Collides(A: Box, B: Box) {\n\t\treturn !(A.maxX < B.minX || A.minX > B.maxX || A.maxY < B.minY || A.minY > B.maxY)\n\t}\n\n\tstatic Contains(A: Box, B: Box) {\n\t\treturn A.minX < B.minX && A.minY < B.minY && A.maxY > B.maxY && A.maxX > B.maxX\n\t}\n\n\tstatic Includes(A: Box, B: Box) {\n\t\treturn Box.Collides(A, B) || Box.Contains(A, B)\n\t}\n\n\tstatic ContainsPoint(A: Box, B: VecLike, margin = 0) {\n\t\treturn !(\n\t\t\tB.x < A.minX - margin ||\n\t\t\tB.y < A.minY - margin ||\n\t\t\tB.x > A.maxX + margin ||\n\t\t\tB.y > A.maxY + margin\n\t\t)\n\t}\n\n\tstatic Common(boxes: Box[]) {\n\t\tlet minX = Infinity\n\t\tlet minY = Infinity\n\t\tlet maxX = -Infinity\n\t\tlet maxY = -Infinity\n\n\t\tfor (let i = 0; i < boxes.length; i++) {\n\t\t\tconst B = boxes[i]\n\t\t\tminX = Math.min(minX, B.minX)\n\t\t\tminY = Math.min(minY, B.minY)\n\t\t\tmaxX = Math.max(maxX, B.maxX)\n\t\t\tmaxY = Math.max(maxY, B.maxY)\n\t\t}\n\n\t\treturn new Box(minX, minY, maxX - minX, maxY - minY)\n\t}\n\n\tstatic Sides(A: Box, inset = 0) {\n\t\tconst { corners } = A\n\t\tif (inset) {\n\t\t\t// TODO: Inset the corners by the inset amount.\n\t\t}\n\n\t\treturn [\n\t\t\t[corners[0], corners[1]],\n\t\t\t[corners[1], corners[2]],\n\t\t\t[corners[2], corners[3]],\n\t\t\t[corners[3], corners[0]],\n\t\t]\n\t}\n\n\tstatic Resize(\n\t\tbox: Box,\n\t\thandle: SelectionCorner | SelectionEdge | string,\n\t\tdx: number,\n\t\tdy: number,\n\t\tisAspectRatioLocked = false\n\t) {\n\t\tconst { minX: a0x, minY: a0y, maxX: a1x, maxY: a1y } = box\n\t\tlet { minX: b0x, minY: b0y, maxX: b1x, maxY: b1y } = box\n\n\t\t// Use the delta to adjust the new box by changing its corners.\n\t\t// The dragging handle (corner or edge) will determine which\n\t\t// corners should change.\n\t\tswitch (handle) {\n\t\t\tcase 'left':\n\t\t\tcase 'top_left':\n\t\t\tcase 'bottom_left': {\n\t\t\t\tb0x += dx\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'right':\n\t\t\tcase 'top_right':\n\t\t\tcase 'bottom_right': {\n\t\t\t\tb1x += dx\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tswitch (handle) {\n\t\t\tcase 'top':\n\t\t\tcase 'top_left':\n\t\t\tcase 'top_right': {\n\t\t\t\tb0y += dy\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'bottom':\n\t\t\tcase 'bottom_left':\n\t\t\tcase 'bottom_right': {\n\t\t\t\tb1y += dy\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\n\t\tconst scaleX = (b1x - b0x) / (a1x - a0x)\n\t\tconst scaleY = (b1y - b0y) / (a1y - a0y)\n\n\t\tconst flipX = scaleX < 0\n\t\tconst flipY = scaleY < 0\n\n\t\t/*\n    2. Aspect ratio\n    If the aspect ratio is locked, adjust the corners so that the\n    new box's aspect ratio matches the original aspect ratio.\n    */\n\t\tif (isAspectRatioLocked) {\n\t\t\tconst aspectRatio = (a1x - a0x) / (a1y - a0y)\n\t\t\tconst bw = Math.abs(b1x - b0x)\n\t\t\tconst bh = Math.abs(b1y - b0y)\n\t\t\tconst tw = bw * (scaleY < 0 ? 1 : -1) * (1 / aspectRatio)\n\t\t\tconst th = bh * (scaleX < 0 ? 1 : -1) * aspectRatio\n\t\t\tconst isTall = aspectRatio < bw / bh\n\n\t\t\tswitch (handle) {\n\t\t\t\tcase 'top_left': {\n\t\t\t\t\tif (isTall) b0y = b1y + tw\n\t\t\t\t\telse b0x = b1x + th\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcase 'top_right': {\n\t\t\t\t\tif (isTall) b0y = b1y + tw\n\t\t\t\t\telse b1x = b0x - th\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcase 'bottom_right': {\n\t\t\t\t\tif (isTall) b1y = b0y - tw\n\t\t\t\t\telse b1x = b0x - th\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcase 'bottom_left': {\n\t\t\t\t\tif (isTall) b1y = b0y - tw\n\t\t\t\t\telse b0x = b1x + th\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcase 'bottom':\n\t\t\t\tcase 'top': {\n\t\t\t\t\tconst m = (b0x + b1x) / 2\n\t\t\t\t\tconst w = bh * aspectRatio\n\t\t\t\t\tb0x = m - w / 2\n\t\t\t\t\tb1x = m + w / 2\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcase 'left':\n\t\t\t\tcase 'right': {\n\t\t\t\t\tconst m = (b0y + b1y) / 2\n\t\t\t\t\tconst h = bw / aspectRatio\n\t\t\t\t\tb0y = m - h / 2\n\t\t\t\t\tb1y = m + h / 2\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (flipX) {\n\t\t\tconst t = b1x\n\t\t\tb1x = b0x\n\t\t\tb0x = t\n\t\t}\n\n\t\tif (flipY) {\n\t\t\tconst t = b1y\n\t\t\tb1y = b0y\n\t\t\tb0y = t\n\t\t}\n\n\t\tconst final = new Box(b0x, b0y, Math.abs(b1x - b0x), Math.abs(b1y - b0y))\n\n\t\treturn {\n\t\t\tbox: final,\n\t\t\tscaleX: +((final.width / box.width) * (scaleX > 0 ? 1 : -1)).toFixed(5),\n\t\t\tscaleY: +((final.height / box.height) * (scaleY > 0 ? 1 : -1)).toFixed(5),\n\t\t}\n\t}\n\n\tequals(other: Box | BoxModel) {\n\t\treturn Box.Equals(this, other)\n\t}\n\n\tstatic Equals(a: Box | BoxModel, b: Box | BoxModel) {\n\t\treturn b.x === a.x && b.y === a.y && b.w === a.w && b.h === a.h\n\t}\n\n\tzeroFix() {\n\t\tthis.w = Math.max(1, this.w)\n\t\tthis.h = Math.max(1, this.h)\n\t\treturn this\n\t}\n\n\tstatic ZeroFix(other: Box | BoxModel) {\n\t\treturn new Box(other.x, other.y, Math.max(1, other.w), Math.max(1, other.h))\n\t}\n}\n\n/** @public */\nexport function flipSelectionHandleY(handle: SelectionHandle) {\n\tswitch (handle) {\n\t\tcase 'top':\n\t\t\treturn 'bottom'\n\t\tcase 'bottom':\n\t\t\treturn 'top'\n\t\tcase 'top_left':\n\t\t\treturn 'bottom_left'\n\t\tcase 'top_right':\n\t\t\treturn 'bottom_right'\n\t\tcase 'bottom_left':\n\t\t\treturn 'top_left'\n\t\tcase 'bottom_right':\n\t\t\treturn 'top_right'\n\t\tdefault:\n\t\t\treturn handle\n\t}\n}\n\n/** @public */\nexport function flipSelectionHandleX(handle: SelectionHandle) {\n\tswitch (handle) {\n\t\tcase 'left':\n\t\t\treturn 'right'\n\t\tcase 'right':\n\t\t\treturn 'left'\n\t\tcase 'top_left':\n\t\t\treturn 'top_right'\n\t\tcase 'top_right':\n\t\t\treturn 'top_left'\n\t\tcase 'bottom_left':\n\t\t\treturn 'bottom_right'\n\t\tcase 'bottom_right':\n\t\t\treturn 'bottom_left'\n\t\tdefault:\n\t\t\treturn handle\n\t}\n}\n\nconst ORDERED_SELECTION_HANDLES = [\n\t'top',\n\t'top_right',\n\t'right',\n\t'bottom_right',\n\t'bottom',\n\t'bottom_left',\n\t'left',\n\t'top_left',\n] as const\n\n/** @public */\nexport function rotateSelectionHandle(handle: SelectionHandle, rotation: number): SelectionHandle {\n\t// first find out how many tau we need to rotate by\n\trotation = rotation % PI2\n\tconst numSteps = Math.round(rotation / (PI / 4))\n\n\tconst currentIndex = ORDERED_SELECTION_HANDLES.indexOf(handle)\n\treturn ORDERED_SELECTION_HANDLES[(currentIndex + numSteps) % ORDERED_SELECTION_HANDLES.length]\n}\n\n/** @public */\nexport function isSelectionCorner(selection: string): selection is SelectionCorner {\n\treturn (\n\t\tselection === 'top_left' ||\n\t\tselection === 'top_right' ||\n\t\tselection === 'bottom_right' ||\n\t\tselection === 'bottom_left'\n\t)\n}\n\n/** @public */\nexport const ROTATE_CORNER_TO_SELECTION_CORNER = {\n\ttop_left_rotate: 'top_left',\n\ttop_right_rotate: 'top_right',\n\tbottom_right_rotate: 'bottom_right',\n\tbottom_left_rotate: 'bottom_left',\n\tmobile_rotate: 'top_left',\n} as const\n"],"names":[],"mappings":";;;;;;;;AACA,SAAS,WAAoB;AAC7B,SAAS,IAAI,KAAK,mBAAmB;;;AAuB9B,MAAM,IAAI;IAChB,YAAY,IAAI,CAAA,EAAG,IAAI,CAAA,EAAG,IAAI,CAAA,EAAG,IAAI,CAAA,CAAG;QACvC,IAAA,CAAK,CAAA,GAAI;QACT,IAAA,CAAK,CAAA,GAAI;QACT,IAAA,CAAK,CAAA,GAAI;QACT,IAAA,CAAK,CAAA,GAAI;IACV;IAEA,IAAI,EAAA;IACJ,IAAI,EAAA;IACJ,IAAI,EAAA;IACJ,IAAI,EAAA;IAAA,gDAAA;IAGJ,IAAI,QAAQ;QACX,OAAO,qLAAI,OAAA,CAAI,IAAA,CAAK,CAAA,EAAG,IAAA,CAAK,CAAC;IAC9B;IAAA,gDAAA;IAGA,IAAI,MAAM,GAAA,EAAU;QACnB,IAAA,CAAK,CAAA,GAAI,IAAI,CAAA;QACb,IAAA,CAAK,CAAA,GAAI,IAAI,CAAA;IACd;IAAA,gDAAA;IAGA,IAAI,OAAO;QACV,OAAO,IAAA,CAAK,CAAA;IACb;IAAA,gDAAA;IAGA,IAAI,KAAK,CAAA,EAAW;QACnB,IAAA,CAAK,CAAA,GAAI;IACV;IAAA,gDAAA;IAGA,IAAI,OAAO;QACV,OAAO,IAAA,CAAK,CAAA;IACb;IAAA,gDAAA;IAGA,IAAI,OAAO;QACV,OAAO,IAAA,CAAK,CAAA,GAAI,IAAA,CAAK,CAAA,GAAI;IAC1B;IAAA,gDAAA;IAGA,IAAI,OAAO;QACV,OAAO,IAAA,CAAK,CAAA,GAAI,IAAA,CAAK,CAAA;IACtB;IAAA,gDAAA;IAGA,IAAI,QAAQ;QACX,OAAO,IAAA,CAAK,CAAA,GAAI,IAAA,CAAK,CAAA;IACtB;IAAA,gDAAA;IAGA,IAAI,OAAO;QACV,OAAO,IAAA,CAAK,CAAA;IACb;IAAA,gDAAA;IAGA,IAAI,KAAK,CAAA,EAAW;QACnB,IAAA,CAAK,CAAA,GAAI;IACV;IAAA,gDAAA;IAGA,IAAI,MAAM;QACT,OAAO,IAAA,CAAK,CAAA;IACb;IAAA,gDAAA;IAGA,IAAI,OAAO;QACV,OAAO,IAAA,CAAK,CAAA,GAAI,IAAA,CAAK,CAAA,GAAI;IAC1B;IAAA,gDAAA;IAGA,IAAI,OAAO;QACV,OAAO,IAAA,CAAK,CAAA,GAAI,IAAA,CAAK,CAAA;IACtB;IAAA,gDAAA;IAGA,IAAI,SAAS;QACZ,OAAO,IAAA,CAAK,CAAA,GAAI,IAAA,CAAK,CAAA;IACtB;IAAA,gDAAA;IAGA,IAAI,QAAQ;QACX,OAAO,IAAA,CAAK,CAAA;IACb;IAAA,gDAAA;IAGA,IAAI,MAAM,CAAA,EAAW;QACpB,IAAA,CAAK,CAAA,GAAI;IACV;IAAA,gDAAA;IAGA,IAAI,SAAS;QACZ,OAAO,IAAA,CAAK,CAAA;IACb;IAAA,gDAAA;IAGA,IAAI,OAAO,CAAA,EAAW;QACrB,IAAA,CAAK,CAAA,GAAI;IACV;IAAA,gDAAA;IAGA,IAAI,cAAc;QACjB,OAAO,IAAA,CAAK,KAAA,GAAQ,IAAA,CAAK,MAAA;IAC1B;IAAA,gDAAA;IAGA,IAAI,SAAS;QACZ,OAAO,qLAAI,OAAA,CAAI,IAAA,CAAK,CAAA,GAAI,IAAA,CAAK,CAAA,GAAI,GAAG,IAAA,CAAK,CAAA,GAAI,IAAA,CAAK,CAAA,GAAI,CAAC;IACxD;IAAA,gDAAA;IAGA,IAAI,OAAO,CAAA,EAAQ;QAClB,IAAA,CAAK,CAAA,GAAI,EAAE,CAAA,GAAI,IAAA,CAAK,CAAA,GAAI;QACxB,IAAA,CAAK,CAAA,GAAI,EAAE,CAAA,GAAI,IAAA,CAAK,CAAA,GAAI;IACzB;IAAA,gDAAA;IAGA,IAAI,UAAU;QACb,OAAO;YACN,sLAAI,MAAA,CAAI,IAAA,CAAK,CAAA,EAAG,IAAA,CAAK,CAAC;YACtB,IAAI,wLAAA,CAAI,IAAA,CAAK,CAAA,GAAI,IAAA,CAAK,CAAA,EAAG,IAAA,CAAK,CAAC;YAC/B,sLAAI,MAAA,CAAI,IAAA,CAAK,CAAA,GAAI,IAAA,CAAK,CAAA,EAAG,IAAA,CAAK,CAAA,GAAI,IAAA,CAAK,CAAC;YACxC,sLAAI,MAAA,CAAI,IAAA,CAAK,CAAA,EAAG,IAAA,CAAK,CAAA,GAAI,IAAA,CAAK,CAAC;SAChC;IACD;IAAA,gDAAA;IAGA,IAAI,mBAAmB;QACtB,OAAO;YACN,sLAAI,MAAA,CAAI,IAAA,CAAK,CAAA,EAAG,IAAA,CAAK,CAAC;YACtB,sLAAI,MAAA,CAAI,IAAA,CAAK,CAAA,GAAI,IAAA,CAAK,CAAA,EAAG,IAAA,CAAK,CAAC;YAC/B,sLAAI,MAAA,CAAI,IAAA,CAAK,CAAA,GAAI,IAAA,CAAK,CAAA,EAAG,IAAA,CAAK,CAAA,GAAI,IAAA,CAAK,CAAC;YACxC,sLAAI,MAAA,CAAI,IAAA,CAAK,CAAA,EAAG,IAAA,CAAK,CAAA,GAAI,IAAA,CAAK,CAAC;YAC/B,sLAAI,MAAA,CAAI,IAAA,CAAK,CAAA,GAAI,IAAA,CAAK,CAAA,GAAI,GAAG,IAAA,CAAK,CAAA,GAAI,IAAA,CAAK,CAAA,GAAI,CAAC;SACjD;IACD;IAAA,gDAAA;IAGA,IAAI,QAA2B;QAC9B,MAAM,EAAE,OAAA,CAAQ,CAAA,GAAI,IAAA;QACpB,OAAO;YACN;gBAAC,OAAA,CAAQ,CAAC,CAAA;gBAAG,OAAA,CAAQ,CAAC,CAAC;aAAA;YACvB;gBAAC,OAAA,CAAQ,CAAC,CAAA;gBAAG,OAAA,CAAQ,CAAC,CAAC;aAAA;YACvB;gBAAC,OAAA,CAAQ,CAAC,CAAA;gBAAG,OAAA,CAAQ,CAAC,CAAC;aAAA;YACvB;gBAAC,OAAA,CAAQ,CAAC,CAAA;gBAAG,OAAA,CAAQ,CAAC,CAAC;aAAA;SACxB;IACD;IAAA,gDAAA;IAGA,IAAI,OAAY;QACf,OAAO,qLAAI,OAAA,CAAI,IAAA,CAAK,CAAA,EAAG,IAAA,CAAK,CAAC;IAC9B;IAEA,UAAU;QACT,IAAA,CAAK,CAAA,2LAAI,cAAA,EAAY,IAAA,CAAK,CAAC;QAC3B,IAAA,CAAK,CAAA,2LAAI,cAAA,EAAY,IAAA,CAAK,CAAC;QAC3B,IAAA,CAAK,CAAA,0LAAI,eAAA,EAAY,IAAA,CAAK,CAAC;QAC3B,IAAA,CAAK,CAAA,2LAAI,cAAA,EAAY,IAAA,CAAK,CAAC;QAC3B,OAAO,IAAA;IACR;IAEA,MAAM,CAAA,EAAQ;QACb,IAAA,CAAK,CAAA,GAAI,EAAE,CAAA;QACX,IAAA,CAAK,CAAA,GAAI,EAAE,CAAA;QACX,IAAA,CAAK,CAAA,GAAI,EAAE,CAAA;QACX,IAAA,CAAK,CAAA,GAAI,EAAE,CAAA;QACX,OAAO,IAAA;IACR;IAEA,IAAI,IAAI,CAAA,EAAG,IAAI,CAAA,EAAG,IAAI,CAAA,EAAG,IAAI,CAAA,EAAG;QAC/B,IAAA,CAAK,CAAA,GAAI;QACT,IAAA,CAAK,CAAA,GAAI;QACT,IAAA,CAAK,CAAA,GAAI;QACT,IAAA,CAAK,CAAA,GAAI;QACT,OAAO,IAAA;IACR;IAEA,OAAO,CAAA,EAAQ;QACd,MAAM,OAAO,KAAK,GAAA,CAAI,IAAA,CAAK,CAAA,EAAG,EAAE,CAAC;QACjC,MAAM,OAAO,KAAK,GAAA,CAAI,IAAA,CAAK,CAAA,EAAG,EAAE,CAAC;QACjC,MAAM,OAAO,KAAK,GAAA,CAAI,IAAA,CAAK,CAAA,GAAI,IAAA,CAAK,CAAA,EAAG,EAAE,CAAA,GAAI,EAAE,CAAC;QAChD,MAAM,OAAO,KAAK,GAAA,CAAI,IAAA,CAAK,CAAA,GAAI,IAAA,CAAK,CAAA,EAAG,EAAE,CAAA,GAAI,EAAE,CAAC;QAEhD,IAAA,CAAK,CAAA,GAAI;QACT,IAAA,CAAK,CAAA,GAAI;QACT,IAAA,CAAK,CAAA,GAAI,OAAO;QAChB,IAAA,CAAK,CAAA,GAAI,OAAO;QAChB,OAAO,IAAA;IACR;IAEA,SAAS,CAAA,EAAW;QACnB,IAAA,CAAK,CAAA,IAAK;QACV,IAAA,CAAK,CAAA,IAAK;QACV,IAAA,CAAK,CAAA,IAAK,IAAI;QACd,IAAA,CAAK,CAAA,IAAK,IAAI;QACd,OAAO,IAAA;IACR;IAEA,MAAM,CAAA,EAAW;QAChB,IAAA,CAAK,CAAA,IAAK;QACV,IAAA,CAAK,CAAA,IAAK;QACV,IAAA,CAAK,CAAA,IAAK;QACV,IAAA,CAAK,CAAA,IAAK;QACV,OAAO,IAAA;IACR;IAEA,QAAQ;QACP,MAAM,EAAE,CAAA,EAAG,CAAA,EAAG,CAAA,EAAG,CAAA,CAAE,CAAA,GAAI,IAAA;QACvB,OAAO,IAAI,IAAI,GAAG,GAAG,GAAG,CAAC;IAC1B;IAEA,UAAU,KAAA,EAAgB;QACzB,IAAA,CAAK,CAAA,IAAK,MAAM,CAAA;QAChB,IAAA,CAAK,CAAA,IAAK,MAAM,CAAA;QAChB,OAAO,IAAA;IACR;IAEA,WAAW,IAAA,EAAc;QACxB,MAAM,OAAO,KAAK,KAAA,CAAM,IAAA,CAAK,CAAA,GAAI,IAAI,IAAI;QACzC,MAAM,OAAO,KAAK,KAAA,CAAM,IAAA,CAAK,CAAA,GAAI,IAAI,IAAI;QACzC,MAAM,OAAO,KAAK,KAAA,CAAA,CAAO,IAAA,CAAK,CAAA,GAAI,IAAA,CAAK,CAAA,IAAK,IAAI,IAAI;QACpD,MAAM,OAAO,KAAK,KAAA,CAAA,CAAO,IAAA,CAAK,CAAA,GAAI,IAAA,CAAK,CAAA,IAAK,IAAI,IAAI;QACpD,IAAA,CAAK,IAAA,GAAO;QACZ,IAAA,CAAK,IAAA,GAAO;QACZ,IAAA,CAAK,KAAA,GAAQ,KAAK,GAAA,CAAI,GAAG,OAAO,IAAI;QACpC,IAAA,CAAK,MAAA,GAAS,KAAK,GAAA,CAAI,GAAG,OAAO,IAAI;IACtC;IAEA,SAAS,CAAA,EAAQ;QAChB,OAAO,IAAI,QAAA,CAAS,IAAA,EAAM,CAAC;IAC5B;IAEA,SAAS,CAAA,EAAQ;QAChB,OAAO,IAAI,QAAA,CAAS,IAAA,EAAM,CAAC;IAC5B;IAEA,SAAS,CAAA,EAAQ;QAChB,OAAO,IAAI,QAAA,CAAS,IAAA,EAAM,CAAC;IAC5B;IAEA,cAAc,CAAA,EAAY,SAAS,CAAA,EAAG;QACrC,OAAO,IAAI,aAAA,CAAc,IAAA,EAAM,GAAG,MAAM;IACzC;IAEA,eAAe,MAAA,EAAyC;QACvD,OAAQ,QAAQ;YACf,KAAK;gBACJ,OAAO,sLAAI,MAAA,CAAI,IAAA,CAAK,CAAA,EAAG,IAAA,CAAK,CAAC;YAC9B,KAAK;gBACJ,OAAO,sLAAI,MAAA,CAAI,IAAA,CAAK,CAAA,GAAI,IAAA,CAAK,CAAA,EAAG,IAAA,CAAK,CAAC;YACvC,KAAK;gBACJ,OAAO,sLAAI,MAAA,CAAI,IAAA,CAAK,CAAA,EAAG,IAAA,CAAK,CAAA,GAAI,IAAA,CAAK,CAAC;YACvC,KAAK;gBACJ,OAAO,sLAAI,MAAA,CAAI,IAAA,CAAK,CAAA,GAAI,IAAA,CAAK,CAAA,EAAG,IAAA,CAAK,CAAA,GAAI,IAAA,CAAK,CAAC;YAChD,KAAK;gBACJ,OAAO,sLAAI,MAAA,CAAI,IAAA,CAAK,CAAA,GAAI,IAAA,CAAK,CAAA,GAAI,GAAG,IAAA,CAAK,CAAC;YAC3C,KAAK;gBACJ,OAAO,IAAI,wLAAA,CAAI,IAAA,CAAK,CAAA,GAAI,IAAA,CAAK,CAAA,EAAG,IAAA,CAAK,CAAA,GAAI,IAAA,CAAK,CAAA,GAAI,CAAC;YACpD,KAAK;gBACJ,OAAO,sLAAI,MAAA,CAAI,IAAA,CAAK,CAAA,GAAI,IAAA,CAAK,CAAA,GAAI,GAAG,IAAA,CAAK,CAAA,GAAI,IAAA,CAAK,CAAC;YACpD,KAAK;gBACJ,OAAO,sLAAI,MAAA,CAAI,IAAA,CAAK,CAAA,EAAG,IAAA,CAAK,CAAA,GAAI,IAAA,CAAK,CAAA,GAAI,CAAC;QAC5C;IACD;IAEA,SAAmB;QAClB,OAAO;YAAE,GAAG,IAAA,CAAK,CAAA;YAAG,GAAG,IAAA,CAAK,CAAA;YAAG,GAAG,IAAA,CAAK,CAAA;YAAG,GAAG,IAAA,CAAK,CAAA;QAAE;IACrD;IAEA,OAAO,MAAA,EAAkD,EAAA,EAAY,EAAA,EAAY;QAChF,MAAM,EAAE,MAAM,GAAA,EAAK,MAAM,GAAA,EAAK,MAAM,GAAA,EAAK,MAAM,GAAA,CAAI,CAAA,GAAI,IAAA;QACvD,IAAI,EAAE,MAAM,GAAA,EAAK,MAAM,GAAA,EAAK,MAAM,GAAA,EAAK,MAAM,GAAA,CAAI,CAAA,GAAI,IAAA;QAKrD,OAAQ,QAAQ;YACf,KAAK;YACL,KAAK;YACL,KAAK;gBAAe;oBACnB,OAAO;oBACP;gBACD;YACA,KAAK;YACL,KAAK;YACL,KAAK;gBAAgB;oBACpB,OAAO;oBACP;gBACD;QACD;QACA,OAAQ,QAAQ;YACf,KAAK;YACL,KAAK;YACL,KAAK;gBAAa;oBACjB,OAAO;oBACP;gBACD;YACA,KAAK;YACL,KAAK;YACL,KAAK;gBAAgB;oBACpB,OAAO;oBACP;gBACD;QACD;QAEA,MAAM,SAAA,CAAU,MAAM,GAAA,IAAA,CAAQ,MAAM,GAAA;QACpC,MAAM,SAAA,CAAU,MAAM,GAAA,IAAA,CAAQ,MAAM,GAAA;QAEpC,MAAM,QAAQ,SAAS;QACvB,MAAM,QAAQ,SAAS;QAEvB,IAAI,OAAO;YACV,MAAM,IAAI;YACV,MAAM;YACN,MAAM;QACP;QAEA,IAAI,OAAO;YACV,MAAM,IAAI;YACV,MAAM;YACN,MAAM;QACP;QAEA,IAAA,CAAK,IAAA,GAAO;QACZ,IAAA,CAAK,IAAA,GAAO;QACZ,IAAA,CAAK,KAAA,GAAQ,KAAK,GAAA,CAAI,MAAM,GAAG;QAC/B,IAAA,CAAK,MAAA,GAAS,KAAK,GAAA,CAAI,MAAM,GAAG;IACjC;IAEA,MAAM,GAAA,EAAe;QACpB,MAAM,OAAO,KAAK,GAAA,CAAI,IAAA,CAAK,CAAA,EAAG,IAAI,CAAC;QACnC,MAAM,OAAO,KAAK,GAAA,CAAI,IAAA,CAAK,CAAA,EAAG,IAAI,CAAC;QACnC,MAAM,OAAO,KAAK,GAAA,CAAI,IAAA,CAAK,CAAA,GAAI,IAAA,CAAK,CAAA,EAAG,IAAI,CAAA,GAAI,IAAI,CAAC;QACpD,MAAM,OAAO,KAAK,GAAA,CAAI,IAAA,CAAK,CAAA,GAAI,IAAA,CAAK,CAAA,EAAG,IAAI,CAAA,GAAI,IAAI,CAAC;QAEpD,IAAA,CAAK,CAAA,GAAI;QACT,IAAA,CAAK,CAAA,GAAI;QACT,IAAA,CAAK,KAAA,GAAQ,OAAO;QACpB,IAAA,CAAK,MAAA,GAAS,OAAO;QAErB,OAAO,IAAA;IACR;IAEA,OAAO,KAAK,GAAA,EAAe;QAC1B,OAAO,IAAI,IAAI,IAAI,CAAA,EAAG,IAAI,CAAA,EAAG,IAAI,CAAA,EAAG,IAAI,CAAC;IAC1C;IAEA,OAAO,WAAW,MAAA,EAAiB,IAAA,EAAe;QACjD,OAAO,IAAI,IAAI,OAAO,CAAA,GAAI,KAAK,CAAA,GAAI,GAAG,OAAO,CAAA,GAAI,KAAK,CAAA,GAAI,GAAG,KAAK,CAAA,EAAG,KAAK,CAAC;IAC5E;IAEA,OAAO,WAAW,MAAA,EAAmB;QACpC,IAAI,OAAO,MAAA,KAAW,EAAG,CAAA,OAAO,IAAI,IAAI;QACxC,IAAI,OAAO;QACX,IAAI,OAAO;QACX,IAAI,OAAO,CAAA;QACX,IAAI,OAAO,CAAA;QACX,IAAI;QACJ,IAAA,IAAS,IAAI,GAAG,IAAI,OAAO,MAAA,EAAQ,IAAI,GAAG,IAAK;YAC9C,QAAQ,MAAA,CAAO,CAAC,CAAA;YAChB,OAAO,KAAK,GAAA,CAAI,MAAM,CAAA,EAAG,IAAI;YAC7B,OAAO,KAAK,GAAA,CAAI,MAAM,CAAA,EAAG,IAAI;YAC7B,OAAO,KAAK,GAAA,CAAI,MAAM,CAAA,EAAG,IAAI;YAC7B,OAAO,KAAK,GAAA,CAAI,MAAM,CAAA,EAAG,IAAI;QAC9B;QAEA,OAAO,IAAI,IAAI,MAAM,MAAM,OAAO,MAAM,OAAO,IAAI;IACpD;IAEA,OAAO,OAAO,CAAA,EAAQ,CAAA,EAAQ;QAC7B,MAAM,OAAO,KAAK,GAAA,CAAI,EAAE,IAAA,EAAM,EAAE,IAAI;QACpC,MAAM,OAAO,KAAK,GAAA,CAAI,EAAE,IAAA,EAAM,EAAE,IAAI;QACpC,MAAM,OAAO,KAAK,GAAA,CAAI,EAAE,IAAA,EAAM,EAAE,IAAI;QACpC,MAAM,OAAO,KAAK,GAAA,CAAI,EAAE,IAAA,EAAM,EAAE,IAAI;QAEpC,OAAO,IAAI,IAAI,MAAM,MAAM,OAAO,MAAM,OAAO,IAAI;IACpD;IAEA,OAAO,SAAS,CAAA,EAAQ,CAAA,EAAW;QAClC,OAAO,IAAI,IAAI,EAAE,IAAA,GAAO,GAAG,EAAE,IAAA,GAAO,GAAG,EAAE,KAAA,GAAQ,IAAI,GAAG,EAAE,MAAA,GAAS,IAAI,CAAC;IACzE;IAEA,OAAO,SAAS,CAAA,EAAQ,CAAA,EAAQ;QAC/B,OAAO,CAAA,CAAE,EAAE,IAAA,GAAO,EAAE,IAAA,IAAQ,EAAE,IAAA,GAAO,EAAE,IAAA,IAAQ,EAAE,IAAA,GAAO,EAAE,IAAA,IAAQ,EAAE,IAAA,GAAO,EAAE,IAAA;IAC9E;IAEA,OAAO,SAAS,CAAA,EAAQ,CAAA,EAAQ;QAC/B,OAAO,EAAE,IAAA,GAAO,EAAE,IAAA,IAAQ,EAAE,IAAA,GAAO,EAAE,IAAA,IAAQ,EAAE,IAAA,GAAO,EAAE,IAAA,IAAQ,EAAE,IAAA,GAAO,EAAE,IAAA;IAC5E;IAEA,OAAO,SAAS,CAAA,EAAQ,CAAA,EAAQ;QAC/B,OAAO,IAAI,QAAA,CAAS,GAAG,CAAC,KAAK,IAAI,QAAA,CAAS,GAAG,CAAC;IAC/C;IAEA,OAAO,cAAc,CAAA,EAAQ,CAAA,EAAY,SAAS,CAAA,EAAG;QACpD,OAAO,CAAA,CACN,EAAE,CAAA,GAAI,EAAE,IAAA,GAAO,UACf,EAAE,CAAA,GAAI,EAAE,IAAA,GAAO,UACf,EAAE,CAAA,GAAI,EAAE,IAAA,GAAO,UACf,EAAE,CAAA,GAAI,EAAE,IAAA,GAAO,MAAA;IAEjB;IAEA,OAAO,OAAO,KAAA,EAAc;QAC3B,IAAI,OAAO;QACX,IAAI,OAAO;QACX,IAAI,OAAO,CAAA;QACX,IAAI,OAAO,CAAA;QAEX,IAAA,IAAS,IAAI,GAAG,IAAI,MAAM,MAAA,EAAQ,IAAK;YACtC,MAAM,IAAI,KAAA,CAAM,CAAC,CAAA;YACjB,OAAO,KAAK,GAAA,CAAI,MAAM,EAAE,IAAI;YAC5B,OAAO,KAAK,GAAA,CAAI,MAAM,EAAE,IAAI;YAC5B,OAAO,KAAK,GAAA,CAAI,MAAM,EAAE,IAAI;YAC5B,OAAO,KAAK,GAAA,CAAI,MAAM,EAAE,IAAI;QAC7B;QAEA,OAAO,IAAI,IAAI,MAAM,MAAM,OAAO,MAAM,OAAO,IAAI;IACpD;IAEA,OAAO,MAAM,CAAA,EAAQ,QAAQ,CAAA,EAAG;QAC/B,MAAM,EAAE,OAAA,CAAQ,CAAA,GAAI;QACpB,IAAI,OAAO,CAEX;QAEA,OAAO;YACN;gBAAC,OAAA,CAAQ,CAAC,CAAA;gBAAG,OAAA,CAAQ,CAAC,CAAC;aAAA;YACvB;gBAAC,OAAA,CAAQ,CAAC,CAAA;gBAAG,OAAA,CAAQ,CAAC,CAAC;aAAA;YACvB;gBAAC,OAAA,CAAQ,CAAC,CAAA;gBAAG,OAAA,CAAQ,CAAC,CAAC;aAAA;YACvB;gBAAC,OAAA,CAAQ,CAAC,CAAA;gBAAG,OAAA,CAAQ,CAAC,CAAC;aAAA;SACxB;IACD;IAEA,OAAO,OACN,GAAA,EACA,MAAA,EACA,EAAA,EACA,EAAA,EACA,sBAAsB,KAAA,EACrB;QACD,MAAM,EAAE,MAAM,GAAA,EAAK,MAAM,GAAA,EAAK,MAAM,GAAA,EAAK,MAAM,GAAA,CAAI,CAAA,GAAI;QACvD,IAAI,EAAE,MAAM,GAAA,EAAK,MAAM,GAAA,EAAK,MAAM,GAAA,EAAK,MAAM,GAAA,CAAI,CAAA,GAAI;QAKrD,OAAQ,QAAQ;YACf,KAAK;YACL,KAAK;YACL,KAAK;gBAAe;oBACnB,OAAO;oBACP;gBACD;YACA,KAAK;YACL,KAAK;YACL,KAAK;gBAAgB;oBACpB,OAAO;oBACP;gBACD;QACD;QACA,OAAQ,QAAQ;YACf,KAAK;YACL,KAAK;YACL,KAAK;gBAAa;oBACjB,OAAO;oBACP;gBACD;YACA,KAAK;YACL,KAAK;YACL,KAAK;gBAAgB;oBACpB,OAAO;oBACP;gBACD;QACD;QAEA,MAAM,SAAA,CAAU,MAAM,GAAA,IAAA,CAAQ,MAAM,GAAA;QACpC,MAAM,SAAA,CAAU,MAAM,GAAA,IAAA,CAAQ,MAAM,GAAA;QAEpC,MAAM,QAAQ,SAAS;QACvB,MAAM,QAAQ,SAAS;QAOvB,IAAI,qBAAqB;YACxB,MAAM,cAAA,CAAe,MAAM,GAAA,IAAA,CAAQ,MAAM,GAAA;YACzC,MAAM,KAAK,KAAK,GAAA,CAAI,MAAM,GAAG;YAC7B,MAAM,KAAK,KAAK,GAAA,CAAI,MAAM,GAAG;YAC7B,MAAM,KAAK,KAAA,CAAM,SAAS,IAAI,IAAI,CAAA,CAAA,IAAA,CAAO,IAAI,WAAA;YAC7C,MAAM,KAAK,KAAA,CAAM,SAAS,IAAI,IAAI,CAAA,CAAA,IAAM;YACxC,MAAM,SAAS,cAAc,KAAK;YAElC,OAAQ,QAAQ;gBACf,KAAK;oBAAY;wBAChB,IAAI,OAAQ,CAAA,MAAM,MAAM;6BACnB,MAAM,MAAM;wBACjB;oBACD;gBACA,KAAK;oBAAa;wBACjB,IAAI,OAAQ,CAAA,MAAM,MAAM;6BACnB,MAAM,MAAM;wBACjB;oBACD;gBACA,KAAK;oBAAgB;wBACpB,IAAI,OAAQ,CAAA,MAAM,MAAM;6BACnB,MAAM,MAAM;wBACjB;oBACD;gBACA,KAAK;oBAAe;wBACnB,IAAI,OAAQ,CAAA,MAAM,MAAM;6BACnB,MAAM,MAAM;wBACjB;oBACD;gBACA,KAAK;gBACL,KAAK;oBAAO;wBACX,MAAM,IAAA,CAAK,MAAM,GAAA,IAAO;wBACxB,MAAM,IAAI,KAAK;wBACf,MAAM,IAAI,IAAI;wBACd,MAAM,IAAI,IAAI;wBACd;oBACD;gBACA,KAAK;gBACL,KAAK;oBAAS;wBACb,MAAM,IAAA,CAAK,MAAM,GAAA,IAAO;wBACxB,MAAM,IAAI,KAAK;wBACf,MAAM,IAAI,IAAI;wBACd,MAAM,IAAI,IAAI;wBACd;oBACD;YACD;QACD;QAEA,IAAI,OAAO;YACV,MAAM,IAAI;YACV,MAAM;YACN,MAAM;QACP;QAEA,IAAI,OAAO;YACV,MAAM,IAAI;YACV,MAAM;YACN,MAAM;QACP;QAEA,MAAM,QAAQ,IAAI,IAAI,KAAK,KAAK,KAAK,GAAA,CAAI,MAAM,GAAG,GAAG,KAAK,GAAA,CAAI,MAAM,GAAG,CAAC;QAExE,OAAO;YACN,KAAK;YACL,QAAQ,CAAA,CAAG,MAAM,KAAA,GAAQ,IAAI,KAAA,GAAA,CAAU,SAAS,IAAI,IAAI,CAAA,CAAA,CAAA,EAAK,OAAA,CAAQ,CAAC;YACtE,QAAQ,CAAA,CAAG,MAAM,MAAA,GAAS,IAAI,MAAA,GAAA,CAAW,SAAS,IAAI,IAAI,CAAA,CAAA,CAAA,EAAK,OAAA,CAAQ,CAAC;QACzE;IACD;IAEA,OAAO,KAAA,EAAuB;QAC7B,OAAO,IAAI,MAAA,CAAO,IAAA,EAAM,KAAK;IAC9B;IAEA,OAAO,OAAO,CAAA,EAAmB,CAAA,EAAmB;QACnD,OAAO,EAAE,CAAA,KAAM,EAAE,CAAA,IAAK,EAAE,CAAA,KAAM,EAAE,CAAA,IAAK,EAAE,CAAA,KAAM,EAAE,CAAA,IAAK,EAAE,CAAA,KAAM,EAAE,CAAA;IAC/D;IAEA,UAAU;QACT,IAAA,CAAK,CAAA,GAAI,KAAK,GAAA,CAAI,GAAG,IAAA,CAAK,CAAC;QAC3B,IAAA,CAAK,CAAA,GAAI,KAAK,GAAA,CAAI,GAAG,IAAA,CAAK,CAAC;QAC3B,OAAO,IAAA;IACR;IAEA,OAAO,QAAQ,KAAA,EAAuB;QACrC,OAAO,IAAI,IAAI,MAAM,CAAA,EAAG,MAAM,CAAA,EAAG,KAAK,GAAA,CAAI,GAAG,MAAM,CAAC,GAAG,KAAK,GAAA,CAAI,GAAG,MAAM,CAAC,CAAC;IAC5E;AACD;AAGO,SAAS,qBAAqB,MAAA,EAAyB;IAC7D,OAAQ,QAAQ;QACf,KAAK;YACJ,OAAO;QACR,KAAK;YACJ,OAAO;QACR,KAAK;YACJ,OAAO;QACR,KAAK;YACJ,OAAO;QACR,KAAK;YACJ,OAAO;QACR,KAAK;YACJ,OAAO;QACR;YACC,OAAO;IACT;AACD;AAGO,SAAS,qBAAqB,MAAA,EAAyB;IAC7D,OAAQ,QAAQ;QACf,KAAK;YACJ,OAAO;QACR,KAAK;YACJ,OAAO;QACR,KAAK;YACJ,OAAO;QACR,KAAK;YACJ,OAAO;QACR,KAAK;YACJ,OAAO;QACR,KAAK;YACJ,OAAO;QACR;YACC,OAAO;IACT;AACD;AAEA,MAAM,4BAA4B;IACjC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAGO,SAAS,sBAAsB,MAAA,EAAyB,QAAA,EAAmC;IAEjG,WAAW,+LAAW,MAAA;IACtB,MAAM,WAAW,KAAK,KAAA,CAAM,WAAA,qLAAY,KAAA,GAAK,CAAA,CAAE;IAE/C,MAAM,eAAe,0BAA0B,OAAA,CAAQ,MAAM;IAC7D,OAAO,yBAAA,CAAA,CAA2B,eAAe,QAAA,IAAY,0BAA0B,MAAM,CAAA;AAC9F;AAGO,SAAS,kBAAkB,SAAA,EAAiD;IAClF,OACC,cAAc,cACd,cAAc,eACd,cAAc,kBACd,cAAc;AAEhB;AAGO,MAAM,oCAAoC;IAChD,iBAAiB;IACjB,kBAAkB;IAClB,qBAAqB;IACrB,oBAAoB;IACpB,eAAe;AAChB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1383, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omar/Desktop/studio/node_modules/%40tldraw/editor/src/lib/primitives/Mat.ts"],"sourcesContent":["import { Box } from './Box'\nimport { clampRadians, HALF_PI, toDomPrecision } from './utils'\nimport { Vec, VecLike } from './Vec'\n\n/** @public */\nexport type MatLike = MatModel | Mat\n\n/** @public */\nexport interface MatModel {\n\ta: number\n\tb: number\n\tc: number\n\td: number\n\te: number\n\tf: number\n}\n\n// function getIdentity() {\n//   return new Mat(1.0, 0.0, 0.0, 1.0, 0.0, 0.0)\n// }\n\n/** @public */\nexport class Mat {\n\tconstructor(a: number, b: number, c: number, d: number, e: number, f: number) {\n\t\tthis.a = a\n\t\tthis.b = b\n\t\tthis.c = c\n\t\tthis.d = d\n\t\tthis.e = e\n\t\tthis.f = f\n\t}\n\n\ta = 1.0\n\tb = 0.0\n\tc = 0.0\n\td = 1.0\n\te = 0.0\n\tf = 0.0\n\n\tequals(m: Mat | MatModel) {\n\t\treturn (\n\t\t\tthis === m ||\n\t\t\t(this.a === m.a &&\n\t\t\t\tthis.b === m.b &&\n\t\t\t\tthis.c === m.c &&\n\t\t\t\tthis.d === m.d &&\n\t\t\t\tthis.e === m.e &&\n\t\t\t\tthis.f === m.f)\n\t\t)\n\t}\n\n\tidentity() {\n\t\tthis.a = 1.0\n\t\tthis.b = 0.0\n\t\tthis.c = 0.0\n\t\tthis.d = 1.0\n\t\tthis.e = 0.0\n\t\tthis.f = 0.0\n\t\treturn this\n\t}\n\n\tmultiply(m: Mat | MatModel) {\n\t\tconst m2: MatModel = m\n\t\tconst { a, b, c, d, e, f } = this\n\t\tthis.a = a * m2.a + c * m2.b\n\t\tthis.c = a * m2.c + c * m2.d\n\t\tthis.e = a * m2.e + c * m2.f + e\n\t\tthis.b = b * m2.a + d * m2.b\n\t\tthis.d = b * m2.c + d * m2.d\n\t\tthis.f = b * m2.e + d * m2.f + f\n\t\treturn this\n\t}\n\n\trotate(r: number, cx?: number, cy?: number) {\n\t\tif (r === 0) return this\n\t\tif (cx === undefined) return this.multiply(Mat.Rotate(r))\n\t\treturn this.translate(cx, cy!).multiply(Mat.Rotate(r)).translate(-cx, -cy!)\n\t}\n\n\ttranslate(x: number, y: number): Mat {\n\t\treturn this.multiply(Mat.Translate(x, y!))\n\t}\n\n\tscale(x: number, y: number) {\n\t\treturn this.multiply(Mat.Scale(x, y))\n\t}\n\n\tinvert() {\n\t\tconst { a, b, c, d, e, f } = this\n\t\tconst denom = a * d - b * c\n\t\tthis.a = d / denom\n\t\tthis.b = b / -denom\n\t\tthis.c = c / -denom\n\t\tthis.d = a / denom\n\t\tthis.e = (d * e - c * f) / -denom\n\t\tthis.f = (b * e - a * f) / denom\n\t\treturn this\n\t}\n\n\tapplyToPoint(point: VecLike) {\n\t\treturn Mat.applyToPoint(this, point)\n\t}\n\n\tapplyToPoints(points: VecLike[]) {\n\t\treturn Mat.applyToPoints(this, points)\n\t}\n\n\trotation() {\n\t\treturn Mat.Rotation(this)\n\t}\n\n\tpoint() {\n\t\treturn Mat.Point(this)\n\t}\n\n\tdecomposed() {\n\t\treturn Mat.Decompose(this)\n\t}\n\n\ttoCssString() {\n\t\treturn Mat.toCssString(this)\n\t}\n\n\tsetTo(model: MatModel) {\n\t\tObject.assign(this, model)\n\t\treturn this\n\t}\n\n\tdecompose() {\n\t\treturn Mat.Decompose(this)\n\t}\n\n\tclone() {\n\t\treturn new Mat(this.a, this.b, this.c, this.d, this.e, this.f)\n\t}\n\n\t/* --------------------- Static --------------------- */\n\n\tstatic Identity() {\n\t\treturn new Mat(1.0, 0.0, 0.0, 1.0, 0.0, 0.0)\n\t}\n\n\tstatic Translate(x: number, y: number) {\n\t\treturn new Mat(1.0, 0.0, 0.0, 1.0, x, y)\n\t}\n\n\tstatic Rotate(r: number, cx?: number, cy?: number) {\n\t\tif (r === 0) return Mat.Identity()\n\n\t\tconst cosAngle = Math.cos(r)\n\t\tconst sinAngle = Math.sin(r)\n\n\t\tconst rotationMatrix = new Mat(cosAngle, sinAngle, -sinAngle, cosAngle, 0.0, 0.0)\n\n\t\tif (cx === undefined) return rotationMatrix\n\n\t\treturn Mat.Compose(Mat.Translate(cx, cy!), rotationMatrix, Mat.Translate(-cx, -cy!))\n\t}\n\n\tstatic Scale(x: number, y: number): Mat\n\tstatic Scale(x: number, y: number, cx: number, cy: number): Mat\n\tstatic Scale(x: number, y: number, cx?: number, cy?: number): Mat {\n\t\tconst scaleMatrix = new Mat(x, 0, 0, y, 0, 0)\n\t\tif (cx === undefined) return scaleMatrix\n\n\t\treturn Mat.Translate(cx, cy!).multiply(scaleMatrix).translate(-cx, -cy!)\n\t}\n\tstatic Multiply(m1: MatModel, m2: MatModel): MatModel {\n\t\treturn {\n\t\t\ta: m1.a * m2.a + m1.c * m2.b,\n\t\t\tc: m1.a * m2.c + m1.c * m2.d,\n\t\t\te: m1.a * m2.e + m1.c * m2.f + m1.e,\n\t\t\tb: m1.b * m2.a + m1.d * m2.b,\n\t\t\td: m1.b * m2.c + m1.d * m2.d,\n\t\t\tf: m1.b * m2.e + m1.d * m2.f + m1.f,\n\t\t}\n\t}\n\n\tstatic Inverse(m: MatModel): MatModel {\n\t\tconst denom = m.a * m.d - m.b * m.c\n\t\treturn {\n\t\t\ta: m.d / denom,\n\t\t\tb: m.b / -denom,\n\t\t\tc: m.c / -denom,\n\t\t\td: m.a / denom,\n\t\t\te: (m.d * m.e - m.c * m.f) / -denom,\n\t\t\tf: (m.b * m.e - m.a * m.f) / denom,\n\t\t}\n\t}\n\n\tstatic Absolute(m: MatLike): MatModel {\n\t\tconst denom = m.a * m.d - m.b * m.c\n\t\treturn {\n\t\t\ta: m.d / denom,\n\t\t\tb: m.b / -denom,\n\t\t\tc: m.c / -denom,\n\t\t\td: m.a / denom,\n\t\t\te: (m.d * m.e - m.c * m.f) / denom,\n\t\t\tf: (m.b * m.e - m.a * m.f) / -denom,\n\t\t}\n\t}\n\n\tstatic Compose(...matrices: MatLike[]) {\n\t\tconst matrix = Mat.Identity()\n\t\tfor (let i = 0, n = matrices.length; i < n; i++) {\n\t\t\tmatrix.multiply(matrices[i])\n\t\t}\n\t\treturn matrix\n\t}\n\n\tstatic Point(m: MatLike) {\n\t\treturn new Vec(m.e, m.f)\n\t}\n\n\tstatic Rotation(m: MatLike): number {\n\t\tlet rotation\n\n\t\tif (m.a !== 0 || m.c !== 0) {\n\t\t\tconst hypotAc = (m.a * m.a + m.c * m.c) ** 0.5\n\t\t\trotation = Math.acos(m.a / hypotAc) * (m.c > 0 ? -1 : 1)\n\t\t} else if (m.b !== 0 || m.d !== 0) {\n\t\t\tconst hypotBd = (m.b * m.b + m.d * m.d) ** 0.5\n\t\t\trotation = HALF_PI + Math.acos(m.b / hypotBd) * (m.d > 0 ? -1 : 1)\n\t\t} else {\n\t\t\trotation = 0\n\t\t}\n\n\t\treturn clampRadians(rotation)\n\t}\n\n\tstatic Decompose(m: MatLike) {\n\t\tlet scaleX, scaleY, rotation\n\n\t\tif (m.a !== 0 || m.c !== 0) {\n\t\t\tconst hypotAc = (m.a * m.a + m.c * m.c) ** 0.5\n\t\t\tscaleX = hypotAc\n\t\t\tscaleY = (m.a * m.d - m.b * m.c) / hypotAc\n\t\t\trotation = Math.acos(m.a / hypotAc) * (m.c > 0 ? -1 : 1)\n\t\t} else if (m.b !== 0 || m.d !== 0) {\n\t\t\tconst hypotBd = (m.b * m.b + m.d * m.d) ** 0.5\n\t\t\tscaleX = (m.a * m.d - m.b * m.c) / hypotBd\n\t\t\tscaleY = hypotBd\n\t\t\trotation = HALF_PI + Math.acos(m.b / hypotBd) * (m.d > 0 ? -1 : 1)\n\t\t} else {\n\t\t\tscaleX = 0\n\t\t\tscaleY = 0\n\t\t\trotation = 0\n\t\t}\n\n\t\treturn {\n\t\t\tx: m.e,\n\t\t\ty: m.f,\n\t\t\tscaleX,\n\t\t\tscaleY,\n\t\t\trotation: clampRadians(rotation),\n\t\t}\n\t}\n\n\tstatic Smooth(m: MatLike, precision = 10000000000) {\n\t\tm.a = Math.round(m.a * precision) / precision\n\t\tm.b = Math.round(m.b * precision) / precision\n\t\tm.c = Math.round(m.c * precision) / precision\n\t\tm.d = Math.round(m.d * precision) / precision\n\t\tm.e = Math.round(m.e * precision) / precision\n\t\tm.f = Math.round(m.f * precision) / precision\n\t\treturn m\n\t}\n\n\tstatic toCssString(m: MatLike) {\n\t\treturn `matrix(${toDomPrecision(m.a)}, ${toDomPrecision(m.b)}, ${toDomPrecision(\n\t\t\tm.c\n\t\t)}, ${toDomPrecision(m.d)}, ${toDomPrecision(m.e)}, ${toDomPrecision(m.f)})`\n\t}\n\n\tstatic applyToPoint(m: MatLike, point: VecLike) {\n\t\treturn new Vec(\n\t\t\tm.a * point.x + m.c * point.y + m.e,\n\t\t\tm.b * point.x + m.d * point.y + m.f,\n\t\t\tpoint.z\n\t\t)\n\t}\n\n\tstatic applyToXY(m: MatLike, x: number, y: number) {\n\t\treturn [m.a * x + m.c * y + m.e, m.b * x + m.d * y + m.f]\n\t}\n\n\tstatic applyToPoints(m: MatLike, points: VecLike[]): Vec[] {\n\t\treturn points.map(\n\t\t\t(point) =>\n\t\t\t\tnew Vec(m.a * point.x + m.c * point.y + m.e, m.b * point.x + m.d * point.y + m.f, point.z)\n\t\t)\n\t}\n\n\tstatic applyToBounds(m: MatLike, box: Box) {\n\t\treturn new Box(m.e + box.minX, m.f + box.minY, box.width, box.height)\n\t}\n\n\tstatic From(m: MatLike) {\n\t\treturn new Mat(m.a, m.b, m.c, m.d, m.e, m.f)\n\t}\n\n\tstatic Cast(m: MatLike) {\n\t\treturn m instanceof Mat ? m : Mat.From(m)\n\t}\n}\n\n/** @public */\nexport function decomposeMatrix(m: MatLike) {\n\treturn {\n\t\tx: m.e,\n\t\ty: m.f,\n\t\tscaleX: Math.sqrt(m.a * m.a + m.b * m.b),\n\t\tscaleY: Math.sqrt(m.c * m.c + m.d * m.d),\n\t\trotation: Math.atan2(m.b, m.a),\n\t}\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1631, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omar/Desktop/studio/node_modules/%40tldraw/editor/src/lib/primitives/intersect.ts"],"sourcesContent":["import { Box } from './Box'\nimport { approximately, approximatelyLte, pointInPolygon } from './utils'\nimport { Vec, VecLike } from './Vec'\n\n// need even more intersections? See https://gist.github.com/steveruizok/35c02d526c707003a5c79761bfb89a52\n\n/**\n * Find the intersection between a line segment and a line segment.\n *\n * @param a1 - The first segment's first point.\n * @param a2 - The first segment's second point.\n * @param b1 - The second segment's first point.\n * @param b2 - The second segment's second point.\n * @public\n */\nexport function intersectLineSegmentLineSegment(\n\ta1: VecLike,\n\ta2: VecLike,\n\tb1: VecLike,\n\tb2: VecLike,\n\tprecision = 1e-10\n) {\n\tconst ABx = a1.x - b1.x\n\tconst ABy = a1.y - b1.y\n\tconst BVx = b2.x - b1.x\n\tconst BVy = b2.y - b1.y\n\tconst AVx = a2.x - a1.x\n\tconst AVy = a2.y - a1.y\n\tconst ua_t = BVx * ABy - BVy * ABx\n\tconst ub_t = AVx * ABy - AVy * ABx\n\tconst u_b = BVy * AVx - BVx * AVy\n\n\tif (approximately(ua_t, 0, precision) || approximately(ub_t, 0, precision)) return null // coincident\n\n\tif (approximately(u_b, 0, precision)) return null // parallel\n\n\tif (u_b !== 0) {\n\t\tconst ua = ua_t / u_b\n\t\tconst ub = ub_t / u_b\n\t\tif (\n\t\t\tapproximatelyLte(0, ua, precision) &&\n\t\t\tapproximatelyLte(ua, 1, precision) &&\n\t\t\tapproximatelyLte(0, ub, precision) &&\n\t\t\tapproximatelyLte(ub, 1, precision)\n\t\t) {\n\t\t\treturn Vec.AddXY(a1, ua * AVx, ua * AVy)\n\t\t}\n\t}\n\n\treturn null // no intersection\n}\n\n/**\n * Find the intersections between a line segment and a circle.\n *\n * @param a1 - The segment's first point.\n * @param a2 - The segment's second point.\n * @param c - The circle's center.\n * @param r - The circle's radius.\n * @public\n */\nexport function intersectLineSegmentCircle(a1: VecLike, a2: VecLike, c: VecLike, r: number) {\n\tconst a = (a2.x - a1.x) * (a2.x - a1.x) + (a2.y - a1.y) * (a2.y - a1.y)\n\tconst b = 2 * ((a2.x - a1.x) * (a1.x - c.x) + (a2.y - a1.y) * (a1.y - c.y))\n\tconst cc =\n\t\tc.x * c.x + c.y * c.y + a1.x * a1.x + a1.y * a1.y - 2 * (c.x * a1.x + c.y * a1.y) - r * r\n\tconst deter = b * b - 4 * a * cc\n\n\tif (deter < 0) return null // outside\n\tif (deter === 0) return null // tangent\n\n\tconst e = Math.sqrt(deter)\n\tconst u1 = (-b + e) / (2 * a)\n\tconst u2 = (-b - e) / (2 * a)\n\n\tif ((u1 < 0 || u1 > 1) && (u2 < 0 || u2 > 1)) {\n\t\treturn null // outside or inside\n\t\t// if ((u1 < 0 && u2 < 0) || (u1 > 1 && u2 > 1)) {\n\t\t// \treturn null // outside\n\t\t// } else return null // inside'\n\t}\n\n\tconst result: VecLike[] = []\n\n\tif (0 <= u1 && u1 <= 1) result.push(Vec.Lrp(a1, a2, u1))\n\tif (0 <= u2 && u2 <= 1) result.push(Vec.Lrp(a1, a2, u2))\n\n\tif (result.length === 0) return null // no intersection\n\n\treturn result\n}\n\n/**\n * Find the intersections between a line segment and a polyline.\n *\n * @param a1 - The segment's first point.\n * @param a2 - The segment's second point.\n * @param points - The points in the polyline.\n * @public\n */\nexport function intersectLineSegmentPolyline(a1: VecLike, a2: VecLike, points: VecLike[]) {\n\tconst result: VecLike[] = []\n\tlet segmentIntersection: VecLike | null\n\n\tfor (let i = 0, n = points.length - 1; i < n; i++) {\n\t\tsegmentIntersection = intersectLineSegmentLineSegment(a1, a2, points[i], points[i + 1])\n\t\tif (segmentIntersection) result.push(segmentIntersection)\n\t}\n\n\tif (result.length === 0) return null // no intersection\n\n\treturn result\n}\n\n/**\n * Find the intersections between a line segment and a closed polygon.\n *\n * @param a1 - The segment's first point.\n * @param a2 - The segment's second point.\n * @param points - The points in the polygon.\n * @public\n */\nexport function intersectLineSegmentPolygon(a1: VecLike, a2: VecLike, points: VecLike[]) {\n\tconst result: VecLike[] = []\n\tlet segmentIntersection: VecLike | null\n\n\tfor (let i = 1, n = points.length; i < n + 1; i++) {\n\t\tsegmentIntersection = intersectLineSegmentLineSegment(\n\t\t\ta1,\n\t\t\ta2,\n\t\t\tpoints[i - 1],\n\t\t\tpoints[i % points.length]\n\t\t)\n\n\t\tif (segmentIntersection) result.push(segmentIntersection)\n\t}\n\n\tif (result.length === 0) return null // no intersection\n\n\treturn result\n}\n\n/**\n * Find the intersections between a circle and a circle.\n *\n * @param c1 - The first circle's center.\n * @param r1 - The first circle's radius.\n * @param c2 - The second circle's center.\n * @param r2 - The second circle's radius.\n * @public\n */\nexport function intersectCircleCircle(c1: VecLike, r1: number, c2: VecLike, r2: number) {\n\tlet dx = c2.x - c1.x\n\tlet dy = c2.y - c1.y\n\tconst d = Math.sqrt(dx * dx + dy * dy),\n\t\tx = (d * d - r2 * r2 + r1 * r1) / (2 * d),\n\t\ty = Math.sqrt(r1 * r1 - x * x)\n\tdx /= d\n\tdy /= d\n\treturn [\n\t\tnew Vec(c1.x + dx * x - dy * y, c1.y + dy * x + dx * y),\n\t\tnew Vec(c1.x + dx * x + dy * y, c1.y + dy * x - dx * y),\n\t]\n}\n\n/**\n * Find the intersections between a circle and a bounding box.\n *\n * @param c - The circle's center.\n * @param r - The circle's radius.\n * @param points - The points in the polygon.\n * @public\n */\nexport function intersectCirclePolygon(c: VecLike, r: number, points: VecLike[]) {\n\tconst result: VecLike[] = []\n\tlet a: VecLike, b: VecLike, int: VecLike[] | null\n\n\tfor (let i = 0, n = points.length; i < n; i++) {\n\t\ta = points[i]\n\t\tb = points[(i + 1) % points.length]\n\t\tint = intersectLineSegmentCircle(a, b, c, r)\n\t\tif (int) result.push(...int)\n\t}\n\n\tif (result.length === 0) return null // no intersection\n\n\treturn result\n}\n\n/**\n * Find the intersections between a circle and a bounding box.\n *\n * @param c - The circle's center.\n * @param r - The circle's radius.\n * @param points - The points in the polyline.\n * @public\n */\nexport function intersectCirclePolyline(c: VecLike, r: number, points: VecLike[]) {\n\tconst result: VecLike[] = []\n\tlet a: VecLike, b: VecLike, int: VecLike[] | null\n\n\tfor (let i = 1, n = points.length; i < n; i++) {\n\t\ta = points[i - 1]\n\t\tb = points[i]\n\t\tint = intersectLineSegmentCircle(a, b, c, r)\n\t\tif (int) result.push(...int)\n\t}\n\n\tif (result.length === 0) return null // no intersection\n\n\treturn result\n}\n\n/**\n * Find the intersections between a polygon and a bounding box.\n *\n * @public\n */\nexport function intersectPolygonBounds(points: VecLike[], bounds: Box) {\n\tconst result: VecLike[] = []\n\tlet segmentIntersection: VecLike[] | null\n\n\tfor (const side of bounds.sides) {\n\t\tsegmentIntersection = intersectLineSegmentPolygon(side[0], side[1], points)\n\t\tif (segmentIntersection) result.push(...segmentIntersection)\n\t}\n\n\tif (result.length === 0) return null // no intersection\n\n\treturn result\n}\n\nfunction ccw(A: VecLike, B: VecLike, C: VecLike) {\n\treturn (C.y - A.y) * (B.x - A.x) > (B.y - A.y) * (C.x - A.x)\n}\n\n/** @public */\nexport function linesIntersect(A: VecLike, B: VecLike, C: VecLike, D: VecLike) {\n\treturn ccw(A, C, D) !== ccw(B, C, D) && ccw(A, B, C) !== ccw(A, B, D)\n}\n\n/**\n * Create a new convex polygon as the intersection of two convex polygons.\n *\n * @param polygonA - An array of points representing the first polygon.\n * @param polygonB - An array of points representing the second polygon.\n * @public\n */\nexport function intersectPolygonPolygon(\n\tpolygonA: VecLike[],\n\tpolygonB: VecLike[]\n): VecLike[] | null {\n\t// Create an empty polygon as result\n\tconst result: Map<string, VecLike> = new Map()\n\tlet a: VecLike, b: VecLike, c: VecLike, d: VecLike\n\n\t// Add all corners of PolygonA that is inside PolygonB to result\n\tfor (let i = 0, n = polygonA.length; i < n; i++) {\n\t\ta = polygonA[i]\n\t\tif (pointInPolygon(a, polygonB)) {\n\t\t\tconst id = getPointId(a)\n\t\t\tif (!result.has(id)) {\n\t\t\t\tresult.set(id, a)\n\t\t\t}\n\t\t}\n\t}\n\t// Add all corners of PolygonB that is inside PolygonA to result\n\tfor (let i = 0, n = polygonB.length; i < n; i++) {\n\t\ta = polygonB[i]\n\t\tif (pointInPolygon(a, polygonA)) {\n\t\t\tconst id = getPointId(a)\n\t\t\tif (!result.has(id)) {\n\t\t\t\tresult.set(id, a)\n\t\t\t}\n\t\t}\n\t}\n\n\t// Add all intersection points to result\n\tfor (let i = 0, n = polygonA.length; i < n; i++) {\n\t\ta = polygonA[i]\n\t\tb = polygonA[(i + 1) % polygonA.length]\n\n\t\tfor (let j = 0, m = polygonB.length; j < m; j++) {\n\t\t\tc = polygonB[j]\n\t\t\td = polygonB[(j + 1) % polygonB.length]\n\t\t\tconst intersection = intersectLineSegmentLineSegment(a, b, c, d)\n\n\t\t\tif (intersection !== null) {\n\t\t\t\tconst id = getPointId(intersection)\n\t\t\t\tif (!result.has(id)) {\n\t\t\t\t\tresult.set(id, intersection)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif (result.size === 0) return null // no intersection\n\n\t// Order all points in the result counter-clockwise.\n\treturn orderClockwise([...result.values()])\n}\n\n/**\n * Find all the points where `polyA` and `polyB` intersect and returns them in an undefined order.\n * To find the polygon that's the intersection of polyA and polyB, use `intersectPolygonPolygon`\n * instead, which orders the points and includes internal points.\n *\n * @param polyA - The first polygon.\n * @param polyB - The second polygon.\n * @param isAClosed - Whether `polyA` is a closed polygon or a polyline.\n * @param isBClosed - Whether `polyB` is a closed polygon or a polyline.\n * @public\n */\nexport function intersectPolys(\n\tpolyA: VecLike[],\n\tpolyB: VecLike[],\n\tisAClosed: boolean,\n\tisBClosed: boolean\n): VecLike[] {\n\tconst result: Map<string, VecLike> = new Map()\n\n\t// Add all intersection points to result\n\tfor (let i = 0, n = isAClosed ? polyA.length : polyA.length - 1; i < n; i++) {\n\t\tconst currentA = polyA[i]\n\t\tconst nextA = polyA[(i + 1) % polyA.length]\n\n\t\tfor (let j = 0, m = isBClosed ? polyB.length : polyB.length - 1; j < m; j++) {\n\t\t\tconst currentB = polyB[j]\n\t\t\tconst nextB = polyB[(j + 1) % polyB.length]\n\t\t\tconst intersection = intersectLineSegmentLineSegment(currentA, nextA, currentB, nextB)\n\n\t\t\tif (intersection !== null) {\n\t\t\t\tconst id = getPointId(intersection)\n\t\t\t\tif (!result.has(id)) {\n\t\t\t\t\tresult.set(id, intersection)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn [...result.values()]\n}\n\nfunction getPointId(point: VecLike) {\n\treturn `${point.x},${point.y}`\n}\n\nfunction orderClockwise(points: VecLike[]): VecLike[] {\n\tconst C = Vec.Average(points)\n\treturn points.sort((A, B) => Vec.Angle(C, A) - Vec.Angle(C, B))\n}\n\n/** @public */\nexport function polygonsIntersect(a: VecLike[], b: VecLike[]) {\n\tlet a0: VecLike, a1: VecLike, b0: VecLike, b1: VecLike\n\tfor (let i = 0, n = a.length; i < n; i++) {\n\t\ta0 = a[i]\n\t\ta1 = a[(i + 1) % n]\n\t\tfor (let j = 0, m = b.length; j < m; j++) {\n\t\t\tb0 = b[j]\n\t\t\tb1 = b[(j + 1) % m]\n\t\t\tif (linesIntersect(a0, a1, b0, b1)) return true\n\t\t}\n\t}\n\treturn false\n}\n\n/** @public */\nexport function polygonIntersectsPolyline(polygon: VecLike[], polyline: VecLike[]) {\n\tlet a: VecLike, b: VecLike, c: VecLike, d: VecLike\n\tfor (let i = 0, n = polygon.length; i < n; i++) {\n\t\ta = polygon[i]\n\t\tb = polygon[(i + 1) % n]\n\n\t\tfor (let j = 1, m = polyline.length; j < m; j++) {\n\t\t\tc = polyline[j - 1]\n\t\t\td = polyline[j]\n\t\t\tif (linesIntersect(a, b, c, d)) return true\n\t\t}\n\t}\n\treturn false\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1864, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omar/Desktop/studio/node_modules/%40tldraw/editor/src/lib/primitives/geometry/Geometry2d.ts"],"sourcesContent":["import { assert, invLerp } from '@tldraw/utils'\nimport { Box } from '../Box'\nimport { Mat, MatModel } from '../Mat'\nimport { Vec, VecLike } from '../Vec'\nimport {\n\tintersectCirclePolygon,\n\tintersectCirclePolyline,\n\tintersectLineSegmentPolygon,\n\tintersectLineSegmentPolyline,\n\tintersectPolys,\n\tlinesIntersect,\n} from '../intersect'\nimport { approximately, pointInPolygon } from '../utils'\n\n/**\n * Filter geometry within a group.\n *\n * Filters are ignored when called directly on primitive geometries, but can be used to narrow down\n * the results of an operation on `Group2d` geometries.\n *\n * @public\n */\nexport interface Geometry2dFilters {\n\treadonly includeLabels?: boolean\n\treadonly includeInternal?: boolean\n}\n\n/** @public */\nexport const Geometry2dFilters: {\n\tEXCLUDE_NON_STANDARD: Geometry2dFilters\n\tINCLUDE_ALL: Geometry2dFilters\n\tEXCLUDE_LABELS: Geometry2dFilters\n\tEXCLUDE_INTERNAL: Geometry2dFilters\n} = {\n\tEXCLUDE_NON_STANDARD: {\n\t\tincludeLabels: false,\n\t\tincludeInternal: false,\n\t},\n\tINCLUDE_ALL: { includeLabels: true, includeInternal: true },\n\tEXCLUDE_LABELS: { includeLabels: false, includeInternal: true },\n\tEXCLUDE_INTERNAL: { includeLabels: true, includeInternal: false },\n}\n\n/** @public */\nexport interface TransformedGeometry2dOptions {\n\tisLabel?: boolean\n\tisEmptyLabel?: boolean\n\tisInternal?: boolean\n\tdebugColor?: string\n\tignore?: boolean\n}\n\n/** @public */\nexport interface Geometry2dOptions extends TransformedGeometry2dOptions {\n\tisFilled: boolean\n\tisClosed: boolean\n}\n\n/** @public */\nexport abstract class Geometry2d {\n\t// todo: consider making accessors for these too, so that they can be overridden in subclasses by geometries with more complex logic\n\tisFilled = false\n\tisClosed = true\n\tisLabel = false\n\tisEmptyLabel = false\n\tisInternal = false\n\tdebugColor?: string\n\tignore?: boolean\n\n\tconstructor(opts: Geometry2dOptions) {\n\t\tconst { isLabel = false, isEmptyLabel = false, isInternal = false } = opts\n\t\tthis.isFilled = opts.isFilled\n\t\tthis.isClosed = opts.isClosed\n\t\tthis.debugColor = opts.debugColor\n\t\tthis.ignore = opts.ignore\n\t\tthis.isLabel = isLabel\n\t\tthis.isEmptyLabel = isEmptyLabel\n\t\tthis.isInternal = isInternal\n\t}\n\n\tisExcludedByFilter(filters?: Geometry2dFilters) {\n\t\tif (!filters) return false\n\t\tif (this.isLabel && !filters.includeLabels) return true\n\t\tif (this.isInternal && !filters.includeInternal) return true\n\t\treturn false\n\t}\n\n\tabstract getVertices(filters: Geometry2dFilters): Vec[]\n\n\tabstract nearestPoint(point: VecLike, _filters?: Geometry2dFilters): Vec\n\n\thitTestPoint(point: VecLike, margin = 0, hitInside = false, _filters?: Geometry2dFilters) {\n\t\t// First check whether the point is inside\n\t\tif (this.isClosed && (this.isFilled || hitInside) && pointInPolygon(point, this.vertices)) {\n\t\t\treturn true\n\t\t}\n\t\t// Then check whether the distance is within the margin\n\t\treturn Vec.Dist2(point, this.nearestPoint(point)) <= margin * margin\n\t}\n\n\tdistanceToPoint(point: VecLike, hitInside = false, filters?: Geometry2dFilters) {\n\t\treturn (\n\t\t\tVec.Dist(point, this.nearestPoint(point, filters)) *\n\t\t\t(this.isClosed && (this.isFilled || hitInside) && pointInPolygon(point, this.vertices)\n\t\t\t\t? -1\n\t\t\t\t: 1)\n\t\t)\n\t}\n\n\tdistanceToLineSegment(A: VecLike, B: VecLike, filters?: Geometry2dFilters) {\n\t\tif (Vec.Equals(A, B)) return this.distanceToPoint(A, false, filters)\n\t\tconst { vertices } = this\n\t\tlet nearest: Vec | undefined\n\t\tlet dist = Infinity\n\t\tlet d: number, p: Vec, q: Vec\n\t\tconst nextLimit = this.isClosed ? vertices.length : vertices.length - 1\n\t\tfor (let i = 0; i < vertices.length; i++) {\n\t\t\tp = vertices[i]\n\t\t\tif (i < nextLimit) {\n\t\t\t\tconst next = vertices[(i + 1) % vertices.length]\n\t\t\t\tif (linesIntersect(A, B, p, next)) return 0\n\t\t\t}\n\t\t\tq = Vec.NearestPointOnLineSegment(A, B, p, true)\n\t\t\td = Vec.Dist2(p, q)\n\t\t\tif (d < dist) {\n\t\t\t\tdist = d\n\t\t\t\tnearest = q\n\t\t\t}\n\t\t}\n\t\tif (!nearest) throw Error('nearest point not found')\n\t\treturn this.isClosed && this.isFilled && pointInPolygon(nearest, this.vertices) ? -dist : dist\n\t}\n\n\thitTestLineSegment(A: VecLike, B: VecLike, distance = 0, filters?: Geometry2dFilters): boolean {\n\t\treturn this.distanceToLineSegment(A, B, filters) <= distance\n\t}\n\n\tintersectLineSegment(A: VecLike, B: VecLike, _filters?: Geometry2dFilters): VecLike[] {\n\t\tconst intersections = this.isClosed\n\t\t\t? intersectLineSegmentPolygon(A, B, this.vertices)\n\t\t\t: intersectLineSegmentPolyline(A, B, this.vertices)\n\n\t\treturn intersections ?? []\n\t}\n\n\tintersectCircle(center: VecLike, radius: number, _filters?: Geometry2dFilters): VecLike[] {\n\t\tconst intersections = this.isClosed\n\t\t\t? intersectCirclePolygon(center, radius, this.vertices)\n\t\t\t: intersectCirclePolyline(center, radius, this.vertices)\n\n\t\treturn intersections ?? []\n\t}\n\n\tintersectPolygon(polygon: VecLike[], _filters?: Geometry2dFilters): VecLike[] {\n\t\treturn intersectPolys(polygon, this.vertices, true, this.isClosed)\n\t}\n\n\tintersectPolyline(polyline: VecLike[], _filters?: Geometry2dFilters): VecLike[] {\n\t\treturn intersectPolys(polyline, this.vertices, false, this.isClosed)\n\t}\n\n\t/**\n\t * Find a point along the edge of the geometry that is a fraction `t` along the entire way round.\n\t */\n\tinterpolateAlongEdge(t: number, _filters?: Geometry2dFilters): Vec {\n\t\tconst { vertices } = this\n\n\t\tif (t <= 0) return vertices[0]\n\n\t\tconst distanceToTravel = t * this.length\n\t\tlet distanceTraveled = 0\n\n\t\tfor (let i = 0; i < (this.isClosed ? vertices.length : vertices.length - 1); i++) {\n\t\t\tconst curr = vertices[i]\n\t\t\tconst next = vertices[(i + 1) % vertices.length]\n\t\t\tconst dist = Vec.Dist(curr, next)\n\t\t\tconst newDistanceTraveled = distanceTraveled + dist\n\t\t\tif (newDistanceTraveled >= distanceToTravel) {\n\t\t\t\tconst p = Vec.Lrp(\n\t\t\t\t\tcurr,\n\t\t\t\t\tnext,\n\t\t\t\t\tinvLerp(distanceTraveled, newDistanceTraveled, distanceToTravel)\n\t\t\t\t)\n\t\t\t\treturn p\n\t\t\t}\n\t\t\tdistanceTraveled = newDistanceTraveled\n\t\t}\n\n\t\treturn this.isClosed ? vertices[0] : vertices[vertices.length - 1]\n\t}\n\n\t/**\n\t * Take `point`, find the closest point to it on the edge of the geometry, and return how far\n\t * along the edge it is as a fraction of the total length.\n\t */\n\tuninterpolateAlongEdge(point: VecLike, _filters?: Geometry2dFilters): number {\n\t\tconst { vertices, length } = this\n\t\tlet closestSegment = null\n\t\tlet closestDistance = Infinity\n\t\tlet distanceTraveled = 0\n\n\t\tfor (let i = 0; i < (this.isClosed ? vertices.length : vertices.length - 1); i++) {\n\t\t\tconst curr = vertices[i]\n\t\t\tconst next = vertices[(i + 1) % vertices.length]\n\n\t\t\tconst nearestPoint = Vec.NearestPointOnLineSegment(curr, next, point, true)\n\t\t\tconst distance = Vec.Dist(nearestPoint, point)\n\n\t\t\tif (distance < closestDistance) {\n\t\t\t\tclosestDistance = distance\n\t\t\t\tclosestSegment = {\n\t\t\t\t\tstart: curr,\n\t\t\t\t\tend: next,\n\t\t\t\t\tnearestPoint,\n\t\t\t\t\tdistanceToStart: distanceTraveled,\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdistanceTraveled += Vec.Dist(curr, next)\n\t\t}\n\n\t\tassert(closestSegment)\n\n\t\tconst distanceAlongRoute =\n\t\t\tclosestSegment.distanceToStart + Vec.Dist(closestSegment.start, closestSegment.nearestPoint)\n\n\t\treturn distanceAlongRoute / length\n\t}\n\n\t/** @deprecated Iterate the vertices instead. */\n\tnearestPointOnLineSegment(A: VecLike, B: VecLike): Vec {\n\t\tconst { vertices } = this\n\t\tlet nearest: Vec | undefined\n\t\tlet dist = Infinity\n\t\tlet d: number, p: Vec, q: Vec\n\t\tfor (let i = 0; i < vertices.length; i++) {\n\t\t\tp = vertices[i]\n\t\t\tq = Vec.NearestPointOnLineSegment(A, B, p, true)\n\t\t\td = Vec.Dist2(p, q)\n\t\t\tif (d < dist) {\n\t\t\t\tdist = d\n\t\t\t\tnearest = q\n\t\t\t}\n\t\t}\n\t\tif (!nearest) throw Error('nearest point not found')\n\t\treturn nearest\n\t}\n\n\tisPointInBounds(point: VecLike, margin = 0) {\n\t\tconst { bounds } = this\n\t\treturn !(\n\t\t\tpoint.x < bounds.minX - margin ||\n\t\t\tpoint.y < bounds.minY - margin ||\n\t\t\tpoint.x > bounds.maxX + margin ||\n\t\t\tpoint.y > bounds.maxY + margin\n\t\t)\n\t}\n\n\ttransform(transform: MatModel, opts?: TransformedGeometry2dOptions): Geometry2d {\n\t\treturn new TransformedGeometry2d(this, transform, opts)\n\t}\n\n\tprivate _vertices: Vec[] | undefined\n\n\t// eslint-disable-next-line no-restricted-syntax\n\tget vertices(): Vec[] {\n\t\tif (!this._vertices) {\n\t\t\tthis._vertices = this.getVertices(Geometry2dFilters.EXCLUDE_LABELS)\n\t\t}\n\n\t\treturn this._vertices\n\t}\n\n\tgetBounds() {\n\t\treturn Box.FromPoints(this.vertices)\n\t}\n\n\tprivate _bounds: Box | undefined\n\n\t// eslint-disable-next-line no-restricted-syntax\n\tget bounds(): Box {\n\t\tif (!this._bounds) {\n\t\t\tthis._bounds = this.getBounds()\n\t\t}\n\t\treturn this._bounds\n\t}\n\n\t// eslint-disable-next-line no-restricted-syntax\n\tget center() {\n\t\treturn this.bounds.center\n\t}\n\n\tprivate _area: number | undefined\n\n\t// eslint-disable-next-line no-restricted-syntax\n\tget area() {\n\t\tif (!this._area) {\n\t\t\tthis._area = this.getArea()\n\t\t}\n\t\treturn this._area\n\t}\n\n\tgetArea() {\n\t\tif (!this.isClosed) {\n\t\t\treturn 0\n\t\t}\n\t\tconst { vertices } = this\n\t\tlet area = 0\n\t\tfor (let i = 0, n = vertices.length; i < n; i++) {\n\t\t\tconst curr = vertices[i]\n\t\t\tconst next = vertices[(i + 1) % n]\n\t\t\tarea += curr.x * next.y - next.x * curr.y\n\t\t}\n\t\treturn area / 2\n\t}\n\n\ttoSimpleSvgPath() {\n\t\tlet path = ''\n\n\t\tconst { vertices } = this\n\t\tconst n = vertices.length\n\n\t\tif (n === 0) return path\n\n\t\tpath += `M${vertices[0].x},${vertices[0].y}`\n\n\t\tfor (let i = 1; i < n; i++) {\n\t\t\tpath += `L${vertices[i].x},${vertices[i].y}`\n\t\t}\n\n\t\tif (this.isClosed) {\n\t\t\tpath += 'Z'\n\t\t}\n\n\t\treturn path\n\t}\n\n\tprivate _length?: number\n\n\t// eslint-disable-next-line no-restricted-syntax\n\tget length() {\n\t\tif (this._length) return this._length\n\t\tthis._length = this.getLength(Geometry2dFilters.EXCLUDE_LABELS)\n\t\treturn this._length\n\t}\n\n\tgetLength(_filters?: Geometry2dFilters) {\n\t\tconst vertices = this.getVertices(_filters ?? Geometry2dFilters.EXCLUDE_LABELS)\n\t\tif (vertices.length === 0) return 0\n\t\tlet prev = vertices[0]\n\t\tlet length = 0\n\t\tfor (let i = 1; i < vertices.length; i++) {\n\t\t\tconst next = vertices[i]\n\t\t\tlength += Vec.Dist(prev, next)\n\t\t\tprev = next\n\t\t}\n\t\tif (this.isClosed) {\n\t\t\tlength += Vec.Dist(vertices[vertices.length - 1], vertices[0])\n\t\t}\n\t\treturn length\n\t}\n\n\tabstract getSvgPathData(first: boolean): string\n}\n\n// =================================================================================================\n// Because Geometry2d.transform depends on TransformedGeometry2d, we need to define it here instead\n// of in its own files. This prevents a circular import error.\n// =================================================================================================\n\n/** @public */\nexport class TransformedGeometry2d extends Geometry2d {\n\tprivate readonly inverse: MatModel\n\tprivate readonly decomposed\n\n\tconstructor(\n\t\tprivate readonly geometry: Geometry2d,\n\t\tprivate readonly matrix: MatModel,\n\t\topts?: TransformedGeometry2dOptions\n\t) {\n\t\tsuper(geometry)\n\t\tthis.inverse = Mat.Inverse(matrix)\n\t\tthis.decomposed = Mat.Decompose(matrix)\n\n\t\tif (opts) {\n\t\t\tif (opts.isLabel != null) this.isLabel = opts.isLabel\n\t\t\tif (opts.isInternal != null) this.isInternal = opts.isInternal\n\t\t\tif (opts.debugColor != null) this.debugColor = opts.debugColor\n\t\t\tif (opts.ignore != null) this.ignore = opts.ignore\n\t\t}\n\n\t\tassert(\n\t\t\tapproximately(this.decomposed.scaleX, this.decomposed.scaleY),\n\t\t\t'non-uniform scaling is not yet supported'\n\t\t)\n\t}\n\n\tgetVertices(filters: Geometry2dFilters): Vec[] {\n\t\treturn this.geometry.getVertices(filters).map((v) => Mat.applyToPoint(this.matrix, v))\n\t}\n\n\tnearestPoint(point: VecLike, filters?: Geometry2dFilters): Vec {\n\t\treturn Mat.applyToPoint(\n\t\t\tthis.matrix,\n\t\t\tthis.geometry.nearestPoint(Mat.applyToPoint(this.inverse, point), filters)\n\t\t)\n\t}\n\n\toverride hitTestPoint(\n\t\tpoint: VecLike,\n\t\tmargin = 0,\n\t\thitInside?: boolean,\n\t\tfilters?: Geometry2dFilters\n\t): boolean {\n\t\treturn this.geometry.hitTestPoint(\n\t\t\tMat.applyToPoint(this.inverse, point),\n\t\t\tmargin / this.decomposed.scaleX,\n\t\t\thitInside,\n\t\t\tfilters\n\t\t)\n\t}\n\n\toverride distanceToPoint(point: VecLike, hitInside = false, filters?: Geometry2dFilters) {\n\t\treturn (\n\t\t\tthis.geometry.distanceToPoint(Mat.applyToPoint(this.inverse, point), hitInside, filters) *\n\t\t\tthis.decomposed.scaleX\n\t\t)\n\t}\n\n\toverride distanceToLineSegment(A: VecLike, B: VecLike, filters?: Geometry2dFilters) {\n\t\treturn (\n\t\t\tthis.geometry.distanceToLineSegment(\n\t\t\t\tMat.applyToPoint(this.inverse, A),\n\t\t\t\tMat.applyToPoint(this.inverse, B),\n\t\t\t\tfilters\n\t\t\t) * this.decomposed.scaleX\n\t\t)\n\t}\n\n\toverride hitTestLineSegment(\n\t\tA: VecLike,\n\t\tB: VecLike,\n\t\tdistance = 0,\n\t\tfilters?: Geometry2dFilters\n\t): boolean {\n\t\treturn this.geometry.hitTestLineSegment(\n\t\t\tMat.applyToPoint(this.inverse, A),\n\t\t\tMat.applyToPoint(this.inverse, B),\n\t\t\tdistance / this.decomposed.scaleX,\n\t\t\tfilters\n\t\t)\n\t}\n\n\toverride intersectLineSegment(A: VecLike, B: VecLike, filters?: Geometry2dFilters) {\n\t\treturn Mat.applyToPoints(\n\t\t\tthis.matrix,\n\t\t\tthis.geometry.intersectLineSegment(\n\t\t\t\tMat.applyToPoint(this.inverse, A),\n\t\t\t\tMat.applyToPoint(this.inverse, B),\n\t\t\t\tfilters\n\t\t\t)\n\t\t)\n\t}\n\n\toverride intersectCircle(center: VecLike, radius: number, filters?: Geometry2dFilters) {\n\t\treturn Mat.applyToPoints(\n\t\t\tthis.matrix,\n\t\t\tthis.geometry.intersectCircle(\n\t\t\t\tMat.applyToPoint(this.inverse, center),\n\t\t\t\tradius / this.decomposed.scaleX,\n\t\t\t\tfilters\n\t\t\t)\n\t\t)\n\t}\n\n\toverride intersectPolygon(polygon: VecLike[], filters?: Geometry2dFilters): VecLike[] {\n\t\treturn Mat.applyToPoints(\n\t\t\tthis.matrix,\n\t\t\tthis.geometry.intersectPolygon(Mat.applyToPoints(this.inverse, polygon), filters)\n\t\t)\n\t}\n\n\toverride intersectPolyline(polyline: VecLike[], filters?: Geometry2dFilters): VecLike[] {\n\t\treturn Mat.applyToPoints(\n\t\t\tthis.matrix,\n\t\t\tthis.geometry.intersectPolyline(Mat.applyToPoints(this.inverse, polyline), filters)\n\t\t)\n\t}\n\n\toverride transform(transform: MatModel, opts?: TransformedGeometry2dOptions): Geometry2d {\n\t\treturn new TransformedGeometry2d(this.geometry, Mat.Multiply(transform, this.matrix), {\n\t\t\tisLabel: opts?.isLabel ?? this.isLabel,\n\t\t\tisInternal: opts?.isInternal ?? this.isInternal,\n\t\t\tdebugColor: opts?.debugColor ?? this.debugColor,\n\t\t\tignore: opts?.ignore ?? this.ignore,\n\t\t})\n\t}\n\n\tgetSvgPathData(): string {\n\t\tthrow new Error('Cannot get SVG path data for transformed geometry.')\n\t}\n}\n"],"names":[],"mappings":";;;;;AAAA,SAAS,QAAQ,eAAe;;;AAChC,SAAS,WAAW;AACpB,SAAS,WAAqB;AAC9B,SAAS,WAAoB;AAC7B;AAQA,SAAS,eAAe,sBAAsB;;;;;;;AAgBvC,MAAM,oBAKT;IACH,sBAAsB;QACrB,eAAe;QACf,iBAAiB;IAClB;IACA,aAAa;QAAE,eAAe;QAAM,iBAAiB;IAAK;IAC1D,gBAAgB;QAAE,eAAe;QAAO,iBAAiB;IAAK;IAC9D,kBAAkB;QAAE,eAAe;QAAM,iBAAiB;IAAM;AACjE;AAkBO,MAAe,WAAW;IAAA,oIAAA;IAEhC,WAAW,MAAA;IACX,WAAW,KAAA;IACX,UAAU,MAAA;IACV,eAAe,MAAA;IACf,aAAa,MAAA;IACb,WAAA;IACA,OAAA;IAEA,YAAY,IAAA,CAAyB;QACpC,MAAM,EAAE,UAAU,KAAA,EAAO,eAAe,KAAA,EAAO,aAAa,KAAA,CAAM,CAAA,GAAI;QACtE,IAAA,CAAK,QAAA,GAAW,KAAK,QAAA;QACrB,IAAA,CAAK,QAAA,GAAW,KAAK,QAAA;QACrB,IAAA,CAAK,UAAA,GAAa,KAAK,UAAA;QACvB,IAAA,CAAK,MAAA,GAAS,KAAK,MAAA;QACnB,IAAA,CAAK,OAAA,GAAU;QACf,IAAA,CAAK,YAAA,GAAe;QACpB,IAAA,CAAK,UAAA,GAAa;IACnB;IAEA,mBAAmB,OAAA,EAA6B;QAC/C,IAAI,CAAC,QAAS,CAAA,OAAO;QACrB,IAAI,IAAA,CAAK,OAAA,IAAW,CAAC,QAAQ,aAAA,CAAe,CAAA,OAAO;QACnD,IAAI,IAAA,CAAK,UAAA,IAAc,CAAC,QAAQ,eAAA,CAAiB,CAAA,OAAO;QACxD,OAAO;IACR;IAMA,aAAa,KAAA,EAAgB,SAAS,CAAA,EAAG,YAAY,KAAA,EAAO,QAAA,EAA8B;QAEzF,IAAI,IAAA,CAAK,QAAA,IAAA,CAAa,IAAA,CAAK,QAAA,IAAY,SAAA,6LAAc,iBAAA,EAAe,OAAO,IAAA,CAAK,QAAQ,GAAG;YAC1F,OAAO;QACR;QAEA,yLAAO,MAAA,CAAI,KAAA,CAAM,OAAO,IAAA,CAAK,YAAA,CAAa,KAAK,CAAC,KAAK,SAAS;IAC/D;IAEA,gBAAgB,KAAA,EAAgB,YAAY,KAAA,EAAO,OAAA,EAA6B;QAC/E,yLACC,MAAA,CAAI,IAAA,CAAK,OAAO,IAAA,CAAK,YAAA,CAAa,OAAO,OAAO,CAAC,IAAA,CAChD,IAAA,CAAK,QAAA,IAAA,CAAa,IAAA,CAAK,QAAA,IAAY,SAAA,4LAAc,kBAAA,EAAe,OAAO,IAAA,CAAK,QAAQ,IAClF,CAAA,IACA,CAAA;IAEL;IAEA,sBAAsB,CAAA,EAAY,CAAA,EAAY,OAAA,EAA6B;QAC1E,sLAAI,MAAA,CAAI,MAAA,CAAO,GAAG,CAAC,EAAG,CAAA,OAAO,IAAA,CAAK,eAAA,CAAgB,GAAG,OAAO,OAAO;QACnE,MAAM,EAAE,QAAA,CAAS,CAAA,GAAI,IAAA;QACrB,IAAI;QACJ,IAAI,OAAO;QACX,IAAI,GAAW,GAAQ;QACvB,MAAM,YAAY,IAAA,CAAK,QAAA,GAAW,SAAS,MAAA,GAAS,SAAS,MAAA,GAAS;QACtE,IAAA,IAAS,IAAI,GAAG,IAAI,SAAS,MAAA,EAAQ,IAAK;YACzC,IAAI,QAAA,CAAS,CAAC,CAAA;YACd,IAAI,IAAI,WAAW;gBAClB,MAAM,OAAO,QAAA,CAAA,CAAU,IAAI,CAAA,IAAK,SAAS,MAAM,CAAA;gBAC/C,gMAAI,iBAAA,EAAe,GAAG,GAAG,GAAG,IAAI,EAAG,CAAA,OAAO;YAC3C;YACA,sLAAI,MAAA,CAAI,yBAAA,CAA0B,GAAG,GAAG,GAAG,IAAI;YAC/C,sLAAI,MAAA,CAAI,KAAA,CAAM,GAAG,CAAC;YAClB,IAAI,IAAI,MAAM;gBACb,OAAO;gBACP,UAAU;YACX;QACD;QACA,IAAI,CAAC,QAAS,CAAA,MAAM,MAAM,yBAAyB;QACnD,OAAO,IAAA,CAAK,QAAA,IAAY,IAAA,CAAK,QAAA,IAAY,yMAAA,EAAe,SAAS,IAAA,CAAK,QAAQ,IAAI,CAAC,OAAO;IAC3F;IAEA,mBAAmB,CAAA,EAAY,CAAA,EAAY,WAAW,CAAA,EAAG,OAAA,EAAsC;QAC9F,OAAO,IAAA,CAAK,qBAAA,CAAsB,GAAG,GAAG,OAAO,KAAK;IACrD;IAEA,qBAAqB,CAAA,EAAY,CAAA,EAAY,QAAA,EAAyC;QACrF,MAAM,gBAAgB,IAAA,CAAK,QAAA,GACxB,0NAAA,EAA4B,GAAG,GAAG,IAAA,CAAK,QAAQ,gMAC/C,+BAAA,EAA6B,GAAG,GAAG,IAAA,CAAK,QAAQ;QAEnD,OAAO,iBAAiB,CAAC,CAAA;IAC1B;IAEA,gBAAgB,MAAA,EAAiB,MAAA,EAAgB,QAAA,EAAyC;QACzF,MAAM,gBAAgB,IAAA,CAAK,QAAA,+LACxB,yBAAA,EAAuB,QAAQ,QAAQ,IAAA,CAAK,QAAQ,gMACpD,0BAAA,EAAwB,QAAQ,QAAQ,IAAA,CAAK,QAAQ;QAExD,OAAO,iBAAiB,CAAC,CAAA;IAC1B;IAEA,iBAAiB,OAAA,EAAoB,QAAA,EAAyC;QAC7E,mMAAO,iBAAA,EAAe,SAAS,IAAA,CAAK,QAAA,EAAU,MAAM,IAAA,CAAK,QAAQ;IAClE;IAEA,kBAAkB,QAAA,EAAqB,QAAA,EAAyC;QAC/E,mMAAO,iBAAA,EAAe,UAAU,IAAA,CAAK,QAAA,EAAU,OAAO,IAAA,CAAK,QAAQ;IACpE;IAAA;;GAAA,GAKA,qBAAqB,CAAA,EAAW,QAAA,EAAmC;QAClE,MAAM,EAAE,QAAA,CAAS,CAAA,GAAI,IAAA;QAErB,IAAI,KAAK,EAAG,CAAA,OAAO,QAAA,CAAS,CAAC,CAAA;QAE7B,MAAM,mBAAmB,IAAI,IAAA,CAAK,MAAA;QAClC,IAAI,mBAAmB;QAEvB,IAAA,IAAS,IAAI,GAAG,IAAA,CAAK,IAAA,CAAK,QAAA,GAAW,SAAS,MAAA,GAAS,SAAS,MAAA,GAAS,CAAA,GAAI,IAAK;YACjF,MAAM,OAAO,QAAA,CAAS,CAAC,CAAA;YACvB,MAAM,OAAO,QAAA,CAAA,CAAU,IAAI,CAAA,IAAK,SAAS,MAAM,CAAA;YAC/C,MAAM,yLAAO,MAAA,CAAI,IAAA,CAAK,MAAM,IAAI;YAChC,MAAM,sBAAsB,mBAAmB;YAC/C,IAAI,uBAAuB,kBAAkB;gBAC5C,MAAM,sLAAI,MAAA,CAAI,GAAA,CACb,MACA,+KACA,WAAA,EAAQ,kBAAkB,qBAAqB,gBAAgB;gBAEhE,OAAO;YACR;YACA,mBAAmB;QACpB;QAEA,OAAO,IAAA,CAAK,QAAA,GAAW,QAAA,CAAS,CAAC,CAAA,GAAI,QAAA,CAAS,SAAS,MAAA,GAAS,CAAC,CAAA;IAClE;IAAA;;;GAAA,GAMA,uBAAuB,KAAA,EAAgB,QAAA,EAAsC;QAC5E,MAAM,EAAE,QAAA,EAAU,MAAA,CAAO,CAAA,GAAI,IAAA;QAC7B,IAAI,iBAAiB;QACrB,IAAI,kBAAkB;QACtB,IAAI,mBAAmB;QAEvB,IAAA,IAAS,IAAI,GAAG,IAAA,CAAK,IAAA,CAAK,QAAA,GAAW,SAAS,MAAA,GAAS,SAAS,MAAA,GAAS,CAAA,GAAI,IAAK;YACjF,MAAM,OAAO,QAAA,CAAS,CAAC,CAAA;YACvB,MAAM,OAAO,QAAA,CAAA,CAAU,IAAI,CAAA,IAAK,SAAS,MAAM,CAAA;YAE/C,MAAM,eAAe,wLAAA,CAAI,yBAAA,CAA0B,MAAM,MAAM,OAAO,IAAI;YAC1E,MAAM,6LAAW,MAAA,CAAI,IAAA,CAAK,cAAc,KAAK;YAE7C,IAAI,WAAW,iBAAiB;gBAC/B,kBAAkB;gBAClB,iBAAiB;oBAChB,OAAO;oBACP,KAAK;oBACL;oBACA,iBAAiB;gBAClB;YACD;YAEA,oBAAoB,wLAAA,CAAI,IAAA,CAAK,MAAM,IAAI;QACxC;QAEA,CAAA,GAAA,sKAAA,CAAA,SAAA,EAAO,cAAc;QAErB,MAAM,qBACL,eAAe,eAAA,qLAAkB,MAAA,CAAI,IAAA,CAAK,eAAe,KAAA,EAAO,eAAe,YAAY;QAE5F,OAAO,qBAAqB;IAC7B;IAAA,8CAAA,GAGA,0BAA0B,CAAA,EAAY,CAAA,EAAiB;QACtD,MAAM,EAAE,QAAA,CAAS,CAAA,GAAI,IAAA;QACrB,IAAI;QACJ,IAAI,OAAO;QACX,IAAI,GAAW,GAAQ;QACvB,IAAA,IAAS,IAAI,GAAG,IAAI,SAAS,MAAA,EAAQ,IAAK;YACzC,IAAI,QAAA,CAAS,CAAC,CAAA;YACd,sLAAI,MAAA,CAAI,yBAAA,CAA0B,GAAG,GAAG,GAAG,IAAI;YAC/C,sLAAI,MAAA,CAAI,KAAA,CAAM,GAAG,CAAC;YAClB,IAAI,IAAI,MAAM;gBACb,OAAO;gBACP,UAAU;YACX;QACD;QACA,IAAI,CAAC,QAAS,CAAA,MAAM,MAAM,yBAAyB;QACnD,OAAO;IACR;IAEA,gBAAgB,KAAA,EAAgB,SAAS,CAAA,EAAG;QAC3C,MAAM,EAAE,MAAA,CAAO,CAAA,GAAI,IAAA;QACnB,OAAO,CAAA,CACN,MAAM,CAAA,GAAI,OAAO,IAAA,GAAO,UACxB,MAAM,CAAA,GAAI,OAAO,IAAA,GAAO,UACxB,MAAM,CAAA,GAAI,OAAO,IAAA,GAAO,UACxB,MAAM,CAAA,GAAI,OAAO,IAAA,GAAO,MAAA;IAE1B;IAEA,UAAU,SAAA,EAAqB,IAAA,EAAiD;QAC/E,OAAO,IAAI,sBAAsB,IAAA,EAAM,WAAW,IAAI;IACvD;IAEQ,UAAA;IAAA,gDAAA;IAGR,IAAI,WAAkB;QACrB,IAAI,CAAC,IAAA,CAAK,SAAA,EAAW;YACpB,IAAA,CAAK,SAAA,GAAY,IAAA,CAAK,WAAA,CAAY,kBAAkB,cAAc;QACnE;QAEA,OAAO,IAAA,CAAK,SAAA;IACb;IAEA,YAAY;QACX,yLAAO,MAAA,CAAI,UAAA,CAAW,IAAA,CAAK,QAAQ;IACpC;IAEQ,QAAA;IAAA,gDAAA;IAGR,IAAI,SAAc;QACjB,IAAI,CAAC,IAAA,CAAK,OAAA,EAAS;YAClB,IAAA,CAAK,OAAA,GAAU,IAAA,CAAK,SAAA,CAAU;QAC/B;QACA,OAAO,IAAA,CAAK,OAAA;IACb;IAAA,gDAAA;IAGA,IAAI,SAAS;QACZ,OAAO,IAAA,CAAK,MAAA,CAAO,MAAA;IACpB;IAEQ,MAAA;IAAA,gDAAA;IAGR,IAAI,OAAO;QACV,IAAI,CAAC,IAAA,CAAK,KAAA,EAAO;YAChB,IAAA,CAAK,KAAA,GAAQ,IAAA,CAAK,OAAA,CAAQ;QAC3B;QACA,OAAO,IAAA,CAAK,KAAA;IACb;IAEA,UAAU;QACT,IAAI,CAAC,IAAA,CAAK,QAAA,EAAU;YACnB,OAAO;QACR;QACA,MAAM,EAAE,QAAA,CAAS,CAAA,GAAI,IAAA;QACrB,IAAI,OAAO;QACX,IAAA,IAAS,IAAI,GAAG,IAAI,SAAS,MAAA,EAAQ,IAAI,GAAG,IAAK;YAChD,MAAM,OAAO,QAAA,CAAS,CAAC,CAAA;YACvB,MAAM,OAAO,QAAA,CAAA,CAAU,IAAI,CAAA,IAAK,CAAC,CAAA;YACjC,QAAQ,KAAK,CAAA,GAAI,KAAK,CAAA,GAAI,KAAK,CAAA,GAAI,KAAK,CAAA;QACzC;QACA,OAAO,OAAO;IACf;IAEA,kBAAkB;QACjB,IAAI,OAAO;QAEX,MAAM,EAAE,QAAA,CAAS,CAAA,GAAI,IAAA;QACrB,MAAM,IAAI,SAAS,MAAA;QAEnB,IAAI,MAAM,EAAG,CAAA,OAAO;QAEpB,QAAQ,CAAA,CAAA,EAAI,QAAA,CAAS,CAAC,CAAA,CAAE,CAAC,CAAA,CAAA,EAAI,QAAA,CAAS,CAAC,CAAA,CAAE,CAAC,EAAA;QAE1C,IAAA,IAAS,IAAI,GAAG,IAAI,GAAG,IAAK;YAC3B,QAAQ,CAAA,CAAA,EAAI,QAAA,CAAS,CAAC,CAAA,CAAE,CAAC,CAAA,CAAA,EAAI,QAAA,CAAS,CAAC,CAAA,CAAE,CAAC,EAAA;QAC3C;QAEA,IAAI,IAAA,CAAK,QAAA,EAAU;YAClB,QAAQ;QACT;QAEA,OAAO;IACR;IAEQ,QAAA;IAAA,gDAAA;IAGR,IAAI,SAAS;QACZ,IAAI,IAAA,CAAK,OAAA,CAAS,CAAA,OAAO,IAAA,CAAK,OAAA;QAC9B,IAAA,CAAK,OAAA,GAAU,IAAA,CAAK,SAAA,CAAU,kBAAkB,cAAc;QAC9D,OAAO,IAAA,CAAK,OAAA;IACb;IAEA,UAAU,QAAA,EAA8B;QACvC,MAAM,WAAW,IAAA,CAAK,WAAA,CAAY,YAAY,kBAAkB,cAAc;QAC9E,IAAI,SAAS,MAAA,KAAW,EAAG,CAAA,OAAO;QAClC,IAAI,OAAO,QAAA,CAAS,CAAC,CAAA;QACrB,IAAI,SAAS;QACb,IAAA,IAAS,IAAI,GAAG,IAAI,SAAS,MAAA,EAAQ,IAAK;YACzC,MAAM,OAAO,QAAA,CAAS,CAAC,CAAA;YACvB,4LAAU,MAAA,CAAI,IAAA,CAAK,MAAM,IAAI;YAC7B,OAAO;QACR;QACA,IAAI,IAAA,CAAK,QAAA,EAAU;YAClB,4LAAU,MAAA,CAAI,IAAA,CAAK,QAAA,CAAS,SAAS,MAAA,GAAS,CAAC,CAAA,EAAG,QAAA,CAAS,CAAC,CAAC;QAC9D;QACA,OAAO;IACR;AAGD;AAQO,MAAM,8BAA8B,WAAW;IAIrD,YACkB,QAAA,EACA,MAAA,EACjB,IAAA,CACC;QACD,KAAA,CAAM,QAAQ;QAJG,IAAA,CAAA,QAAA,GAAA;QACA,IAAA,CAAA,MAAA,GAAA;QAIjB,IAAA,CAAK,OAAA,qLAAU,MAAA,CAAI,OAAA,CAAQ,MAAM;QACjC,IAAA,CAAK,UAAA,qLAAa,MAAA,CAAI,SAAA,CAAU,MAAM;QAEtC,IAAI,MAAM;YACT,IAAI,KAAK,OAAA,IAAW,KAAM,CAAA,IAAA,CAAK,OAAA,GAAU,KAAK,OAAA;YAC9C,IAAI,KAAK,UAAA,IAAc,KAAM,CAAA,IAAA,CAAK,UAAA,GAAa,KAAK,UAAA;YACpD,IAAI,KAAK,UAAA,IAAc,KAAM,CAAA,IAAA,CAAK,UAAA,GAAa,KAAK,UAAA;YACpD,IAAI,KAAK,MAAA,IAAU,KAAM,CAAA,IAAA,CAAK,MAAA,GAAS,KAAK,MAAA;QAC7C;QAEA,CAAA,GAAA,sKAAA,CAAA,SAAA,0LACC,gBAAA,EAAc,IAAA,CAAK,UAAA,CAAW,MAAA,EAAQ,IAAA,CAAK,UAAA,CAAW,MAAM,GAC5D;IAEF;IAvBiB,QAAA;IACA,WAAA;IAwBjB,YAAY,OAAA,EAAmC;QAC9C,OAAO,IAAA,CAAK,QAAA,CAAS,WAAA,CAAY,OAAO,EAAE,GAAA,CAAI,CAAC,sLAAM,MAAA,CAAI,YAAA,CAAa,IAAA,CAAK,MAAA,EAAQ,CAAC,CAAC;IACtF;IAEA,aAAa,KAAA,EAAgB,OAAA,EAAkC;QAC9D,yLAAO,MAAA,CAAI,YAAA,CACV,IAAA,CAAK,MAAA,EACL,IAAA,CAAK,QAAA,CAAS,YAAA,mLAAa,MAAA,CAAI,YAAA,CAAa,IAAA,CAAK,OAAA,EAAS,KAAK,GAAG,OAAO;IAE3E;IAES,aACR,KAAA,EACA,SAAS,CAAA,EACT,SAAA,EACA,OAAA,EACU;QACV,OAAO,IAAA,CAAK,QAAA,CAAS,YAAA,mLACpB,MAAA,CAAI,YAAA,CAAa,IAAA,CAAK,OAAA,EAAS,KAAK,GACpC,SAAS,IAAA,CAAK,UAAA,CAAW,MAAA,EACzB,WACA;IAEF;IAES,gBAAgB,KAAA,EAAgB,YAAY,KAAA,EAAO,OAAA,EAA6B;QACxF,OACC,IAAA,CAAK,QAAA,CAAS,eAAA,mLAAgB,MAAA,CAAI,YAAA,CAAa,IAAA,CAAK,OAAA,EAAS,KAAK,GAAG,WAAW,OAAO,IACvF,IAAA,CAAK,UAAA,CAAW,MAAA;IAElB;IAES,sBAAsB,CAAA,EAAY,CAAA,EAAY,OAAA,EAA6B;QACnF,OACC,IAAA,CAAK,QAAA,CAAS,qBAAA,mLACb,MAAA,CAAI,YAAA,CAAa,IAAA,CAAK,OAAA,EAAS,CAAC,qLAChC,MAAA,CAAI,YAAA,CAAa,IAAA,CAAK,OAAA,EAAS,CAAC,GAChC,WACG,IAAA,CAAK,UAAA,CAAW,MAAA;IAEtB;IAES,mBACR,CAAA,EACA,CAAA,EACA,WAAW,CAAA,EACX,OAAA,EACU;QACV,OAAO,IAAA,CAAK,QAAA,CAAS,kBAAA,mLACpB,MAAA,CAAI,YAAA,CAAa,IAAA,CAAK,OAAA,EAAS,CAAC,qLAChC,MAAA,CAAI,YAAA,CAAa,IAAA,CAAK,OAAA,EAAS,CAAC,GAChC,WAAW,IAAA,CAAK,UAAA,CAAW,MAAA,EAC3B;IAEF;IAES,qBAAqB,CAAA,EAAY,CAAA,EAAY,OAAA,EAA6B;QAClF,yLAAO,MAAA,CAAI,aAAA,CACV,IAAA,CAAK,MAAA,EACL,IAAA,CAAK,QAAA,CAAS,oBAAA,mLACb,MAAA,CAAI,YAAA,CAAa,IAAA,CAAK,OAAA,EAAS,CAAC,qLAChC,MAAA,CAAI,YAAA,CAAa,IAAA,CAAK,OAAA,EAAS,CAAC,GAChC;IAGH;IAES,gBAAgB,MAAA,EAAiB,MAAA,EAAgB,OAAA,EAA6B;QACtF,yLAAO,MAAA,CAAI,aAAA,CACV,IAAA,CAAK,MAAA,EACL,IAAA,CAAK,QAAA,CAAS,eAAA,mLACb,MAAA,CAAI,YAAA,CAAa,IAAA,CAAK,OAAA,EAAS,MAAM,GACrC,SAAS,IAAA,CAAK,UAAA,CAAW,MAAA,EACzB;IAGH;IAES,iBAAiB,OAAA,EAAoB,OAAA,EAAwC;QACrF,yLAAO,MAAA,CAAI,aAAA,CACV,IAAA,CAAK,MAAA,EACL,IAAA,CAAK,QAAA,CAAS,gBAAA,mLAAiB,MAAA,CAAI,aAAA,CAAc,IAAA,CAAK,OAAA,EAAS,OAAO,GAAG,OAAO;IAElF;IAES,kBAAkB,QAAA,EAAqB,OAAA,EAAwC;QACvF,yLAAO,MAAA,CAAI,aAAA,CACV,IAAA,CAAK,MAAA,EACL,IAAA,CAAK,QAAA,CAAS,iBAAA,CAAkB,wLAAA,CAAI,aAAA,CAAc,IAAA,CAAK,OAAA,EAAS,QAAQ,GAAG,OAAO;IAEpF;IAES,UAAU,SAAA,EAAqB,IAAA,EAAiD;QACxF,OAAO,IAAI,sBAAsB,IAAA,CAAK,QAAA,oLAAU,MAAA,CAAI,QAAA,CAAS,WAAW,IAAA,CAAK,MAAM,GAAG;YACrF,SAAS,MAAM,WAAW,IAAA,CAAK,OAAA;YAC/B,YAAY,MAAM,cAAc,IAAA,CAAK,UAAA;YACrC,YAAY,MAAM,cAAc,IAAA,CAAK,UAAA;YACrC,QAAQ,MAAM,UAAU,IAAA,CAAK,MAAA;QAC9B,CAAC;IACF;IAEA,iBAAyB;QACxB,MAAM,IAAI,MAAM,oDAAoD;IACrE;AACD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2195, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omar/Desktop/studio/node_modules/%40tldraw/editor/src/lib/primitives/geometry/Group2d.ts"],"sourcesContent":["import { EMPTY_ARRAY } from '@tldraw/state'\nimport { assert, invLerp, lerp } from '@tldraw/utils'\nimport { Box } from '../Box'\nimport { Mat } from '../Mat'\nimport { Vec, VecLike } from '../Vec'\nimport { Geometry2d, Geometry2dFilters, Geometry2dOptions } from './Geometry2d'\n\n/** @public */\nexport class Group2d extends Geometry2d {\n\tchildren: Geometry2d[] = []\n\tignoredChildren: Geometry2d[] = []\n\n\tconstructor(\n\t\tconfig: Omit<Geometry2dOptions, 'isClosed' | 'isFilled'> & {\n\t\t\tchildren: Geometry2d[]\n\t\t}\n\t) {\n\t\tsuper({ ...config, isClosed: true, isFilled: false })\n\n\t\tconst addChildren = (children: Geometry2d[]) => {\n\t\t\tfor (const child of children) {\n\t\t\t\tif (child instanceof Group2d) {\n\t\t\t\t\taddChildren(child.children)\n\t\t\t\t} else if (child.ignore) {\n\t\t\t\t\tthis.ignoredChildren.push(child)\n\t\t\t\t} else {\n\t\t\t\t\tthis.children.push(child)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\taddChildren(config.children)\n\n\t\tif (this.children.length === 0) throw Error('Group2d must have at least one child')\n\t}\n\n\toverride getVertices(filters: Geometry2dFilters): Vec[] {\n\t\tif (this.isExcludedByFilter(filters)) return []\n\t\treturn this.children\n\t\t\t.filter((c) => !c.isExcludedByFilter(filters))\n\t\t\t.flatMap((c) => c.getVertices(filters))\n\t}\n\n\toverride nearestPoint(point: VecLike, filters?: Geometry2dFilters): Vec {\n\t\tlet dist = Infinity\n\t\tlet nearest: Vec | undefined\n\n\t\tconst { children } = this\n\n\t\tif (children.length === 0) {\n\t\t\tthrow Error('no children')\n\t\t}\n\n\t\tlet p: Vec\n\t\tlet d: number\n\t\tfor (const child of children) {\n\t\t\tif (child.isExcludedByFilter(filters)) continue\n\t\t\tp = child.nearestPoint(point, filters)\n\t\t\td = Vec.Dist2(p, point)\n\t\t\tif (d < dist) {\n\t\t\t\tdist = d\n\t\t\t\tnearest = p\n\t\t\t}\n\t\t}\n\t\tif (!nearest) throw Error('nearest point not found')\n\t\treturn nearest\n\t}\n\n\toverride distanceToPoint(point: VecLike, hitInside = false, filters?: Geometry2dFilters) {\n\t\tlet smallestDistance = Infinity\n\t\tfor (const child of this.children) {\n\t\t\tif (child.isExcludedByFilter(filters)) continue\n\t\t\tconst distance = child.distanceToPoint(point, hitInside, filters)\n\t\t\tif (distance < smallestDistance) {\n\t\t\t\tsmallestDistance = distance\n\t\t\t}\n\t\t}\n\t\treturn smallestDistance\n\t}\n\n\toverride hitTestPoint(\n\t\tpoint: VecLike,\n\t\tmargin: number,\n\t\thitInside: boolean,\n\t\tfilters = Geometry2dFilters.EXCLUDE_LABELS\n\t): boolean {\n\t\treturn !!this.children\n\t\t\t.filter((c) => !c.isExcludedByFilter(filters))\n\t\t\t.find((c) => c.hitTestPoint(point, margin, hitInside))\n\t}\n\n\toverride hitTestLineSegment(\n\t\tA: VecLike,\n\t\tB: VecLike,\n\t\tzoom: number,\n\t\tfilters = Geometry2dFilters.EXCLUDE_LABELS\n\t): boolean {\n\t\treturn !!this.children\n\t\t\t.filter((c) => !c.isExcludedByFilter(filters))\n\t\t\t.find((c) => c.hitTestLineSegment(A, B, zoom))\n\t}\n\n\toverride intersectLineSegment(A: VecLike, B: VecLike, filters?: Geometry2dFilters) {\n\t\treturn this.children.flatMap((child) => {\n\t\t\tif (child.isExcludedByFilter(filters)) return EMPTY_ARRAY\n\t\t\treturn child.intersectLineSegment(A, B, filters)\n\t\t})\n\t}\n\n\toverride intersectCircle(center: VecLike, radius: number, filters?: Geometry2dFilters) {\n\t\treturn this.children.flatMap((child) => {\n\t\t\tif (child.isExcludedByFilter(filters)) return EMPTY_ARRAY\n\t\t\treturn child.intersectCircle(center, radius, filters)\n\t\t})\n\t}\n\n\toverride intersectPolygon(polygon: VecLike[], filters?: Geometry2dFilters) {\n\t\treturn this.children.flatMap((child) => {\n\t\t\tif (child.isExcludedByFilter(filters)) return EMPTY_ARRAY\n\t\t\treturn child.intersectPolygon(polygon, filters)\n\t\t})\n\t}\n\n\toverride intersectPolyline(polyline: VecLike[], filters?: Geometry2dFilters) {\n\t\treturn this.children.flatMap((child) => {\n\t\t\tif (child.isExcludedByFilter(filters)) return EMPTY_ARRAY\n\t\t\treturn child.intersectPolyline(polyline, filters)\n\t\t})\n\t}\n\n\toverride interpolateAlongEdge(t: number, filters?: Geometry2dFilters): Vec {\n\t\tconst totalLength = this.getLength(filters)\n\n\t\tconst distanceToTravel = t * totalLength\n\t\tlet distanceTraveled = 0\n\t\tfor (const child of this.children) {\n\t\t\tif (child.isExcludedByFilter(filters)) continue\n\t\t\tconst childLength = child.length\n\t\t\tconst newDistanceTraveled = distanceTraveled + childLength\n\t\t\tif (newDistanceTraveled >= distanceToTravel) {\n\t\t\t\treturn child.interpolateAlongEdge(\n\t\t\t\t\tinvLerp(distanceTraveled, newDistanceTraveled, distanceToTravel),\n\t\t\t\t\tfilters\n\t\t\t\t)\n\t\t\t}\n\t\t\tdistanceTraveled = newDistanceTraveled\n\t\t}\n\n\t\treturn this.children[this.children.length - 1].interpolateAlongEdge(1, filters)\n\t}\n\n\toverride uninterpolateAlongEdge(point: VecLike, filters?: Geometry2dFilters): number {\n\t\tconst totalLength = this.getLength(filters)\n\n\t\tlet closestChild = null\n\t\tlet closestDistance = Infinity\n\t\tlet distanceTraveled = 0\n\n\t\tfor (const child of this.children) {\n\t\t\tif (child.isExcludedByFilter(filters)) continue\n\t\t\tconst childLength = child.getLength(filters)\n\t\t\tconst newDistanceTraveled = distanceTraveled + childLength\n\n\t\t\tconst distance = child.distanceToPoint(point, false, filters)\n\t\t\tif (distance < closestDistance) {\n\t\t\t\tclosestDistance = distance\n\t\t\t\tclosestChild = {\n\t\t\t\t\tstartLength: distanceTraveled,\n\t\t\t\t\tendLength: newDistanceTraveled,\n\t\t\t\t\tchild,\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdistanceTraveled = newDistanceTraveled\n\t\t}\n\n\t\tassert(closestChild)\n\n\t\tconst normalizedDistanceInChild = closestChild.child.uninterpolateAlongEdge(point, filters)\n\t\tconst childTLength = lerp(\n\t\t\tclosestChild.startLength,\n\t\t\tclosestChild.endLength,\n\t\t\tnormalizedDistanceInChild\n\t\t)\n\t\treturn childTLength / totalLength\n\t}\n\n\toverride transform(transform: Mat): Geometry2d {\n\t\treturn new Group2d({\n\t\t\tchildren: this.children.map((c) => c.transform(transform)),\n\t\t\tisLabel: this.isLabel,\n\t\t\tdebugColor: this.debugColor,\n\t\t\tignore: this.ignore,\n\t\t})\n\t}\n\n\tgetArea() {\n\t\t// todo: this is a temporary solution, assuming that the first child defines the group size; we would want to flatten the group and then find the area of the hull polygon\n\t\treturn this.children[0].area\n\t}\n\n\ttoSimpleSvgPath() {\n\t\tlet path = ''\n\t\tfor (const child of this.children) {\n\t\t\tpath += child.toSimpleSvgPath()\n\t\t}\n\n\t\tconst corners = Box.FromPoints(this.vertices).corners\n\t\t// draw just a few pixels around each corner, e.g. an L shape for the bottom left\n\n\t\tfor (let i = 0, n = corners.length; i < n; i++) {\n\t\t\tconst corner = corners[i]\n\t\t\tconst prevCorner = corners[(i - 1 + n) % n]\n\t\t\tconst prevDist = corner.dist(prevCorner)\n\t\t\tconst nextCorner = corners[(i + 1) % n]\n\t\t\tconst nextDist = corner.dist(nextCorner)\n\n\t\t\tconst A = corner.clone().lrp(prevCorner, 4 / prevDist)\n\t\t\tconst B = corner\n\t\t\tconst C = corner.clone().lrp(nextCorner, 4 / nextDist)\n\n\t\t\tpath += `M${A.x},${A.y} L${B.x},${B.y} L${C.x},${C.y} `\n\t\t}\n\t\treturn path\n\t}\n\n\tgetLength(filters?: Geometry2dFilters): number {\n\t\tlet length = 0\n\t\tfor (const child of this.children) {\n\t\t\tif (child.isExcludedByFilter(filters)) continue\n\t\t\tlength += child.length\n\t\t}\n\t\treturn length\n\t}\n\n\tgetSvgPathData(): string {\n\t\treturn this.children.map((c, i) => (c.isLabel ? '' : c.getSvgPathData(i === 0))).join(' ')\n\t}\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2390, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omar/Desktop/studio/node_modules/%40tldraw/editor/src/lib/primitives/geometry/Edge2d.ts"],"sourcesContent":["import { Vec, VecLike } from '../Vec'\nimport { Geometry2d } from './Geometry2d'\n\n/** @public */\nexport class Edge2d extends Geometry2d {\n\tprivate _start: Vec\n\tprivate _end: Vec\n\tprivate _d: Vec\n\tprivate _u: Vec\n\tprivate _ul: number\n\n\tconstructor(config: { start: Vec; end: Vec }) {\n\t\tsuper({ ...config, isClosed: false, isFilled: false })\n\t\tconst { start, end } = config\n\n\t\tthis._start = start\n\t\tthis._end = end\n\n\t\tthis._d = start.clone().sub(end) // the delta from start to end\n\t\tthis._u = this._d.clone().uni() // the unit vector of the edge\n\t\tthis._ul = this._u.len() // the length of the unit vector\n\t}\n\n\toverride getLength() {\n\t\treturn this._d.len()\n\t}\n\n\toverride getVertices(): Vec[] {\n\t\treturn [this._start, this._end]\n\t}\n\n\toverride nearestPoint(point: VecLike): Vec {\n\t\tconst { _start: start, _end: end, _d: d, _u: u, _ul: l } = this\n\t\tif (d.len() === 0) return start // start and end are the same\n\t\tif (l === 0) return start // no length in the unit vector\n\t\tconst k = Vec.Sub(point, start).dpr(u) / l\n\t\tconst cx = start.x + u.x * k\n\t\tif (cx < Math.min(start.x, end.x)) return start.x < end.x ? start : end\n\t\tif (cx > Math.max(start.x, end.x)) return start.x > end.x ? start : end\n\t\tconst cy = start.y + u.y * k\n\t\tif (cy < Math.min(start.y, end.y)) return start.y < end.y ? start : end\n\t\tif (cy > Math.max(start.y, end.y)) return start.y > end.y ? start : end\n\t\treturn new Vec(cx, cy)\n\t}\n\n\tgetSvgPathData(first = true) {\n\t\tconst { _start: start, _end: end } = this\n\t\treturn `${first ? `M${start.toFixed()}` : ``} L${end.toFixed()}`\n\t}\n}\n"],"names":[],"mappings":";;;AAAA,SAAS,WAAoB;AAC7B,SAAS,kBAAkB;;;AAGpB,MAAM,oNAAe,aAAA,CAAW;IAC9B,OAAA;IACA,KAAA;IACA,GAAA;IACA,GAAA;IACA,IAAA;IAER,YAAY,MAAA,CAAkC;QAC7C,KAAA,CAAM;YAAE,GAAG,MAAA;YAAQ,UAAU;YAAO,UAAU;QAAM,CAAC;QACrD,MAAM,EAAE,KAAA,EAAO,GAAA,CAAI,CAAA,GAAI;QAEvB,IAAA,CAAK,MAAA,GAAS;QACd,IAAA,CAAK,IAAA,GAAO;QAEZ,IAAA,CAAK,EAAA,GAAK,MAAM,KAAA,CAAM,EAAE,GAAA,CAAI,GAAG;QAC/B,IAAA,CAAK,EAAA,GAAK,IAAA,CAAK,EAAA,CAAG,KAAA,CAAM,EAAE,GAAA,CAAI;QAC9B,IAAA,CAAK,GAAA,GAAM,IAAA,CAAK,EAAA,CAAG,GAAA,CAAI;IACxB;IAES,YAAY;QACpB,OAAO,IAAA,CAAK,EAAA,CAAG,GAAA,CAAI;IACpB;IAES,cAAqB;QAC7B,OAAO;YAAC,IAAA,CAAK,MAAA;YAAQ,IAAA,CAAK,IAAI;SAAA;IAC/B;IAES,aAAa,KAAA,EAAqB;QAC1C,MAAM,EAAE,QAAQ,KAAA,EAAO,MAAM,GAAA,EAAK,IAAI,CAAA,EAAG,IAAI,CAAA,EAAG,KAAK,CAAA,CAAE,CAAA,GAAI,IAAA;QAC3D,IAAI,EAAE,GAAA,CAAI,MAAM,EAAG,CAAA,OAAO;QAC1B,IAAI,MAAM,EAAG,CAAA,OAAO;QACpB,MAAM,sLAAI,MAAA,CAAI,GAAA,CAAI,OAAO,KAAK,EAAE,GAAA,CAAI,CAAC,IAAI;QACzC,MAAM,KAAK,MAAM,CAAA,GAAI,EAAE,CAAA,GAAI;QAC3B,IAAI,KAAK,KAAK,GAAA,CAAI,MAAM,CAAA,EAAG,IAAI,CAAC,EAAG,CAAA,OAAO,MAAM,CAAA,GAAI,IAAI,CAAA,GAAI,QAAQ;QACpE,IAAI,KAAK,KAAK,GAAA,CAAI,MAAM,CAAA,EAAG,IAAI,CAAC,EAAG,CAAA,OAAO,MAAM,CAAA,GAAI,IAAI,CAAA,GAAI,QAAQ;QACpE,MAAM,KAAK,MAAM,CAAA,GAAI,EAAE,CAAA,GAAI;QAC3B,IAAI,KAAK,KAAK,GAAA,CAAI,MAAM,CAAA,EAAG,IAAI,CAAC,EAAG,CAAA,OAAO,MAAM,CAAA,GAAI,IAAI,CAAA,GAAI,QAAQ;QACpE,IAAI,KAAK,KAAK,GAAA,CAAI,MAAM,CAAA,EAAG,IAAI,CAAC,EAAG,CAAA,OAAO,MAAM,CAAA,GAAI,IAAI,CAAA,GAAI,QAAQ;QACpE,OAAO,sLAAI,MAAA,CAAI,IAAI,EAAE;IACtB;IAEA,eAAe,QAAQ,IAAA,EAAM;QAC5B,MAAM,EAAE,QAAQ,KAAA,EAAO,MAAM,GAAA,CAAI,CAAA,GAAI,IAAA;QACrC,OAAO,GAAG,QAAQ,CAAA,CAAA,EAAI,MAAM,OAAA,CAAQ,CAAC,EAAA,GAAK,EAAE,CAAA,EAAA,EAAK,IAAI,OAAA,CAAQ,CAAC,EAAA;IAC/D;AACD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2451, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omar/Desktop/studio/node_modules/%40tldraw/editor/src/lib/primitives/geometry/Polyline2d.ts"],"sourcesContent":["import { Vec, VecLike } from '../Vec'\nimport { Edge2d } from './Edge2d'\nimport { Geometry2d, Geometry2dOptions } from './Geometry2d'\n\n/** @public */\nexport class Polyline2d extends Geometry2d {\n\tprivate _points: Vec[]\n\tprivate _segments?: Edge2d[]\n\n\tconstructor(config: Omit<Geometry2dOptions, 'isFilled' | 'isClosed'> & { points: Vec[] }) {\n\t\tsuper({ isClosed: false, isFilled: false, ...config })\n\t\tconst { points } = config\n\t\tthis._points = points\n\n\t\tif (points.length < 2) {\n\t\t\tthrow new Error('Polyline2d: points must be an array of at least 2 points')\n\t\t}\n\t}\n\n\t// eslint-disable-next-line no-restricted-syntax\n\tprotected get segments() {\n\t\tif (!this._segments) {\n\t\t\tthis._segments = []\n\t\t\tconst { vertices } = this\n\t\t\tfor (let i = 0, n = vertices.length - 1; i < n; i++) {\n\t\t\t\tconst start = vertices[i]\n\t\t\t\tconst end = vertices[i + 1]\n\t\t\t\tthis._segments.push(new Edge2d({ start, end }))\n\t\t\t}\n\n\t\t\tif (this.isClosed) {\n\t\t\t\tthis._segments.push(new Edge2d({ start: vertices[vertices.length - 1], end: vertices[0] }))\n\t\t\t}\n\t\t}\n\n\t\treturn this._segments\n\t}\n\n\toverride getLength() {\n\t\treturn this.segments.reduce((acc, segment) => acc + segment.length, 0)\n\t}\n\n\tgetVertices() {\n\t\treturn this._points\n\t}\n\n\tnearestPoint(A: VecLike): Vec {\n\t\tconst { segments } = this\n\t\tlet nearest = this._points[0]\n\t\tlet dist = Infinity\n\t\tlet p: Vec // current point on segment\n\t\tlet d: number // distance from A to p\n\t\tfor (let i = 0; i < segments.length; i++) {\n\t\t\tp = segments[i].nearestPoint(A)\n\t\t\td = Vec.Dist2(p, A)\n\t\t\tif (d < dist) {\n\t\t\t\tnearest = p\n\t\t\t\tdist = d\n\t\t\t}\n\t\t}\n\t\tif (!nearest) throw Error('nearest point not found')\n\t\treturn nearest\n\t}\n\n\thitTestLineSegment(A: VecLike, B: VecLike, distance = 0): boolean {\n\t\tconst { segments } = this\n\t\tfor (let i = 0, n = segments.length; i < n; i++) {\n\t\t\tif (segments[i].hitTestLineSegment(A, B, distance)) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\treturn false\n\t}\n\n\tgetSvgPathData(): string {\n\t\tconst { vertices } = this\n\t\tif (vertices.length < 2) return ''\n\t\treturn vertices.reduce((acc, vertex, i) => {\n\t\t\tif (i === 0) return `M ${vertex.x} ${vertex.y}`\n\t\t\treturn `${acc} L ${vertex.x} ${vertex.y}`\n\t\t}, '')\n\t}\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2546, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omar/Desktop/studio/node_modules/%40tldraw/editor/src/lib/primitives/geometry/Polygon2d.ts"],"sourcesContent":["import { Vec } from '../Vec'\nimport { Geometry2dOptions } from './Geometry2d'\nimport { Polyline2d } from './Polyline2d'\n\n/** @public */\nexport class Polygon2d extends Polyline2d {\n\tconstructor(config: Omit<Geometry2dOptions, 'isClosed'> & { points: Vec[] }) {\n\t\tsuper({ ...config })\n\t\tthis.isClosed = true\n\n\t\tif (config.points.length < 3) {\n\t\t\tthrow new Error('Polygon2d: points must be an array of at least 3 points')\n\t\t}\n\t}\n}\n"],"names":[],"mappings":";;;AAEA,SAAS,kBAAkB;;AAGpB,MAAM,uNAAkB,aAAA,CAAW;IACzC,YAAY,MAAA,CAAiE;QAC5E,KAAA,CAAM;YAAE,GAAG,MAAA;QAAO,CAAC;QACnB,IAAA,CAAK,QAAA,GAAW;QAEhB,IAAI,OAAO,MAAA,CAAO,MAAA,GAAS,GAAG;YAC7B,MAAM,IAAI,MAAM,yDAAyD;QAC1E;IACD;AACD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2570, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omar/Desktop/studio/node_modules/%40tldraw/editor/src/lib/primitives/geometry/Rectangle2d.ts"],"sourcesContent":["import { Box } from '../Box'\nimport { Vec } from '../Vec'\nimport { Geometry2dOptions } from './Geometry2d'\nimport { Polygon2d } from './Polygon2d'\n\n/** @public */\nexport class Rectangle2d extends Polygon2d {\n\tprivate _x: number\n\tprivate _y: number\n\tprivate _w: number\n\tprivate _h: number\n\n\tconstructor(\n\t\tconfig: Omit<Geometry2dOptions, 'isClosed'> & {\n\t\t\tx?: number\n\t\t\ty?: number\n\t\t\twidth: number\n\t\t\theight: number\n\t\t}\n\t) {\n\t\tconst { x = 0, y = 0, width, height } = config\n\t\tsuper({\n\t\t\t...config,\n\t\t\tpoints: [\n\t\t\t\tnew Vec(x, y),\n\t\t\t\tnew Vec(x + width, y),\n\t\t\t\tnew Vec(x + width, y + height),\n\t\t\t\tnew Vec(x, y + height),\n\t\t\t],\n\t\t})\n\t\tthis._x = x\n\t\tthis._y = y\n\t\tthis._w = width\n\t\tthis._h = height\n\t}\n\n\tgetBounds() {\n\t\treturn new Box(this._x, this._y, this._w, this._h)\n\t}\n\n\tgetSvgPathData(): string {\n\t\tconst { _x: x, _y: y, _w: w, _h: h } = this\n\t\tthis.negativeZeroFix()\n\t\treturn `M${x},${y} h${w} v${h} h${-w}z`\n\t}\n\n\tprivate negativeZeroFix() {\n\t\tthis._x = zeroFix(this._x)\n\t\tthis._y = zeroFix(this._y)\n\t\tthis._w = zeroFix(this._w)\n\t\tthis._h = zeroFix(this._h)\n\t}\n}\n\nfunction zeroFix(value: number) {\n\tif (Object.is(value, -0)) return 0\n\treturn value\n}\n"],"names":[],"mappings":";;;AAAA,SAAS,WAAW;AACpB,SAAS,WAAW;AAEpB,SAAS,iBAAiB;;;;AAGnB,MAAM,wNAAoB,YAAA,CAAU;IAClC,GAAA;IACA,GAAA;IACA,GAAA;IACA,GAAA;IAER,YACC,MAAA,CAMC;QACD,MAAM,EAAE,IAAI,CAAA,EAAG,IAAI,CAAA,EAAG,KAAA,EAAO,MAAA,CAAO,CAAA,GAAI;QACxC,KAAA,CAAM;YACL,GAAG,MAAA;YACH,QAAQ;gBACP,sLAAI,MAAA,CAAI,GAAG,CAAC;gBACZ,sLAAI,MAAA,CAAI,IAAI,OAAO,CAAC;gBACpB,sLAAI,MAAA,CAAI,IAAI,OAAO,IAAI,MAAM;gBAC7B,sLAAI,MAAA,CAAI,GAAG,IAAI,MAAM;aACtB;QACD,CAAC;QACD,IAAA,CAAK,EAAA,GAAK;QACV,IAAA,CAAK,EAAA,GAAK;QACV,IAAA,CAAK,EAAA,GAAK;QACV,IAAA,CAAK,EAAA,GAAK;IACX;IAEA,YAAY;QACX,OAAO,sLAAI,MAAA,CAAI,IAAA,CAAK,EAAA,EAAI,IAAA,CAAK,EAAA,EAAI,IAAA,CAAK,EAAA,EAAI,IAAA,CAAK,EAAE;IAClD;IAEA,iBAAyB;QACxB,MAAM,EAAE,IAAI,CAAA,EAAG,IAAI,CAAA,EAAG,IAAI,CAAA,EAAG,IAAI,CAAA,CAAE,CAAA,GAAI,IAAA;QACvC,IAAA,CAAK,eAAA,CAAgB;QACrB,OAAO,CAAA,CAAA,EAAI,CAAC,CAAA,CAAA,EAAI,CAAC,CAAA,EAAA,EAAK,CAAC,CAAA,EAAA,EAAK,CAAC,CAAA,EAAA,EAAK,CAAC,CAAC,CAAA,CAAA,CAAA;IACrC;IAEQ,kBAAkB;QACzB,IAAA,CAAK,EAAA,GAAK,QAAQ,IAAA,CAAK,EAAE;QACzB,IAAA,CAAK,EAAA,GAAK,QAAQ,IAAA,CAAK,EAAE;QACzB,IAAA,CAAK,EAAA,GAAK,QAAQ,IAAA,CAAK,EAAE;QACzB,IAAA,CAAK,EAAA,GAAK,QAAQ,IAAA,CAAK,EAAE;IAC1B;AACD;AAEA,SAAS,QAAQ,KAAA,EAAe;IAC/B,IAAI,OAAO,EAAA,CAAG,OAAO,CAAA,CAAE,EAAG,CAAA,OAAO;IACjC,OAAO;AACR","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2627, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omar/Desktop/studio/node_modules/%40tldraw/editor/src/lib/primitives/geometry/geometry-constants.ts"],"sourcesContent":["const SPACING = 20\nconst MIN_COUNT = 8\n\n/** @internal */\nexport function getVerticesCountForArcLength(length: number, spacing = SPACING) {\n\treturn Math.max(MIN_COUNT, Math.ceil(length / spacing))\n}\n"],"names":[],"mappings":";;;AAAA,MAAM,UAAU;AAChB,MAAM,YAAY;AAGX,SAAS,6BAA6B,MAAA,EAAgB,UAAU,OAAA,EAAS;IAC/E,OAAO,KAAK,GAAA,CAAI,WAAW,KAAK,IAAA,CAAK,SAAS,OAAO,CAAC;AACvD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2643, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omar/Desktop/studio/node_modules/%40tldraw/editor/src/lib/primitives/geometry/Arc2d.ts"],"sourcesContent":["import { Vec, VecLike } from '../Vec'\nimport { intersectLineSegmentCircle } from '../intersect'\nimport { getArcMeasure, getPointInArcT, getPointOnCircle } from '../utils'\nimport { Geometry2d, Geometry2dOptions } from './Geometry2d'\nimport { getVerticesCountForArcLength } from './geometry-constants'\n\n/** @public */\nexport class Arc2d extends Geometry2d {\n\tprivate _center: Vec\n\tprivate _radius: number\n\tprivate _start: Vec\n\tprivate _end: Vec\n\tprivate _largeArcFlag: number\n\tprivate _sweepFlag: number\n\tprivate _measure: number\n\tprivate _angleStart: number\n\tprivate _angleEnd: number\n\n\tconstructor(\n\t\tconfig: Omit<Geometry2dOptions, 'isFilled' | 'isClosed'> & {\n\t\t\tcenter: Vec\n\t\t\tstart: Vec\n\t\t\tend: Vec\n\t\t\tsweepFlag: number\n\t\t\tlargeArcFlag: number\n\t\t}\n\t) {\n\t\tsuper({ ...config, isFilled: false, isClosed: false })\n\t\tconst { center, sweepFlag, largeArcFlag, start, end } = config\n\t\tif (start.equals(end)) throw Error(`Arc must have different start and end points.`)\n\n\t\t// ensure that the start and end are clockwise\n\t\tthis._angleStart = Vec.Angle(center, start)\n\t\tthis._angleEnd = Vec.Angle(center, end)\n\t\tthis._radius = Vec.Dist(center, start)\n\t\tthis._measure = getArcMeasure(this._angleStart, this._angleEnd, sweepFlag, largeArcFlag)\n\n\t\tthis._start = start\n\t\tthis._end = end\n\n\t\tthis._sweepFlag = sweepFlag\n\t\tthis._largeArcFlag = largeArcFlag\n\t\tthis._center = center\n\t}\n\n\tnearestPoint(point: VecLike): Vec {\n\t\tconst {\n\t\t\t_center,\n\t\t\t_measure: measure,\n\t\t\t_radius: radius,\n\t\t\t_angleEnd: angleEnd,\n\t\t\t_angleStart: angleStart,\n\t\t\t_start: A,\n\t\t\t_end: B,\n\t\t} = this\n\t\tconst t = getPointInArcT(measure, angleStart, angleEnd, _center.angle(point))\n\t\tif (t <= 0) return A\n\t\tif (t >= 1) return B\n\n\t\t// Get the point (P) on the arc, then pick the nearest of A, B, and P\n\t\tconst P = Vec.Sub(point, _center).uni().mul(radius).add(_center)\n\n\t\tlet nearest: Vec | undefined\n\t\tlet dist = Infinity\n\t\tlet d: number\n\t\tfor (const p of [A, B, P]) {\n\t\t\td = Vec.Dist2(point, p)\n\t\t\tif (d < dist) {\n\t\t\t\tnearest = p\n\t\t\t\tdist = d\n\t\t\t}\n\t\t}\n\t\tif (!nearest) throw Error('nearest point not found')\n\t\treturn nearest\n\t}\n\n\thitTestLineSegment(A: VecLike, B: VecLike): boolean {\n\t\tconst {\n\t\t\t_center,\n\t\t\t_radius: radius,\n\t\t\t_measure: measure,\n\t\t\t_angleStart: angleStart,\n\t\t\t_angleEnd: angleEnd,\n\t\t} = this\n\t\tconst intersection = intersectLineSegmentCircle(A, B, _center, radius)\n\t\tif (intersection === null) return false\n\n\t\treturn intersection.some((p) => {\n\t\t\tconst result = getPointInArcT(measure, angleStart, angleEnd, _center.angle(p))\n\t\t\treturn result >= 0 && result <= 1\n\t\t})\n\t}\n\n\tgetVertices(): Vec[] {\n\t\tconst { _center, _measure: measure, length, _radius: radius, _angleStart: angleStart } = this\n\t\tconst vertices: Vec[] = []\n\t\tfor (let i = 0, n = getVerticesCountForArcLength(Math.abs(length)); i < n + 1; i++) {\n\t\t\tconst t = (i / n) * measure\n\t\t\tconst angle = angleStart + t\n\t\t\tvertices.push(getPointOnCircle(_center, radius, angle))\n\t\t}\n\t\treturn vertices\n\t}\n\n\tgetSvgPathData(first = true) {\n\t\tconst {\n\t\t\t_start: start,\n\t\t\t_end: end,\n\t\t\t_radius: radius,\n\t\t\t_largeArcFlag: largeArcFlag,\n\t\t\t_sweepFlag: sweepFlag,\n\t\t} = this\n\t\treturn `${first ? `M${start.toFixed()}` : ``} A${radius} ${radius} 0 ${largeArcFlag} ${sweepFlag} ${end.toFixed()}`\n\t}\n\n\toverride getLength() {\n\t\treturn Math.abs(this._measure * this._radius)\n\t}\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2742, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omar/Desktop/studio/node_modules/%40tldraw/editor/src/lib/primitives/geometry/Circle2d.ts"],"sourcesContent":["import { Box } from '../Box'\nimport { Vec, VecLike } from '../Vec'\nimport { intersectLineSegmentCircle } from '../intersect'\nimport { PI2, getPointOnCircle } from '../utils'\nimport { Geometry2d, Geometry2dOptions } from './Geometry2d'\nimport { getVerticesCountForArcLength } from './geometry-constants'\n\n/** @public */\nexport class Circle2d extends Geometry2d {\n\tprivate _center: Vec\n\tprivate _radius: number\n\tprivate _x: number\n\tprivate _y: number\n\n\tconstructor(\n\t\tpublic config: Omit<Geometry2dOptions, 'isClosed'> & {\n\t\t\tx?: number\n\t\t\ty?: number\n\t\t\tradius: number\n\t\t\tisFilled: boolean\n\t\t}\n\t) {\n\t\tsuper({ isClosed: true, ...config })\n\t\tconst { x = 0, y = 0, radius } = config\n\t\tthis._x = x\n\t\tthis._y = y\n\t\tthis._center = new Vec(radius + x, radius + y)\n\t\tthis._radius = radius\n\t}\n\n\tgetBounds() {\n\t\treturn new Box(this._x, this._y, this._radius * 2, this._radius * 2)\n\t}\n\n\tgetVertices(): Vec[] {\n\t\tconst { _center, _radius: radius } = this\n\t\tconst perimeter = PI2 * radius\n\t\tconst vertices: Vec[] = []\n\t\tfor (let i = 0, n = getVerticesCountForArcLength(perimeter); i < n; i++) {\n\t\t\tconst angle = (i / n) * PI2\n\t\t\tvertices.push(getPointOnCircle(_center, radius, angle))\n\t\t}\n\t\treturn vertices\n\t}\n\n\tnearestPoint(point: VecLike): Vec {\n\t\tconst { _center, _radius: radius } = this\n\t\tif (_center.equals(point)) return Vec.AddXY(_center, radius, 0)\n\t\treturn Vec.Sub(point, _center).uni().mul(radius).add(_center)\n\t}\n\n\thitTestLineSegment(A: VecLike, B: VecLike, distance = 0): boolean {\n\t\tconst { _center, _radius: radius } = this\n\t\treturn intersectLineSegmentCircle(A, B, _center, radius + distance) !== null\n\t}\n\n\tgetSvgPathData(): string {\n\t\tconst { _center, _radius: radius } = this\n\t\treturn `M${_center.x + radius},${_center.y} a${radius},${radius} 0 1,0 ${radius * 2},0a${radius},${radius} 0 1,0 -${radius * 2},0`\n\t}\n}\n"],"names":[],"mappings":";;;AAAA,SAAS,WAAW;AACpB,SAAS,WAAoB;AAC7B,SAAS,kCAAkC;AAC3C,SAAS,KAAK,wBAAwB;AACtC,SAAS,kBAAqC;AAC9C,SAAS,oCAAoC;;;;;;;AAGtC,MAAM,sNAAiB,aAAA,CAAW;IAMxC,YACQ,MAAA,CAMN;QACD,KAAA,CAAM;YAAE,UAAU;YAAM,GAAG,MAAA;QAAO,CAAC;QAP5B,IAAA,CAAA,MAAA,GAAA;QAQP,MAAM,EAAE,IAAI,CAAA,EAAG,IAAI,CAAA,EAAG,MAAA,CAAO,CAAA,GAAI;QACjC,IAAA,CAAK,EAAA,GAAK;QACV,IAAA,CAAK,EAAA,GAAK;QACV,IAAA,CAAK,OAAA,GAAU,sLAAI,MAAA,CAAI,SAAS,GAAG,SAAS,CAAC;QAC7C,IAAA,CAAK,OAAA,GAAU;IAChB;IAnBQ,QAAA;IACA,QAAA;IACA,GAAA;IACA,GAAA;IAkBR,YAAY;QACX,OAAO,sLAAI,MAAA,CAAI,IAAA,CAAK,EAAA,EAAI,IAAA,CAAK,EAAA,EAAI,IAAA,CAAK,OAAA,GAAU,GAAG,IAAA,CAAK,OAAA,GAAU,CAAC;IACpE;IAEA,cAAqB;QACpB,MAAM,EAAE,OAAA,EAAS,SAAS,MAAA,CAAO,CAAA,GAAI,IAAA;QACrC,MAAM,gMAAY,MAAA,GAAM;QACxB,MAAM,WAAkB,CAAC,CAAA;QACzB,IAAA,IAAS,IAAI,GAAG,KAAI,kPAAA,EAA6B,SAAS,GAAG,IAAI,GAAG,IAAK;YACxE,MAAM,QAAS,IAAI,uLAAK,OAAA;YACxB,SAAS,IAAA,yLAAK,mBAAA,EAAiB,SAAS,QAAQ,KAAK,CAAC;QACvD;QACA,OAAO;IACR;IAEA,aAAa,KAAA,EAAqB;QACjC,MAAM,EAAE,OAAA,EAAS,SAAS,MAAA,CAAO,CAAA,GAAI,IAAA;QACrC,IAAI,QAAQ,MAAA,CAAO,KAAK,EAAG,CAAA,yLAAO,MAAA,CAAI,KAAA,CAAM,SAAS,QAAQ,CAAC;QAC9D,yLAAO,MAAA,CAAI,GAAA,CAAI,OAAO,OAAO,EAAE,GAAA,CAAI,EAAE,GAAA,CAAI,MAAM,EAAE,GAAA,CAAI,OAAO;IAC7D;IAEA,mBAAmB,CAAA,EAAY,CAAA,EAAY,WAAW,CAAA,EAAY;QACjE,MAAM,EAAE,OAAA,EAAS,SAAS,MAAA,CAAO,CAAA,GAAI,IAAA;QACrC,QAAO,wNAAA,EAA2B,GAAG,GAAG,SAAS,SAAS,QAAQ,MAAM;IACzE;IAEA,iBAAyB;QACxB,MAAM,EAAE,OAAA,EAAS,SAAS,MAAA,CAAO,CAAA,GAAI,IAAA;QACrC,OAAO,CAAA,CAAA,EAAI,QAAQ,CAAA,GAAI,MAAM,CAAA,CAAA,EAAI,QAAQ,CAAC,CAAA,EAAA,EAAK,MAAM,CAAA,CAAA,EAAI,MAAM,CAAA,OAAA,EAAU,SAAS,CAAC,CAAA,GAAA,EAAM,MAAM,CAAA,CAAA,EAAI,MAAM,CAAA,QAAA,EAAW,SAAS,CAAC,CAAA,EAAA,CAAA;IAC/H;AACD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2809, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omar/Desktop/studio/node_modules/%40tldraw/editor/src/lib/primitives/geometry/CubicBezier2d.ts"],"sourcesContent":["import { Vec, VecLike } from '../Vec'\nimport { Geometry2dFilters, Geometry2dOptions } from './Geometry2d'\nimport { Polyline2d } from './Polyline2d'\n\n/** @public */\nexport class CubicBezier2d extends Polyline2d {\n\tprivate _a: Vec\n\tprivate _b: Vec\n\tprivate _c: Vec\n\tprivate _d: Vec\n\tprivate _resolution: number\n\n\tconstructor(\n\t\tconfig: Omit<Geometry2dOptions, 'isFilled' | 'isClosed'> & {\n\t\t\tstart: Vec\n\t\t\tcp1: Vec\n\t\t\tcp2: Vec\n\t\t\tend: Vec\n\t\t\tresolution?: number\n\t\t}\n\t) {\n\t\tconst { start: a, cp1: b, cp2: c, end: d } = config\n\t\tsuper({ ...config, points: [a, d] })\n\n\t\tthis._a = a\n\t\tthis._b = b\n\t\tthis._c = c\n\t\tthis._d = d\n\t\tthis._resolution = config.resolution ?? 10\n\t}\n\n\toverride getVertices() {\n\t\tconst vertices = [] as Vec[]\n\t\tconst { _a: a, _b: b, _c: c, _d: d } = this\n\t\t// we'll always use ten vertices for each bezier curve\n\t\tfor (let i = 0, n = this._resolution; i <= n; i++) {\n\t\t\tconst t = i / n\n\t\t\tvertices.push(\n\t\t\t\tnew Vec(\n\t\t\t\t\t(1 - t) * (1 - t) * (1 - t) * a.x +\n\t\t\t\t\t\t3 * ((1 - t) * (1 - t)) * t * b.x +\n\t\t\t\t\t\t3 * (1 - t) * (t * t) * c.x +\n\t\t\t\t\t\tt * t * t * d.x,\n\t\t\t\t\t(1 - t) * (1 - t) * (1 - t) * a.y +\n\t\t\t\t\t\t3 * ((1 - t) * (1 - t)) * t * b.y +\n\t\t\t\t\t\t3 * (1 - t) * (t * t) * c.y +\n\t\t\t\t\t\tt * t * t * d.y\n\t\t\t\t)\n\t\t\t)\n\t\t}\n\t\treturn vertices\n\t}\n\n\tnearestPoint(A: VecLike): Vec {\n\t\tlet nearest: Vec | undefined\n\t\tlet dist = Infinity\n\t\tlet d: number\n\t\tlet p: Vec\n\t\tfor (const edge of this.segments) {\n\t\t\tp = edge.nearestPoint(A)\n\t\t\td = Vec.Dist2(p, A)\n\t\t\tif (d < dist) {\n\t\t\t\tnearest = p\n\t\t\t\tdist = d\n\t\t\t}\n\t\t}\n\n\t\tif (!nearest) throw Error('nearest point not found')\n\t\treturn nearest\n\t}\n\n\tgetSvgPathData(first = true) {\n\t\tconst { _a: a, _b: b, _c: c, _d: d } = this\n\t\treturn `${first ? `M ${a.toFixed()} ` : ``} C${b.toFixed()} ${c.toFixed()} ${d.toFixed()}`\n\t}\n\n\tstatic GetAtT(segment: CubicBezier2d, t: number) {\n\t\tconst { _a: a, _b: b, _c: c, _d: d } = segment\n\t\treturn new Vec(\n\t\t\t(1 - t) * (1 - t) * (1 - t) * a.x +\n\t\t\t\t3 * ((1 - t) * (1 - t)) * t * b.x +\n\t\t\t\t3 * (1 - t) * (t * t) * c.x +\n\t\t\t\tt * t * t * d.x,\n\t\t\t(1 - t) * (1 - t) * (1 - t) * a.y +\n\t\t\t\t3 * ((1 - t) * (1 - t)) * t * b.y +\n\t\t\t\t3 * (1 - t) * (t * t) * c.y +\n\t\t\t\tt * t * t * d.y\n\t\t)\n\t}\n\n\toverride getLength(_filters?: Geometry2dFilters, precision = 32) {\n\t\tlet n1: Vec,\n\t\t\tp1 = this._a,\n\t\t\tlength = 0\n\t\tfor (let i = 1; i <= precision; i++) {\n\t\t\tn1 = CubicBezier2d.GetAtT(this, i / precision)\n\t\t\tlength += Vec.Dist(p1, n1)\n\t\t\tp1 = n1\n\t\t}\n\t\treturn length\n\t}\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2888, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omar/Desktop/studio/node_modules/%40tldraw/editor/src/lib/primitives/geometry/CubicSpline2d.ts"],"sourcesContent":["import { Vec, VecLike } from '../Vec'\nimport { CubicBezier2d } from './CubicBezier2d'\nimport { Geometry2d, Geometry2dOptions } from './Geometry2d'\n\n/** @public */\nexport class CubicSpline2d extends Geometry2d {\n\tprivate _points: Vec[]\n\n\tconstructor(config: Omit<Geometry2dOptions, 'isClosed' | 'isFilled'> & { points: Vec[] }) {\n\t\tsuper({ ...config, isClosed: false, isFilled: false })\n\t\tconst { points } = config\n\n\t\tthis._points = points\n\t}\n\n\tprivate _segments?: CubicBezier2d[]\n\n\t// eslint-disable-next-line no-restricted-syntax\n\tget segments() {\n\t\tif (!this._segments) {\n\t\t\tthis._segments = []\n\t\t\tconst { _points: points } = this\n\n\t\t\tconst len = points.length\n\t\t\tconst last = len - 2\n\t\t\tconst k = 1.25\n\n\t\t\tfor (let i = 0; i < len - 1; i++) {\n\t\t\t\tconst p0 = i === 0 ? points[0] : points[i - 1]\n\t\t\t\tconst p1 = points[i]\n\t\t\t\tconst p2 = points[i + 1]\n\t\t\t\tconst p3 = i === last ? p2 : points[i + 2]\n\t\t\t\tconst start = p1,\n\t\t\t\t\tcp1 =\n\t\t\t\t\t\ti === 0 ? p0 : new Vec(p1.x + ((p2.x - p0.x) / 6) * k, p1.y + ((p2.y - p0.y) / 6) * k),\n\t\t\t\t\tcp2 =\n\t\t\t\t\t\ti === last\n\t\t\t\t\t\t\t? p2\n\t\t\t\t\t\t\t: new Vec(p2.x - ((p3.x - p1.x) / 6) * k, p2.y - ((p3.y - p1.y) / 6) * k),\n\t\t\t\t\tend = p2\n\n\t\t\t\tthis._segments.push(new CubicBezier2d({ start, cp1, cp2, end }))\n\t\t\t}\n\t\t}\n\n\t\treturn this._segments\n\t}\n\n\toverride getLength() {\n\t\treturn this.segments.reduce((acc, segment) => acc + segment.length, 0)\n\t}\n\n\tgetVertices() {\n\t\tconst vertices = this.segments.reduce((acc, segment) => {\n\t\t\treturn acc.concat(segment.vertices)\n\t\t}, [] as Vec[])\n\t\tvertices.push(this._points[this._points.length - 1])\n\t\treturn vertices\n\t}\n\n\tnearestPoint(A: VecLike): Vec {\n\t\tlet nearest: Vec | undefined\n\t\tlet dist = Infinity\n\t\tlet d: number\n\t\tlet p: Vec\n\t\tfor (const segment of this.segments) {\n\t\t\tp = segment.nearestPoint(A)\n\t\t\td = Vec.Dist2(p, A)\n\t\t\tif (d < dist) {\n\t\t\t\tnearest = p\n\t\t\t\tdist = d\n\t\t\t}\n\t\t}\n\t\tif (!nearest) throw Error('nearest point not found')\n\t\treturn nearest\n\t}\n\n\thitTestLineSegment(A: VecLike, B: VecLike): boolean {\n\t\treturn this.segments.some((segment) => segment.hitTestLineSegment(A, B))\n\t}\n\n\tgetSvgPathData() {\n\t\tlet d = this.segments.reduce((d, segment, i) => {\n\t\t\treturn d + segment.getSvgPathData(i === 0)\n\t\t}, '')\n\n\t\tif (this.isClosed) {\n\t\t\td += 'Z'\n\t\t}\n\n\t\treturn d\n\t}\n}\n"],"names":["d"],"mappings":";;;AAAA,SAAS,WAAoB;AAC7B,SAAS,qBAAqB;AAC9B,SAAS,kBAAqC;;;;AAGvC,MAAM,2NAAsB,aAAA,CAAW;IACrC,QAAA;IAER,YAAY,MAAA,CAA8E;QACzF,KAAA,CAAM;YAAE,GAAG,MAAA;YAAQ,UAAU;YAAO,UAAU;QAAM,CAAC;QACrD,MAAM,EAAE,MAAA,CAAO,CAAA,GAAI;QAEnB,IAAA,CAAK,OAAA,GAAU;IAChB;IAEQ,UAAA;IAAA,gDAAA;IAGR,IAAI,WAAW;QACd,IAAI,CAAC,IAAA,CAAK,SAAA,EAAW;YACpB,IAAA,CAAK,SAAA,GAAY,CAAC,CAAA;YAClB,MAAM,EAAE,SAAS,MAAA,CAAO,CAAA,GAAI,IAAA;YAE5B,MAAM,MAAM,OAAO,MAAA;YACnB,MAAM,OAAO,MAAM;YACnB,MAAM,IAAI;YAEV,IAAA,IAAS,IAAI,GAAG,IAAI,MAAM,GAAG,IAAK;gBACjC,MAAM,KAAK,MAAM,IAAI,MAAA,CAAO,CAAC,CAAA,GAAI,MAAA,CAAO,IAAI,CAAC,CAAA;gBAC7C,MAAM,KAAK,MAAA,CAAO,CAAC,CAAA;gBACnB,MAAM,KAAK,MAAA,CAAO,IAAI,CAAC,CAAA;gBACvB,MAAM,KAAK,MAAM,OAAO,KAAK,MAAA,CAAO,IAAI,CAAC,CAAA;gBACzC,MAAM,QAAQ,IACb,MACC,MAAM,IAAI,KAAK,sLAAI,MAAA,CAAI,GAAG,CAAA,GAAA,CAAM,GAAG,CAAA,GAAI,GAAG,CAAA,IAAK,IAAK,GAAG,GAAG,CAAA,GAAA,CAAM,GAAG,CAAA,GAAI,GAAG,CAAA,IAAK,IAAK,CAAC,GACtF,MACC,MAAM,OACH,KACA,sLAAI,MAAA,CAAI,GAAG,CAAA,GAAA,CAAM,GAAG,CAAA,GAAI,GAAG,CAAA,IAAK,IAAK,GAAG,GAAG,CAAA,GAAA,CAAM,GAAG,CAAA,GAAI,GAAG,CAAA,IAAK,IAAK,CAAC,GAC1E,MAAM;gBAEP,IAAA,CAAK,SAAA,CAAU,IAAA,CAAK,4MAAI,gBAAA,CAAc;oBAAE;oBAAO;oBAAK;oBAAK;gBAAI,CAAC,CAAC;YAChE;QACD;QAEA,OAAO,IAAA,CAAK,SAAA;IACb;IAES,YAAY;QACpB,OAAO,IAAA,CAAK,QAAA,CAAS,MAAA,CAAO,CAAC,KAAK,UAAY,MAAM,QAAQ,MAAA,EAAQ,CAAC;IACtE;IAEA,cAAc;QACb,MAAM,WAAW,IAAA,CAAK,QAAA,CAAS,MAAA,CAAO,CAAC,KAAK,YAAY;YACvD,OAAO,IAAI,MAAA,CAAO,QAAQ,QAAQ;QACnC,GAAG,CAAC,CAAU;QACd,SAAS,IAAA,CAAK,IAAA,CAAK,OAAA,CAAQ,IAAA,CAAK,OAAA,CAAQ,MAAA,GAAS,CAAC,CAAC;QACnD,OAAO;IACR;IAEA,aAAa,CAAA,EAAiB;QAC7B,IAAI;QACJ,IAAI,OAAO;QACX,IAAI;QACJ,IAAI;QACJ,KAAA,MAAW,WAAW,IAAA,CAAK,QAAA,CAAU;YACpC,IAAI,QAAQ,YAAA,CAAa,CAAC;YAC1B,sLAAI,MAAA,CAAI,KAAA,CAAM,GAAG,CAAC;YAClB,IAAI,IAAI,MAAM;gBACb,UAAU;gBACV,OAAO;YACR;QACD;QACA,IAAI,CAAC,QAAS,CAAA,MAAM,MAAM,yBAAyB;QACnD,OAAO;IACR;IAEA,mBAAmB,CAAA,EAAY,CAAA,EAAqB;QACnD,OAAO,IAAA,CAAK,QAAA,CAAS,IAAA,CAAK,CAAC,UAAY,QAAQ,kBAAA,CAAmB,GAAG,CAAC,CAAC;IACxE;IAEA,iBAAiB;QAChB,IAAI,IAAI,IAAA,CAAK,QAAA,CAAS,MAAA,CAAO,CAACA,IAAG,SAAS,MAAM;YAC/C,OAAOA,KAAI,QAAQ,cAAA,CAAe,MAAM,CAAC;QAC1C,GAAG,EAAE;QAEL,IAAI,IAAA,CAAK,QAAA,EAAU;YAClB,KAAK;QACN;QAEA,OAAO;IACR;AACD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2980, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omar/Desktop/studio/node_modules/%40tldraw/editor/src/lib/primitives/geometry/Ellipse2d.ts"],"sourcesContent":["import { Box } from '../Box'\nimport { Vec, VecLike } from '../Vec'\nimport { PI, PI2, clamp, perimeterOfEllipse } from '../utils'\nimport { Edge2d } from './Edge2d'\nimport { Geometry2d, Geometry2dOptions } from './Geometry2d'\nimport { getVerticesCountForArcLength } from './geometry-constants'\n\n/** @public */\nexport class Ellipse2d extends Geometry2d {\n\tprivate _w: number\n\tprivate _h: number\n\tprivate _edges?: Edge2d[]\n\n\tconstructor(\n\t\tpublic config: Omit<Geometry2dOptions, 'isClosed'> & {\n\t\t\twidth: number\n\t\t\theight: number\n\t\t}\n\t) {\n\t\tsuper({ ...config, isClosed: true })\n\t\tconst { width, height } = config\n\t\tthis._w = width\n\t\tthis._h = height\n\t}\n\n\t// eslint-disable-next-line no-restricted-syntax\n\tget edges() {\n\t\tif (!this._edges) {\n\t\t\tconst { vertices } = this\n\t\t\tthis._edges = []\n\t\t\tfor (let i = 0, n = vertices.length; i < n; i++) {\n\t\t\t\tconst start = vertices[i]\n\t\t\t\tconst end = vertices[(i + 1) % n]\n\t\t\t\tthis._edges.push(new Edge2d({ start, end }))\n\t\t\t}\n\t\t}\n\n\t\treturn this._edges\n\t}\n\n\tgetVertices() {\n\t\t// Perimeter of the ellipse\n\t\tconst w = Math.max(1, this._w)\n\t\tconst h = Math.max(1, this._h)\n\t\tconst cx = w / 2\n\t\tconst cy = h / 2\n\t\tconst q = Math.pow(cx - cy, 2) / Math.pow(cx + cy, 2)\n\t\tconst p = PI * (cx + cy) * (1 + (3 * q) / (10 + Math.sqrt(4 - 3 * q)))\n\t\t// Number of points\n\t\tconst len = getVerticesCountForArcLength(p)\n\t\t// Size of step\n\t\tconst step = PI2 / len\n\n\t\tconst a = Math.cos(step)\n\t\tconst b = Math.sin(step)\n\n\t\tlet sin = 0\n\t\tlet cos = 1\n\t\tlet ts = 0\n\t\tlet tc = 1\n\n\t\tconst vertices = Array(len)\n\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tvertices[i] = new Vec(clamp(cx + cx * cos, 0, w), clamp(cy + cy * sin, 0, h))\n\t\t\tts = b * cos + a * sin\n\t\t\ttc = a * cos - b * sin\n\t\t\tsin = ts\n\t\t\tcos = tc\n\t\t}\n\n\t\treturn vertices\n\t}\n\n\tnearestPoint(A: VecLike): Vec {\n\t\tlet nearest: Vec | undefined\n\t\tlet dist = Infinity\n\t\tlet d: number\n\t\tlet p: Vec\n\t\tfor (const edge of this.edges) {\n\t\t\tp = edge.nearestPoint(A)\n\t\t\td = Vec.Dist2(p, A)\n\t\t\tif (d < dist) {\n\t\t\t\tnearest = p\n\t\t\t\tdist = d\n\t\t\t}\n\t\t}\n\t\tif (!nearest) throw Error('nearest point not found')\n\t\treturn nearest\n\t}\n\n\thitTestLineSegment(A: VecLike, B: VecLike): boolean {\n\t\treturn this.edges.some((edge) => edge.hitTestLineSegment(A, B))\n\t}\n\n\tgetBounds() {\n\t\treturn new Box(0, 0, this._w, this._h)\n\t}\n\n\tgetLength(): number {\n\t\tconst { _w: w, _h: h } = this\n\t\tconst cx = w / 2\n\t\tconst cy = h / 2\n\t\tconst rx = Math.max(0, cx)\n\t\tconst ry = Math.max(0, cy)\n\t\treturn perimeterOfEllipse(rx, ry)\n\t}\n\n\tgetSvgPathData(first = false) {\n\t\tconst { _w: w, _h: h } = this\n\t\tconst cx = w / 2\n\t\tconst cy = h / 2\n\t\tconst rx = Math.max(0, cx)\n\t\tconst ry = Math.max(0, cy)\n\t\treturn `${first ? `M${cx - rx},${cy}` : ``} a${rx},${ry},0,1,1,${rx * 2},0a${rx},${ry},0,1,1,-${rx * 2},0`\n\t}\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3097, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omar/Desktop/studio/node_modules/%40tldraw/editor/src/lib/primitives/geometry/Point2d.ts"],"sourcesContent":["import { Vec, VecLike } from '../Vec'\nimport { Geometry2d, Geometry2dOptions } from './Geometry2d'\n\n/** @public */\nexport class Point2d extends Geometry2d {\n\tprivate _point: Vec\n\n\tconstructor(\n\t\tconfig: Omit<Geometry2dOptions, 'isClosed' | 'isFilled'> & { margin: number; point: Vec }\n\t) {\n\t\tsuper({ ...config, isClosed: true, isFilled: true })\n\t\tconst { point } = config\n\n\t\tthis._point = point\n\t}\n\n\tgetVertices() {\n\t\treturn [this._point]\n\t}\n\n\tnearestPoint(): Vec {\n\t\treturn this._point\n\t}\n\n\thitTestLineSegment(A: VecLike, B: VecLike, margin: number): boolean {\n\t\treturn Vec.DistanceToLineSegment(A, B, this._point) < margin\n\t}\n\n\tgetSvgPathData() {\n\t\tconst { _point: point } = this\n\t\treturn `M${point.toFixed()}`\n\t}\n}\n"],"names":[],"mappings":";;;AAAA,SAAS,WAAoB;AAC7B,SAAS,kBAAqC;;;AAGvC,MAAM,qNAAgB,aAAA,CAAW;IAC/B,OAAA;IAER,YACC,MAAA,CACC;QACD,KAAA,CAAM;YAAE,GAAG,MAAA;YAAQ,UAAU;YAAM,UAAU;QAAK,CAAC;QACnD,MAAM,EAAE,KAAA,CAAM,CAAA,GAAI;QAElB,IAAA,CAAK,MAAA,GAAS;IACf;IAEA,cAAc;QACb,OAAO;YAAC,IAAA,CAAK,MAAM;SAAA;IACpB;IAEA,eAAoB;QACnB,OAAO,IAAA,CAAK,MAAA;IACb;IAEA,mBAAmB,CAAA,EAAY,CAAA,EAAY,MAAA,EAAyB;QACnE,yLAAO,MAAA,CAAI,qBAAA,CAAsB,GAAG,GAAG,IAAA,CAAK,MAAM,IAAI;IACvD;IAEA,iBAAiB;QAChB,MAAM,EAAE,QAAQ,KAAA,CAAM,CAAA,GAAI,IAAA;QAC1B,OAAO,CAAA,CAAA,EAAI,MAAM,OAAA,CAAQ,CAAC,EAAA;IAC3B;AACD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 3139, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omar/Desktop/studio/node_modules/%40tldraw/editor/src/lib/primitives/geometry/Stadium2d.ts"],"sourcesContent":["import { Box } from '../Box'\nimport { Vec, VecLike } from '../Vec'\nimport { PI } from '../utils'\nimport { Arc2d } from './Arc2d'\nimport { Edge2d } from './Edge2d'\nimport { Geometry2d, Geometry2dOptions } from './Geometry2d'\n\n/** @public */\nexport class Stadium2d extends Geometry2d {\n\tprivate _w: number\n\tprivate _h: number\n\tprivate _a: Arc2d\n\tprivate _b: Edge2d\n\tprivate _c: Arc2d\n\tprivate _d: Edge2d\n\n\tconstructor(\n\t\tpublic config: Omit<Geometry2dOptions, 'isClosed'> & {\n\t\t\twidth: number\n\t\t\theight: number\n\t\t}\n\t) {\n\t\tsuper({ ...config, isClosed: true })\n\t\tconst { width: w, height: h } = config\n\t\tthis._w = w\n\t\tthis._h = h\n\n\t\tif (h > w) {\n\t\t\tconst r = w / 2\n\t\t\tthis._a = new Arc2d({\n\t\t\t\tstart: new Vec(0, r),\n\t\t\t\tend: new Vec(w, r),\n\t\t\t\tcenter: new Vec(w / 2, r),\n\t\t\t\tsweepFlag: 1,\n\t\t\t\tlargeArcFlag: 1,\n\t\t\t})\n\t\t\tthis._b = new Edge2d({ start: new Vec(w, r), end: new Vec(w, h - r) })\n\t\t\tthis._c = new Arc2d({\n\t\t\t\tstart: new Vec(w, h - r),\n\t\t\t\tend: new Vec(0, h - r),\n\t\t\t\tcenter: new Vec(w / 2, h - r),\n\t\t\t\tsweepFlag: 1,\n\t\t\t\tlargeArcFlag: 1,\n\t\t\t})\n\t\t\tthis._d = new Edge2d({ start: new Vec(0, h - r), end: new Vec(0, r) })\n\t\t} else {\n\t\t\tconst r = h / 2\n\t\t\tthis._a = new Arc2d({\n\t\t\t\tstart: new Vec(r, h),\n\t\t\t\tend: new Vec(r, 0),\n\t\t\t\tcenter: new Vec(r, r),\n\t\t\t\tsweepFlag: 1,\n\t\t\t\tlargeArcFlag: 1,\n\t\t\t})\n\t\t\tthis._b = new Edge2d({ start: new Vec(r, 0), end: new Vec(w - r, 0) })\n\t\t\tthis._c = new Arc2d({\n\t\t\t\tstart: new Vec(w - r, 0),\n\t\t\t\tend: new Vec(w - r, h),\n\t\t\t\tcenter: new Vec(w - r, r),\n\t\t\t\tsweepFlag: 1,\n\t\t\t\tlargeArcFlag: 1,\n\t\t\t})\n\t\t\tthis._d = new Edge2d({ start: new Vec(w - r, h), end: new Vec(r, h) })\n\t\t}\n\t}\n\n\tnearestPoint(A: VecLike): Vec {\n\t\tlet nearest: Vec | undefined\n\t\tlet dist = Infinity\n\t\tlet _d: number\n\t\tlet p: Vec\n\n\t\tconst { _a: a, _b: b, _c: c, _d: d } = this\n\t\tfor (const part of [a, b, c, d]) {\n\t\t\tp = part.nearestPoint(A)\n\t\t\t_d = Vec.Dist2(p, A)\n\t\t\tif (_d < dist) {\n\t\t\t\tnearest = p\n\t\t\t\tdist = _d\n\t\t\t}\n\t\t}\n\t\tif (!nearest) throw Error('nearest point not found')\n\t\treturn nearest\n\t}\n\n\thitTestLineSegment(A: VecLike, B: VecLike): boolean {\n\t\tconst { _a: a, _b: b, _c: c, _d: d } = this\n\t\treturn [a, b, c, d].some((edge) => edge.hitTestLineSegment(A, B))\n\t}\n\n\tgetVertices() {\n\t\tconst { _a: a, _b: b, _c: c, _d: d } = this\n\t\treturn [a, b, c, d].reduce<Vec[]>((a, p) => {\n\t\t\ta.push(...p.vertices)\n\t\t\treturn a\n\t\t}, [])\n\t}\n\n\tgetBounds() {\n\t\treturn new Box(0, 0, this._w, this._h)\n\t}\n\n\tgetLength() {\n\t\tconst { _h: h, _w: w } = this\n\t\tif (h > w) return (PI * (w / 2) + (h - w)) * 2\n\t\telse return (PI * (h / 2) + (w - h)) * 2\n\t}\n\n\tgetSvgPathData() {\n\t\tconst { _a: a, _b: b, _c: c, _d: d } = this\n\t\treturn [a, b, c, d].map((p, i) => p.getSvgPathData(i === 0)).join(' ') + ' Z'\n\t}\n}\n"],"names":["a"],"mappings":"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","ignoreList":[0],"debugId":null}}]
}