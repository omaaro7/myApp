{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omar/Desktop/studio/node_modules/tldraw/src/lib/utils/frames/frames.ts"],"sourcesContent":["import {\n\tBox,\n\tEditor,\n\tTLFrameShape,\n\tTLShape,\n\tTLShapeId,\n\tTLShapePartial,\n\tVec,\n\tcompact,\n\tkickoutOccludedShapes,\n} from '@tldraw/editor'\n\n/**\n * Remove a frame.\n *\n * @param editor - tldraw editor instance.\n * @param ids - Ids of the frames you wish to remove.\n *\n * @public\n */\nexport function removeFrame(editor: Editor, ids: TLShapeId[]) {\n\tconst frames = compact(\n\t\tids\n\t\t\t.map((id) => editor.getShape<TLFrameShape>(id))\n\t\t\t.filter((f) => f && editor.isShapeOfType<TLFrameShape>(f, 'frame'))\n\t)\n\tif (!frames.length) return\n\n\tconst allChildren: TLShapeId[] = []\n\teditor.run(() => {\n\t\tframes.map((frame) => {\n\t\t\tconst children = editor.getSortedChildIdsForParent(frame.id)\n\t\t\tif (children.length) {\n\t\t\t\tkickoutOccludedShapes(editor, children, {\n\t\t\t\t\tfilter: (s) => !frames.find((f) => f.id === s.id),\n\t\t\t\t})\n\t\t\t\tallChildren.push(...children)\n\t\t\t}\n\t\t})\n\t\teditor.setSelectedShapes(allChildren)\n\t\teditor.deleteShapes(ids)\n\t})\n}\n\n/** @internal */\nexport const DEFAULT_FRAME_PADDING = 50\n\nexport function getFrameChildrenBounds(\n\tchildren: (TLShape | undefined)[],\n\teditor: Editor,\n\topts: { padding: number } = { padding: DEFAULT_FRAME_PADDING }\n) {\n\tconst bounds = Box.FromPoints(\n\t\tchildren.flatMap((shape) => {\n\t\t\tif (!shape) return []\n\t\t\tconst geometry = editor.getShapeGeometry(shape.id)\n\t\t\tconst transform = editor.getShapeLocalTransform(shape)\n\t\t\treturn transform?.applyToPoints(geometry.vertices) ?? []\n\t\t})\n\t)\n\n\tconst padding = opts.padding ?? DEFAULT_FRAME_PADDING\n\tconst w = bounds.w + 2 * padding\n\tconst h = bounds.h + 2 * padding\n\tconst dx = padding - bounds.minX\n\tconst dy = padding - bounds.minY\n\n\treturn { w, h, dx, dy }\n}\n\n/**\n * Fit a frame to its content.\n *\n * @param id - Id of the frame you wish to fit to content.\n * @param editor - tlraw editor instance.\n * @param opts - Options for fitting the frame.\n *\n * @public\n */\nexport function fitFrameToContent(editor: Editor, id: TLShapeId, opts = {} as { padding: number }) {\n\tconst frame = editor.getShape<TLFrameShape>(id)\n\tif (!frame) return\n\n\tconst childIds = editor.getSortedChildIdsForParent(frame.id)\n\tconst children = compact(childIds.map((id) => editor.getShape(id)))\n\tif (!children.length) return\n\n\tconst { w, h, dx, dy } = getFrameChildrenBounds(children, editor, opts)\n\n\t// The shapes already perfectly fit the frame.\n\tif (dx === 0 && dy === 0 && frame.props.w === w && frame.props.h === h) return\n\n\tconst diff = new Vec(dx, dy).rot(frame.rotation)\n\teditor.run(() => {\n\t\tconst changes: TLShapePartial[] = childIds.map((child) => {\n\t\t\tconst shape = editor.getShape(child)!\n\t\t\treturn {\n\t\t\t\tid: shape.id,\n\t\t\t\ttype: shape.type,\n\t\t\t\tx: shape.x + dx,\n\t\t\t\ty: shape.y + dy,\n\t\t\t}\n\t\t})\n\n\t\tchanges.push({\n\t\t\tid: frame.id,\n\t\t\ttype: frame.type,\n\t\t\tx: frame.x - diff.x,\n\t\t\ty: frame.y - diff.y,\n\t\t\tprops: {\n\t\t\t\tw,\n\t\t\t\th,\n\t\t\t},\n\t\t})\n\n\t\teditor.updateShapes(changes)\n\t})\n}\n"],"names":["id"],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 99, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omar/Desktop/studio/node_modules/tldraw/src/lib/utils/clipboard.ts"],"sourcesContent":["import { getOwnProperty, objectMapFromEntries } from '@tldraw/editor'\nimport { TLCopyType } from './export/copyAs'\n\n// Browsers sanitize image formats to prevent security issues when pasting between applications. For\n// paste within an application though, some browsers (only chromium-based browsers as of Nov 2024)\n// support custom clipboard formats starting with \"web \" which are unsanitized. Our PNGs include a\n// special chunk which indicates they're at 2x resolution, but that normally gets stripped - so if\n// you copy as png from tldraw, then paste back in, the resulting image will be 2x the expected\n// size. To work around this, we write 2 version of the image to the clipboard - the normal png, and\n// the same blob with a custom mime type. When pasting, we check first for the custom mime type, and\n// if it's there, use that instead of the normal png.\nexport const TLDRAW_CUSTOM_PNG_MIME_TYPE = 'web image/vnd.tldraw+png' as const\n\nconst additionalClipboardWriteTypes = {\n\tpng: TLDRAW_CUSTOM_PNG_MIME_TYPE,\n} as const\nconst canonicalClipboardReadTypes = {\n\t[TLDRAW_CUSTOM_PNG_MIME_TYPE]: 'image/png',\n}\n\nexport function getAdditionalClipboardWriteType(format: TLCopyType): string | null {\n\treturn getOwnProperty<TLCopyType, string>(additionalClipboardWriteTypes, format) ?? null\n}\nexport function getCanonicalClipboardReadType(mimeType: string): string {\n\treturn getOwnProperty(canonicalClipboardReadTypes, mimeType) ?? mimeType\n}\n\nexport function doesClipboardSupportType(mimeType: string): boolean {\n\treturn (\n\t\ttypeof ClipboardItem !== 'undefined' &&\n\t\t'supports' in ClipboardItem &&\n\t\t(ClipboardItem.supports as (type: string) => boolean)(mimeType)\n\t)\n}\n\nexport function clipboardWrite(types: Record<string, Promise<Blob>>): Promise<void> {\n\t// Note:  it's important that this function itself isn't async and doesn't really use promises -\n\t// we need to create the relevant `ClipboardItem`s and call navigator.clipboard.write\n\t// synchronously to make sure safari knows that the user _wants_ to copy See\n\t// https://bugs.webkit.org/show_bug.cgi?id=222262\n\n\tconst entries = Object.entries(types)\n\n\t// clipboard.write will swallow errors if any of the promises reject. we log them here so we can\n\t// understand what might have gone wrong.\n\tfor (const [_, promise] of entries) promise.catch((err) => console.error(err))\n\n\treturn navigator.clipboard.write([new ClipboardItem(types)]).catch((err) => {\n\t\t// Firefox will fail with the above if `dom.events.asyncClipboard.clipboardItem` is enabled.\n\t\t// See <https://github.com/tldraw/tldraw/issues/1325>\n\t\tconsole.error(err)\n\n\t\treturn Promise.all(\n\t\t\tentries.map(async ([type, promise]) => {\n\t\t\t\treturn [type, await promise] as const\n\t\t\t})\n\t\t).then((entries) => {\n\t\t\tconst resolvedTypes = objectMapFromEntries(entries)\n\t\t\treturn navigator.clipboard.write([new ClipboardItem(resolvedTypes)])\n\t\t})\n\t})\n}\n"],"names":["entries"],"mappings":";;;;;;;AAAA,SAAS,gBAAgB,4BAA4B;;;AAW9C,MAAM,8BAA8B;AAE3C,MAAM,gCAAgC;IACrC,KAAK;AACN;AACA,MAAM,8BAA8B;IACnC,CAAC,2BAA2B,CAAA,EAAG;AAChC;AAEO,SAAS,gCAAgC,MAAA,EAAmC;IAClF,OAAO,2LAAA,EAAmC,+BAA+B,MAAM,KAAK;AACrF;AACO,SAAS,8BAA8B,QAAA,EAA0B;IACvE,iLAAO,iBAAA,EAAe,6BAA6B,QAAQ,KAAK;AACjE;AAEO,SAAS,yBAAyB,QAAA,EAA2B;IACnE,OACC,OAAO,kBAAkB,eACzB,cAAc,iBACb,cAAc,QAAA,CAAuC,QAAQ;AAEhE;AAEO,SAAS,eAAe,KAAA,EAAqD;IAMnF,MAAM,UAAU,OAAO,OAAA,CAAQ,KAAK;IAIpC,KAAA,MAAW,CAAC,GAAG,OAAO,CAAA,IAAK,QAAS,QAAQ,KAAA,CAAM,CAAC,MAAQ,QAAQ,KAAA,CAAM,GAAG,CAAC;IAE7E,OAAO,UAAU,SAAA,CAAU,KAAA,CAAM;QAAC,IAAI,cAAc,KAAK,CAAC;KAAC,EAAE,KAAA,CAAM,CAAC,QAAQ;QAG3E,QAAQ,KAAA,CAAM,GAAG;QAEjB,OAAO,QAAQ,GAAA,CACd,QAAQ,GAAA,CAAI,OAAO,CAAC,MAAM,OAAO,CAAA,KAAM;YACtC,OAAO;gBAAC;gBAAM,MAAM,OAAO;aAAA;QAC5B,CAAC,GACA,IAAA,CAAK,CAACA,aAAY;YACnB,MAAM,0LAAgB,uBAAA,EAAqBA,QAAO;YAClD,OAAO,UAAU,SAAA,CAAU,KAAA,CAAM;gBAAC,IAAI,cAAc,aAAa,CAAC;aAAC;QACpE,CAAC;IACF,CAAC;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 153, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omar/Desktop/studio/node_modules/tldraw/src/lib/utils/export/export.ts"],"sourcesContent":["import {\n\tEditor,\n\tFileHelpers,\n\tTLExportType,\n\tTLImageExportOptions,\n\tTLShapeId,\n\texhaustiveSwitchError,\n} from '@tldraw/editor'\n\nasync function getSvgString(editor: Editor, ids: TLShapeId[], opts: TLImageExportOptions) {\n\tconst svg = await editor.getSvgString(ids, opts)\n\tif (!svg) {\n\t\tthrow new Error('Could not construct SVG.')\n\t}\n\treturn svg\n}\n\nexport async function exportToString(\n\teditor: Editor,\n\tids: TLShapeId[],\n\tformat: 'svg' | 'json',\n\topts: TLImageExportOptions = {}\n) {\n\tswitch (format) {\n\t\tcase 'svg': {\n\t\t\treturn (await getSvgString(editor, ids, opts))?.svg\n\t\t}\n\t\tcase 'json': {\n\t\t\tconst data = await editor.resolveAssetsInContent(editor.getContentFromCurrentPage(ids))\n\t\t\treturn JSON.stringify(data)\n\t\t}\n\t\tdefault: {\n\t\t\texhaustiveSwitchError(format)\n\t\t}\n\t}\n}\n\n/**\n * Export the given shapes as a blob.\n * @param editor - The editor instance.\n * @param ids - The ids of the shapes to export.\n * @param format - The format to export as.\n * @param opts - Rendering options.\n * @returns A promise that resolves to a blob.\n * @deprecated Use {@link @tldraw/editor#Editor.toImage} instead.\n * @public\n */\nexport async function exportToBlob({\n\teditor,\n\tids,\n\tformat,\n\topts = {},\n}: {\n\teditor: Editor\n\tids: TLShapeId[]\n\tformat: TLExportType\n\topts?: TLImageExportOptions\n}): Promise<Blob> {\n\tconst idsToUse = ids?.length ? ids : [...editor.getCurrentPageShapeIds()]\n\tswitch (format) {\n\t\tcase 'jpeg':\n\t\tcase 'png':\n\t\tcase 'webp':\n\t\tcase 'svg': {\n\t\t\treturn (await editor.toImage(idsToUse, { ...opts, format })).blob\n\t\t}\n\t\tdefault: {\n\t\t\texhaustiveSwitchError(format)\n\t\t}\n\t}\n}\n\nconst clipboardMimeTypesByFormat = {\n\tjpeg: 'image/jpeg',\n\tpng: 'image/png',\n\twebp: 'image/webp',\n\tsvg: 'text/plain',\n}\n\nexport function exportToImagePromiseForClipboard(\n\teditor: Editor,\n\tids: TLShapeId[],\n\topts: TLImageExportOptions = {}\n): { blobPromise: Promise<Blob>; mimeType: string } {\n\tconst idsToUse = ids?.length ? ids : [...editor.getCurrentPageShapeIds()]\n\tconst format = opts.format ?? 'png'\n\treturn {\n\t\tblobPromise: editor\n\t\t\t.toImage(idsToUse, opts)\n\t\t\t.then((result) =>\n\t\t\t\tFileHelpers.rewriteMimeType(result.blob, clipboardMimeTypesByFormat[format])\n\t\t\t),\n\t\tmimeType: clipboardMimeTypesByFormat[format],\n\t}\n}\n"],"names":[],"mappings":";;;;;AAAA;;;;AASA,eAAe,aAAa,MAAA,EAAgB,GAAA,EAAkB,IAAA,EAA4B;IACzF,MAAM,MAAM,MAAM,OAAO,YAAA,CAAa,KAAK,IAAI;IAC/C,IAAI,CAAC,KAAK;QACT,MAAM,IAAI,MAAM,0BAA0B;IAC3C;IACA,OAAO;AACR;AAEA,eAAsB,eACrB,MAAA,EACA,GAAA,EACA,MAAA,EACA,OAA6B,CAAC,CAAA,EAC7B;IACD,OAAQ,QAAQ;QACf,KAAK;YAAO;gBACX,OAAA,CAAQ,MAAM,aAAa,QAAQ,KAAK,IAAI,CAAA,GAAI;YACjD;QACA,KAAK;YAAQ;gBACZ,MAAM,OAAO,MAAM,OAAO,sBAAA,CAAuB,OAAO,yBAAA,CAA0B,GAAG,CAAC;gBACtF,OAAO,KAAK,SAAA,CAAU,IAAI;YAC3B;QACA;YAAS;gBACR,CAAA,GAAA,sKAAA,CAAA,wBAAA,EAAsB,MAAM;YAC7B;IACD;AACD;AAYA,eAAsB,aAAa,EAClC,MAAA,EACA,GAAA,EACA,MAAA,EACA,OAAO,CAAC,CAAA,EACT,EAKkB;IACjB,MAAM,WAAW,KAAK,SAAS,MAAM,CAAC;WAAG,OAAO,sBAAA,CAAuB,CAAC;KAAA;IACxE,OAAQ,QAAQ;QACf,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;YAAO;gBACX,OAAA,CAAQ,MAAM,OAAO,OAAA,CAAQ,UAAU;oBAAE,GAAG,IAAA;oBAAM;gBAAO,CAAC,CAAA,EAAG,IAAA;YAC9D;QACA;YAAS;gBACR,CAAA,GAAA,sKAAA,CAAA,wBAAA,EAAsB,MAAM;YAC7B;IACD;AACD;AAEA,MAAM,6BAA6B;IAClC,MAAM;IACN,KAAK;IACL,MAAM;IACN,KAAK;AACN;AAEO,SAAS,iCACf,MAAA,EACA,GAAA,EACA,OAA6B,CAAC,CAAA,EACqB;IACnD,MAAM,WAAW,KAAK,SAAS,MAAM,CAAC;WAAG,OAAO,sBAAA,CAAuB,CAAC;KAAA;IACxE,MAAM,SAAS,KAAK,MAAA,IAAU;IAC9B,OAAO;QACN,aAAa,OACX,OAAA,CAAQ,UAAU,IAAI,EACtB,IAAA,CAAK,CAAC,6KACN,cAAA,CAAY,eAAA,CAAgB,OAAO,IAAA,EAAM,0BAAA,CAA2B,MAAM,CAAC;QAE7E,UAAU,0BAAA,CAA2B,MAAM,CAAA;IAC5C;AACD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 231, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omar/Desktop/studio/node_modules/tldraw/src/lib/utils/export/copyAs.ts"],"sourcesContent":["import {\n\tEditor,\n\tFileHelpers,\n\tTLImageExportOptions,\n\tTLShapeId,\n\texhaustiveSwitchError,\n} from '@tldraw/editor'\nimport {\n\tclipboardWrite,\n\tdoesClipboardSupportType,\n\tgetAdditionalClipboardWriteType,\n} from '../clipboard'\nimport { exportToImagePromiseForClipboard } from './export'\n\n/** @public */\nexport type TLCopyType = 'svg' | 'png'\n\n/** @public */\nexport interface CopyAsOptions extends TLImageExportOptions {\n\t/** The format to copy as. */\n\tformat: TLCopyType\n}\n\n/**\n * Copy the given shapes to the clipboard.\n *\n * @param editor - The editor instance.\n * @param ids - The ids of the shapes to copy.\n * @param format - The format to copy as. Defaults to png.\n * @param opts - Options for the copy.\n *\n * @public\n */\nexport function copyAs(editor: Editor, ids: TLShapeId[], opts: CopyAsOptions): Promise<void>\n/**\n * @deprecated The format parameter is now part of the opts object.\n * @public\n */\nexport function copyAs(\n\teditor: Editor,\n\tids: TLShapeId[],\n\tformat: TLCopyType,\n\topts?: TLImageExportOptions & { format?: undefined }\n): Promise<void>\nexport function copyAs(\n\t...args:\n\t\t| [editor: Editor, ids: TLShapeId[], opts: TLImageExportOptions & { format: TLCopyType }]\n\t\t| [\n\t\t\t\teditor: Editor,\n\t\t\t\tids: TLShapeId[],\n\t\t\t\tformat: TLCopyType,\n\t\t\t\topts?: TLImageExportOptions & { format?: undefined },\n\t\t  ]\n) {\n\tconst [editor, ids, opts] =\n\t\ttypeof args[2] === 'string' ? [args[0], args[1], { ...args[3], format: args[2] }] : args\n\n\t// Note:  it's important that this function itself isn't async and doesn't really use promises -\n\t// we need to create the relevant `ClipboardItem`s and call navigator.clipboard.write\n\t// synchronously to make sure safari knows that the user _wants_ to copy See\n\t// https://bugs.webkit.org/show_bug.cgi?id=222262\n\n\tif (!navigator.clipboard) return Promise.reject(new Error('Copy not supported'))\n\tif (navigator.clipboard.write as any) {\n\t\tconst { blobPromise, mimeType } = exportToImagePromiseForClipboard(editor, ids, opts)\n\n\t\tconst types: Record<string, Promise<Blob>> = { [mimeType]: blobPromise }\n\t\tconst additionalMimeType = getAdditionalClipboardWriteType(opts.format)\n\t\tif (additionalMimeType && doesClipboardSupportType(additionalMimeType)) {\n\t\t\ttypes[additionalMimeType] = blobPromise.then((blob) =>\n\t\t\t\tFileHelpers.rewriteMimeType(blob, additionalMimeType)\n\t\t\t)\n\t\t}\n\n\t\treturn clipboardWrite(types)\n\t}\n\n\tswitch (opts.format) {\n\t\tcase 'svg': {\n\t\t\treturn fallbackWriteTextAsync(async () => {\n\t\t\t\tconst result = await editor.getSvgString(ids, opts)\n\n\t\t\t\tif (!result) throw new Error('Failed to copy')\n\t\t\t\treturn result.svg\n\t\t\t})\n\t\t}\n\n\t\tcase 'png':\n\t\t\tthrow new Error('Copy not supported')\n\t\tdefault:\n\t\t\texhaustiveSwitchError(opts.format)\n\t}\n}\n\nasync function fallbackWriteTextAsync(getText: () => Promise<string>) {\n\tawait navigator.clipboard?.writeText?.(await getText())\n}\n"],"names":[],"mappings":";;;AAAA;;;AAOA;AAKA,SAAS,wCAAwC;;;;AAgC1C,SAAS,OAAA,GACZ,IAAA,EAQF;IACD,MAAM,CAAC,QAAQ,KAAK,IAAI,CAAA,GACvB,OAAO,IAAA,CAAK,CAAC,CAAA,KAAM,WAAW;QAAC,IAAA,CAAK,CAAC,CAAA;QAAG,IAAA,CAAK,CAAC,CAAA;QAAG;YAAE,GAAG,IAAA,CAAK,CAAC,CAAA;YAAG,QAAQ,IAAA,CAAK,CAAC,CAAA;QAAE,CAAC;KAAA,GAAI;IAOrF,IAAI,CAAC,UAAU,SAAA,CAAW,CAAA,OAAO,QAAQ,MAAA,CAAO,IAAI,MAAM,oBAAoB,CAAC;IAC/E,IAAI,UAAU,SAAA,CAAU,KAAA,EAAc;QACrC,MAAM,EAAE,WAAA,EAAa,QAAA,CAAS,CAAA,qLAAI,mCAAA,EAAiC,QAAQ,KAAK,IAAI;QAEpF,MAAM,QAAuC;YAAE,CAAC,QAAQ,CAAA,EAAG;QAAY;QACvE,MAAM,gMAAqB,kCAAA,EAAgC,KAAK,MAAM;QACtE,IAAI,iMAAsB,2BAAA,EAAyB,kBAAkB,GAAG;YACvE,KAAA,CAAM,kBAAkB,CAAA,GAAI,YAAY,IAAA,CAAK,CAAC,2KAC7C,cAAA,CAAY,eAAA,CAAgB,MAAM,kBAAkB;QAEtD;QAEA,kLAAO,iBAAA,EAAe,KAAK;IAC5B;IAEA,OAAQ,KAAK,MAAA,EAAQ;QACpB,KAAK;YAAO;gBACX,OAAO,uBAAuB,YAAY;oBACzC,MAAM,SAAS,MAAM,OAAO,YAAA,CAAa,KAAK,IAAI;oBAElD,IAAI,CAAC,OAAQ,CAAA,MAAM,IAAI,MAAM,gBAAgB;oBAC7C,OAAO,OAAO,GAAA;gBACf,CAAC;YACF;QAEA,KAAK;YACJ,MAAM,IAAI,MAAM,oBAAoB;QACrC;YACC,CAAA,GAAA,sKAAA,CAAA,wBAAA,EAAsB,KAAK,MAAM;IACnC;AACD;AAEA,eAAe,uBAAuB,OAAA,EAAgC;IACrE,MAAM,UAAU,SAAA,EAAW,YAAY,MAAM,QAAQ,CAAC;AACvD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 289, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omar/Desktop/studio/node_modules/tldraw/src/lib/utils/export/exportAs.ts"],"sourcesContent":["import {\n\tEditor,\n\tsanitizeId,\n\tTLExportType,\n\tTLFrameShape,\n\tTLImageExportOptions,\n\tTLShapeId,\n} from '@tldraw/editor'\n\n/** @public */\nexport interface ExportAsOptions extends TLImageExportOptions {\n\t/** {@inheritdoc @tldraw/editor#TLImageExportOptions.format} */\n\tformat: TLExportType\n\t/** Name of the exported file. If undefined a predefined name, based on the selection, will be used. */\n\tname?: string\n}\n\n/**\n * Export the given shapes as files.\n *\n * @param editor - The editor instance.\n * @param ids - The ids of the shapes to export.\n * @param opts - Options for the export.\n *\n * @public\n */\nexport async function exportAs(\n\teditor: Editor,\n\tids: TLShapeId[],\n\topts: ExportAsOptions\n): Promise<void>\n/**\n * @deprecated The format & name parameters are now part of the opts object.\n * @public\n */\nexport async function exportAs(\n\teditor: Editor,\n\tids: TLShapeId[],\n\tformat?: TLExportType,\n\tname?: string,\n\topts?: TLImageExportOptions\n): Promise<void>\nexport async function exportAs(\n\t...args:\n\t\t| [\n\t\t\t\teditor: Editor,\n\t\t\t\tids: TLShapeId[],\n\t\t\t\topts: TLImageExportOptions & { format: TLExportType; name?: string },\n\t\t  ]\n\t\t| [\n\t\t\t\teditor: Editor,\n\t\t\t\tids: TLShapeId[],\n\t\t\t\tformat?: TLExportType,\n\t\t\t\tname?: string,\n\t\t\t\topts?: TLImageExportOptions,\n\t\t  ]\n) {\n\tconst [editor, ids, opts] =\n\t\ttypeof args[2] === 'object'\n\t\t\t? args\n\t\t\t: [args[0], args[1], { ...args[4], format: args[2] ?? 'png', name: args[3] }]\n\n\t// If we don't get name then use a predefined one\n\tlet name = opts.name\n\tif (!name) {\n\t\tname = `shapes at ${getTimestamp()}`\n\t\tif (ids.length === 1) {\n\t\t\tconst first = editor.getShape(ids[0])!\n\t\t\tif (editor.isShapeOfType<TLFrameShape>(first, 'frame')) {\n\t\t\t\tname = first.props.name || 'frame'\n\t\t\t} else {\n\t\t\t\tname = `${sanitizeId(first.id)} at ${getTimestamp()}`\n\t\t\t}\n\t\t}\n\t}\n\tname += `.${opts.format}`\n\n\tconst { blob } = await editor.toImage(ids, opts)\n\tconst file = new File([blob], name, { type: blob.type })\n\tdownloadFile(file)\n}\n\nfunction getTimestamp() {\n\tconst now = new Date()\n\n\tconst year = String(now.getFullYear()).slice(2)\n\tconst month = String(now.getMonth() + 1).padStart(2, '0')\n\tconst day = String(now.getDate()).padStart(2, '0')\n\tconst hours = String(now.getHours()).padStart(2, '0')\n\tconst minutes = String(now.getMinutes()).padStart(2, '0')\n\tconst seconds = String(now.getSeconds()).padStart(2, '0')\n\n\treturn `${year}-${month}-${day} ${hours}.${minutes}.${seconds}`\n}\n\n/** @internal */\nexport function downloadFile(file: File) {\n\tconst link = document.createElement('a')\n\tconst url = URL.createObjectURL(file)\n\tlink.href = url\n\tlink.download = file.name\n\tlink.click()\n\tURL.revokeObjectURL(url)\n}\n"],"names":[],"mappings":";;;;AAAA;;;AA0CA,eAAsB,SAAA,GAClB,IAAA,EAaF;IACD,MAAM,CAAC,QAAQ,KAAK,IAAI,CAAA,GACvB,OAAO,IAAA,CAAK,CAAC,CAAA,KAAM,WAChB,OACA;QAAC,IAAA,CAAK,CAAC,CAAA;QAAG,IAAA,CAAK,CAAC,CAAA;QAAG;YAAE,GAAG,IAAA,CAAK,CAAC,CAAA;YAAG,QAAQ,IAAA,CAAK,CAAC,CAAA,IAAK;YAAO,MAAM,IAAA,CAAK,CAAC,CAAA;QAAE,CAAC;KAAA;IAG9E,IAAI,OAAO,KAAK,IAAA;IAChB,IAAI,CAAC,MAAM;QACV,OAAO,CAAA,UAAA,EAAa,aAAa,CAAC,EAAA;QAClC,IAAI,IAAI,MAAA,KAAW,GAAG;YACrB,MAAM,QAAQ,OAAO,QAAA,CAAS,GAAA,CAAI,CAAC,CAAC;YACpC,IAAI,OAAO,aAAA,CAA4B,OAAO,OAAO,GAAG;gBACvD,OAAO,MAAM,KAAA,CAAM,IAAA,IAAQ;YAC5B,OAAO;gBACN,OAAO,0LAAG,aAAA,EAAW,MAAM,EAAE,CAAC,CAAA,IAAA,EAAO,aAAa,CAAC,EAAA;YACpD;QACD;IACD;IACA,QAAQ,CAAA,CAAA,EAAI,KAAK,MAAM,EAAA;IAEvB,MAAM,EAAE,IAAA,CAAK,CAAA,GAAI,MAAM,OAAO,OAAA,CAAQ,KAAK,IAAI;IAC/C,MAAM,OAAO,IAAI,KAAK;QAAC,IAAI;KAAA,EAAG,MAAM;QAAE,MAAM,KAAK,IAAA;IAAK,CAAC;IACvD,aAAa,IAAI;AAClB;AAEA,SAAS,eAAe;IACvB,MAAM,MAAM,aAAA,GAAA,IAAI,KAAK;IAErB,MAAM,OAAO,OAAO,IAAI,WAAA,CAAY,CAAC,EAAE,KAAA,CAAM,CAAC;IAC9C,MAAM,QAAQ,OAAO,IAAI,QAAA,CAAS,IAAI,CAAC,EAAE,QAAA,CAAS,GAAG,GAAG;IACxD,MAAM,MAAM,OAAO,IAAI,OAAA,CAAQ,CAAC,EAAE,QAAA,CAAS,GAAG,GAAG;IACjD,MAAM,QAAQ,OAAO,IAAI,QAAA,CAAS,CAAC,EAAE,QAAA,CAAS,GAAG,GAAG;IACpD,MAAM,UAAU,OAAO,IAAI,UAAA,CAAW,CAAC,EAAE,QAAA,CAAS,GAAG,GAAG;IACxD,MAAM,UAAU,OAAO,IAAI,UAAA,CAAW,CAAC,EAAE,QAAA,CAAS,GAAG,GAAG;IAExD,OAAO,GAAG,IAAI,CAAA,CAAA,EAAI,KAAK,CAAA,CAAA,EAAI,GAAG,CAAA,CAAA,EAAI,KAAK,CAAA,CAAA,EAAI,OAAO,CAAA,CAAA,EAAI,OAAO,EAAA;AAC9D;AAGO,SAAS,aAAa,IAAA,EAAY;IACxC,MAAM,OAAO,SAAS,aAAA,CAAc,GAAG;IACvC,MAAM,MAAM,IAAI,eAAA,CAAgB,IAAI;IACpC,KAAK,IAAA,GAAO;IACZ,KAAK,QAAA,GAAW,KAAK,IAAA;IACrB,KAAK,KAAA,CAAM;IACX,IAAI,eAAA,CAAgB,GAAG;AACxB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 353, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omar/Desktop/studio/node_modules/tldraw/src/lib/utils/assets/assets.ts"],"sourcesContent":["import { MediaHelpers, assertExists, clampToBrowserMaxCanvasSize } from '@tldraw/editor'\n\n/** @public */\nexport interface BoxWidthHeight {\n\tw: number\n\th: number\n}\n\n/**\n * Contains the size within the given box size\n *\n * @param originalSize - The size of the asset\n * @param containBoxSize - The container size\n * @returns Adjusted size\n * @public\n */\nexport function containBoxSize(\n\toriginalSize: BoxWidthHeight,\n\tcontainBoxSize: BoxWidthHeight\n): BoxWidthHeight {\n\tconst overByXScale = originalSize.w / containBoxSize.w\n\tconst overByYScale = originalSize.h / containBoxSize.h\n\n\tif (overByXScale <= 1 && overByYScale <= 1) {\n\t\treturn originalSize\n\t} else if (overByXScale > overByYScale) {\n\t\treturn {\n\t\t\tw: originalSize.w / overByXScale,\n\t\t\th: originalSize.h / overByXScale,\n\t\t}\n\t} else {\n\t\treturn {\n\t\t\tw: originalSize.w / overByYScale,\n\t\t\th: originalSize.h / overByYScale,\n\t\t}\n\t}\n}\n\n/**\n * Resize an image Blob to be smaller than it is currently.\n *\n * @example\n * ```ts\n * const image = await (await fetch('/image.jpg')).blob()\n * const size = await getImageSize(image)\n * const resizedImage = await downsizeImage(image, size.w / 2, size.h / 2, { type: \"image/jpeg\", quality: 0.85 })\n * ```\n *\n * @param image - The image Blob.\n * @param width - The desired width.\n * @param height - The desired height.\n * @param opts - Options for the image.\n * @public\n */\nexport async function downsizeImage(\n\tblob: Blob,\n\twidth: number,\n\theight: number,\n\topts = {} as { type?: string; quality?: number }\n): Promise<Blob> {\n\tconst { w, h, image } = await MediaHelpers.usingObjectURL(\n\t\tblob,\n\t\tMediaHelpers.getImageAndDimensions\n\t)\n\tconst { type = blob.type, quality = 0.85 } = opts\n\tconst [desiredWidth, desiredHeight] = clampToBrowserMaxCanvasSize(\n\t\tMath.min(width * 2, w),\n\t\tMath.min(height * 2, h)\n\t)\n\n\tconst canvas = document.createElement('canvas')\n\tcanvas.width = desiredWidth\n\tcanvas.height = desiredHeight\n\tconst ctx = assertExists(\n\t\tcanvas.getContext('2d', { willReadFrequently: true }),\n\t\t'Could not get canvas context'\n\t)\n\tctx.imageSmoothingEnabled = true\n\tctx.imageSmoothingQuality = 'high'\n\tctx.drawImage(image, 0, 0, desiredWidth, desiredHeight)\n\n\treturn new Promise((resolve, reject) => {\n\t\tcanvas.toBlob(\n\t\t\t(blob) => {\n\t\t\t\tif (blob) {\n\t\t\t\t\tresolve(blob)\n\t\t\t\t} else {\n\t\t\t\t\treject(new Error('Could not resize image'))\n\t\t\t\t}\n\t\t\t},\n\t\t\ttype,\n\t\t\tquality\n\t\t)\n\t})\n}\n"],"names":["containBoxSize","blob"],"mappings":";;;;AAAA,SAAS,cAAc,cAAc,mCAAmC;;;;;AAgBjE,SAAS,eACf,YAAA,EACAA,eAAAA,EACiB;IACjB,MAAM,eAAe,aAAa,CAAA,GAAIA,gBAAe,CAAA;IACrD,MAAM,eAAe,aAAa,CAAA,GAAIA,gBAAe,CAAA;IAErD,IAAI,gBAAgB,KAAK,gBAAgB,GAAG;QAC3C,OAAO;IACR,OAAA,IAAW,eAAe,cAAc;QACvC,OAAO;YACN,GAAG,aAAa,CAAA,GAAI;YACpB,GAAG,aAAa,CAAA,GAAI;QACrB;IACD,OAAO;QACN,OAAO;YACN,GAAG,aAAa,CAAA,GAAI;YACpB,GAAG,aAAa,CAAA,GAAI;QACrB;IACD;AACD;AAkBA,eAAsB,cACrB,IAAA,EACA,KAAA,EACA,MAAA,EACA,OAAO,CAAC,CAAA,EACQ;IAChB,MAAM,EAAE,CAAA,EAAG,CAAA,EAAG,KAAA,CAAM,CAAA,GAAI,mLAAM,gBAAA,CAAa,cAAA,CAC1C,oLACA,eAAA,CAAa,qBAAA;IAEd,MAAM,EAAE,OAAO,KAAK,IAAA,EAAM,UAAU,IAAA,CAAK,CAAA,GAAI;IAC7C,MAAM,CAAC,cAAc,aAAa,CAAA,IAAI,+NAAA,EACrC,KAAK,GAAA,CAAI,QAAQ,GAAG,CAAC,GACrB,KAAK,GAAA,CAAI,SAAS,GAAG,CAAC;IAGvB,MAAM,SAAS,SAAS,aAAA,CAAc,QAAQ;IAC9C,OAAO,KAAA,GAAQ;IACf,OAAO,MAAA,GAAS;IAChB,MAAM,iLAAM,eAAA,EACX,OAAO,UAAA,CAAW,MAAM;QAAE,oBAAoB;IAAK,CAAC,GACpD;IAED,IAAI,qBAAA,GAAwB;IAC5B,IAAI,qBAAA,GAAwB;IAC5B,IAAI,SAAA,CAAU,OAAO,GAAG,GAAG,cAAc,aAAa;IAEtD,OAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;QACvC,OAAO,MAAA,CACN,CAACC,UAAS;YACT,IAAIA,OAAM;gBACT,QAAQA,KAAI;YACb,OAAO;gBACN,OAAO,IAAI,MAAM,wBAAwB,CAAC;YAC3C;QACD,GACA,MACA;IAEF,CAAC;AACF","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 410, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omar/Desktop/studio/node_modules/tldraw/src/lib/utils/excalidraw/putExcalidrawContent.ts"],"sourcesContent":["import {\n\tAssetRecordType,\n\tBox,\n\tEditor,\n\tTLArrowShapeArrowheadStyle,\n\tTLAssetId,\n\tTLContent,\n\tTLDefaultColorStyle,\n\tTLDefaultDashStyle,\n\tTLDefaultFillStyle,\n\tTLDefaultFontStyle,\n\tTLDefaultHorizontalAlignStyle,\n\tTLDefaultSizeStyle,\n\tTLDefaultTextAlignStyle,\n\tTLOpacityType,\n\tTLShapeId,\n\tVec,\n\tVecLike,\n\tZERO_INDEX_KEY,\n\tcompact,\n\tcreateBindingId,\n\tcreateShapeId,\n\tgetIndexAbove,\n\tgetIndices,\n\tisShapeId,\n\ttoRichText,\n} from '@tldraw/editor'\n\n/**\n * Put excalidraw clipboard content onto the current page.\n *\n * @param editor - The editor instance.\n * @param excalidrawClipboardContent - The excalidraw clipboard model.\n * @param point - The point at which to put the excalidraw content.\n * @public\n */\nexport async function putExcalidrawContent(\n\teditor: Editor,\n\texcalidrawClipboardContent: any,\n\tpoint?: VecLike\n) {\n\tconst { elements, files } = excalidrawClipboardContent\n\n\tconst tldrawContent: TLContent = {\n\t\tshapes: [],\n\t\tbindings: [],\n\t\trootShapeIds: [],\n\t\tassets: [],\n\t\tschema: editor.store.schema.serialize(),\n\t}\n\n\tconst groupShapeIdToChildren = new Map<string, TLShapeId[]>()\n\tconst rotatedElements = new Map<TLShapeId, number>()\n\n\tconst currentPageId = editor.getCurrentPageId()\n\n\tconst excElementIdsToTldrawShapeIds = new Map<string, TLShapeId>()\n\tconst rootShapeIds: TLShapeId[] = []\n\n\tconst skipIds = new Set<string>()\n\n\telements.forEach((element: any) => {\n\t\texcElementIdsToTldrawShapeIds.set(element.id, createShapeId())\n\n\t\tif (element.boundElements !== null) {\n\t\t\tfor (const boundElement of element.boundElements) {\n\t\t\t\tif (boundElement.type === 'text') {\n\t\t\t\t\tskipIds.add(boundElement.id)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t})\n\n\tlet index = ZERO_INDEX_KEY\n\n\tfor (const element of elements) {\n\t\tif (skipIds.has(element.id)) {\n\t\t\tcontinue\n\t\t}\n\n\t\tconst id = excElementIdsToTldrawShapeIds.get(element.id)!\n\n\t\tconst base = {\n\t\t\tid,\n\t\t\ttypeName: 'shape',\n\t\t\tparentId: currentPageId,\n\t\t\tindex,\n\t\t\tx: element.x,\n\t\t\ty: element.y,\n\t\t\trotation: 0,\n\t\t\tisLocked: element.locked,\n\t\t\topacity: getOpacity(element.opacity),\n\t\t\tmeta: {},\n\t\t} as const\n\n\t\tif (element.angle !== 0) {\n\t\t\trotatedElements.set(id, element.angle)\n\t\t}\n\n\t\tif (element.groupIds && element.groupIds.length > 0) {\n\t\t\tif (groupShapeIdToChildren.has(element.groupIds[0])) {\n\t\t\t\tgroupShapeIdToChildren.get(element.groupIds[0])?.push(id)\n\t\t\t} else {\n\t\t\t\tgroupShapeIdToChildren.set(element.groupIds[0], [id])\n\t\t\t}\n\t\t} else {\n\t\t\trootShapeIds.push(id)\n\t\t}\n\n\t\tswitch (element.type) {\n\t\t\tcase 'rectangle':\n\t\t\tcase 'ellipse':\n\t\t\tcase 'diamond': {\n\t\t\t\tlet text = ''\n\t\t\t\tlet align: TLDefaultHorizontalAlignStyle = 'middle'\n\n\t\t\t\tif (element.boundElements !== null) {\n\t\t\t\t\tfor (const boundElement of element.boundElements) {\n\t\t\t\t\t\tif (boundElement.type === 'text') {\n\t\t\t\t\t\t\tconst labelElement = elements.find((elm: any) => elm.id === boundElement.id)\n\t\t\t\t\t\t\tif (labelElement) {\n\t\t\t\t\t\t\t\ttext = labelElement.text\n\t\t\t\t\t\t\t\talign = textAlignToAlignTypes[labelElement.textAlign]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst colorToUse =\n\t\t\t\t\telement.backgroundColor === 'transparent' ? element.strokeColor : element.backgroundColor\n\n\t\t\t\ttldrawContent.shapes.push({\n\t\t\t\t\t...base,\n\t\t\t\t\ttype: 'geo',\n\t\t\t\t\tprops: {\n\t\t\t\t\t\tgeo: element.type,\n\t\t\t\t\t\turl: element.link ?? '',\n\t\t\t\t\t\tw: element.width,\n\t\t\t\t\t\th: element.height,\n\t\t\t\t\t\tsize: strokeWidthsToSizes[element.strokeWidth] ?? 'draw',\n\t\t\t\t\t\tcolor: colorsToColors[colorToUse] ?? 'black',\n\t\t\t\t\t\trichText: toRichText(text),\n\t\t\t\t\t\talign,\n\t\t\t\t\t\tdash: getDash(element),\n\t\t\t\t\t\tfill: getFill(element),\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'freedraw': {\n\t\t\t\ttldrawContent.shapes.push({\n\t\t\t\t\t...base,\n\t\t\t\t\ttype: 'draw',\n\t\t\t\t\tprops: {\n\t\t\t\t\t\tdash: getDash(element),\n\t\t\t\t\t\tsize: strokeWidthsToSizes[element.strokeWidth],\n\t\t\t\t\t\tcolor: colorsToColors[element.strokeColor] ?? 'black',\n\t\t\t\t\t\tsegments: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'free',\n\t\t\t\t\t\t\t\tpoints: element.points.map(([x, y, z = 0.5]: number[]) => ({\n\t\t\t\t\t\t\t\t\tx,\n\t\t\t\t\t\t\t\t\ty,\n\t\t\t\t\t\t\t\t\tz,\n\t\t\t\t\t\t\t\t})),\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'line': {\n\t\t\t\tconst points = element.points.slice()\n\t\t\t\tif (points.length < 2) {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tconst indices = getIndices(element.points.length)\n\n\t\t\t\ttldrawContent.shapes.push({\n\t\t\t\t\t...base,\n\t\t\t\t\ttype: 'line',\n\t\t\t\t\tprops: {\n\t\t\t\t\t\tdash: getDash(element),\n\t\t\t\t\t\tsize: strokeWidthsToSizes[element.strokeWidth],\n\t\t\t\t\t\tcolor: colorsToColors[element.strokeColor] ?? 'black',\n\t\t\t\t\t\tspline: element.roundness ? 'cubic' : 'line',\n\t\t\t\t\t\tpoints: {\n\t\t\t\t\t\t\t...Object.fromEntries(\n\t\t\t\t\t\t\t\telement.points.map(([x, y]: number[], i: number) => {\n\t\t\t\t\t\t\t\t\tconst index = indices[i]\n\t\t\t\t\t\t\t\t\treturn [index, { id: index, index, x, y }]\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'arrow': {\n\t\t\t\tlet text = ''\n\n\t\t\t\tif (element.boundElements !== null) {\n\t\t\t\t\tfor (const boundElement of element.boundElements) {\n\t\t\t\t\t\tif (boundElement.type === 'text') {\n\t\t\t\t\t\t\tconst labelElement = elements.find((elm: any) => elm.id === boundElement.id)\n\t\t\t\t\t\t\tif (labelElement) {\n\t\t\t\t\t\t\t\ttext = labelElement.text\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst start = element.points[0]\n\t\t\t\tconst end = element.points[element.points.length - 1]\n\n\t\t\t\tconst startTargetId = excElementIdsToTldrawShapeIds.get(element.startBinding?.elementId)\n\t\t\t\tconst endTargetId = excElementIdsToTldrawShapeIds.get(element.endBinding?.elementId)\n\n\t\t\t\ttldrawContent.shapes.push({\n\t\t\t\t\t...base,\n\t\t\t\t\ttype: 'arrow',\n\t\t\t\t\tprops: {\n\t\t\t\t\t\ttext,\n\t\t\t\t\t\tkind: element.elbowed ? 'elbow' : 'arc',\n\t\t\t\t\t\tbend: getBend(element, start, end),\n\t\t\t\t\t\tdash: getDash(element),\n\t\t\t\t\t\tsize: strokeWidthsToSizes[element.strokeWidth] ?? 'm',\n\t\t\t\t\t\tcolor: colorsToColors[element.strokeColor] ?? 'black',\n\t\t\t\t\t\tstart: { x: start[0], y: start[1] },\n\t\t\t\t\t\tend: { x: end[0], y: end[1] },\n\t\t\t\t\t\tarrowheadEnd: arrowheadsToArrowheadTypes[element.endArrowhead] ?? 'none',\n\t\t\t\t\t\tarrowheadStart: arrowheadsToArrowheadTypes[element.startArrowhead] ?? 'none',\n\t\t\t\t\t},\n\t\t\t\t})\n\n\t\t\t\tif (startTargetId) {\n\t\t\t\t\ttldrawContent.bindings!.push({\n\t\t\t\t\t\tid: createBindingId(),\n\t\t\t\t\t\ttypeName: 'binding',\n\t\t\t\t\t\ttype: 'arrow',\n\t\t\t\t\t\tfromId: id,\n\t\t\t\t\t\ttoId: startTargetId,\n\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\tterminal: 'start',\n\t\t\t\t\t\t\tnormalizedAnchor: { x: 0.5, y: 0.5 },\n\t\t\t\t\t\t\tisPrecise: false,\n\t\t\t\t\t\t\tisExact: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmeta: {},\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\tif (endTargetId) {\n\t\t\t\t\ttldrawContent.bindings!.push({\n\t\t\t\t\t\tid: createBindingId(),\n\t\t\t\t\t\ttypeName: 'binding',\n\t\t\t\t\t\ttype: 'arrow',\n\t\t\t\t\t\tfromId: id,\n\t\t\t\t\t\ttoId: endTargetId,\n\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\tterminal: 'end',\n\t\t\t\t\t\t\tnormalizedAnchor: { x: 0.5, y: 0.5 },\n\t\t\t\t\t\t\tisPrecise: false,\n\t\t\t\t\t\t\tisExact: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmeta: {},\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'text': {\n\t\t\t\tconst { size, scale } = getFontSizeAndScale(element.fontSize)\n\n\t\t\t\ttldrawContent.shapes.push({\n\t\t\t\t\t...base,\n\t\t\t\t\ttype: 'text',\n\t\t\t\t\tprops: {\n\t\t\t\t\t\tsize,\n\t\t\t\t\t\tscale,\n\t\t\t\t\t\tfont: fontFamilyToFontType[element.fontFamily] ?? 'draw',\n\t\t\t\t\t\tcolor: colorsToColors[element.strokeColor] ?? 'black',\n\t\t\t\t\t\trichText: toRichText(element.text),\n\t\t\t\t\t\ttextAlign: textAlignToTextAlignTypes[element.textAlign],\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\tbreak\n\t\t\t}\n\t\t\tcase 'image': {\n\t\t\t\tconst file = files[element.fileId]\n\t\t\t\tif (!file) break\n\n\t\t\t\tconst assetId: TLAssetId = AssetRecordType.createId()\n\t\t\t\ttldrawContent.assets.push({\n\t\t\t\t\tid: assetId,\n\t\t\t\t\ttypeName: 'asset',\n\t\t\t\t\ttype: 'image',\n\t\t\t\t\tprops: {\n\t\t\t\t\t\tw: element.width,\n\t\t\t\t\t\th: element.height,\n\t\t\t\t\t\tfileSize: file.size,\n\t\t\t\t\t\tname: element.id ?? 'Untitled',\n\t\t\t\t\t\tisAnimated: false,\n\t\t\t\t\t\tmimeType: file.mimeType,\n\t\t\t\t\t\tsrc: file.dataURL,\n\t\t\t\t\t},\n\t\t\t\t\tmeta: {},\n\t\t\t\t})\n\n\t\t\t\ttldrawContent.shapes.push({\n\t\t\t\t\t...base,\n\t\t\t\t\ttype: 'image',\n\t\t\t\t\tprops: {\n\t\t\t\t\t\tw: element.width,\n\t\t\t\t\t\th: element.height,\n\t\t\t\t\t\tassetId,\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\tindex = getIndexAbove(index)\n\t}\n\n\tconst p = point ?? (editor.inputs.shiftKey ? editor.inputs.currentPagePoint : undefined)\n\n\teditor.putContentOntoCurrentPage(tldrawContent, {\n\t\tpoint: p,\n\t\tselect: false,\n\t\tpreserveIds: true,\n\t})\n\tfor (const groupedShapeIds of groupShapeIdToChildren.values()) {\n\t\tif (groupedShapeIds.length > 1) {\n\t\t\teditor.groupShapes(groupedShapeIds)\n\t\t\tconst groupShape = editor.getShape(groupedShapeIds[0])\n\t\t\tif (groupShape?.parentId && isShapeId(groupShape.parentId)) {\n\t\t\t\trootShapeIds.push(groupShape.parentId)\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (const [id, angle] of rotatedElements) {\n\t\teditor.select(id)\n\t\teditor.rotateShapesBy([id], angle)\n\t}\n\n\tconst rootShapes = compact(rootShapeIds.map((id) => editor.getShape(id)))\n\tconst bounds = Box.Common(rootShapes.map((s) => editor.getShapePageBounds(s)!))\n\tconst viewPortCenter = editor.getViewportPageBounds().center\n\teditor.updateShapes(\n\t\trootShapes.map((s) => {\n\t\t\tconst delta = {\n\t\t\t\tx: (s.x ?? 0) - (bounds.x + bounds.w / 2),\n\t\t\t\ty: (s.y ?? 0) - (bounds.y + bounds.h / 2),\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tid: s.id,\n\t\t\t\ttype: s.type,\n\t\t\t\tx: viewPortCenter.x + delta.x,\n\t\t\t\ty: viewPortCenter.y + delta.y,\n\t\t\t}\n\t\t})\n\t)\n\teditor.setSelectedShapes(rootShapeIds)\n}\n\n/* --------------- Translating Helpers --------_------ */\n\nconst getOpacity = (opacity: number): TLOpacityType => {\n\tconst t = opacity / 100\n\tif (t < 0.2) {\n\t\treturn 0.1\n\t} else if (t < 0.4) {\n\t\treturn 0.25\n\t} else if (t < 0.6) {\n\t\treturn 0.5\n\t} else if (t < 0.8) {\n\t\treturn 0.75\n\t}\n\n\treturn 1\n}\n\nconst strokeWidthsToSizes: Record<number, TLDefaultSizeStyle> = {\n\t1: 's',\n\t2: 'm',\n\t3: 'l',\n\t4: 'xl',\n}\n\nconst fontSizesToSizes: Record<number, TLDefaultSizeStyle> = {\n\t16: 's',\n\t20: 'm',\n\t28: 'l',\n\t36: 'xl',\n}\n\nfunction getFontSizeAndScale(fontSize: number): { size: TLDefaultSizeStyle; scale: number } {\n\tconst size = fontSizesToSizes[fontSize]\n\tif (size) {\n\t\treturn { size, scale: 1 }\n\t}\n\tif (fontSize < 16) {\n\t\treturn { size: 's', scale: fontSize / 16 }\n\t}\n\tif (fontSize > 36) {\n\t\treturn { size: 'xl', scale: fontSize / 36 }\n\t}\n\treturn { size: 'm', scale: 1 }\n}\n\nconst fontFamilyToFontType: Record<number, TLDefaultFontStyle> = {\n\t1: 'draw',\n\t2: 'sans',\n\t3: 'mono',\n}\n\nconst oc = {\n\tgray: ['#f8f9fa', '#e9ecef', '#ced4da', '#868e96', '#343a40'],\n\tred: ['#fff5f5', '#ffc9c9', '#ff8787', '#fa5252', '#e03131'],\n\tpink: ['#fff0f6', '#fcc2d7', '#f783ac', '#e64980', '#c2255c'],\n\tgrape: ['#f8f0fc', '#eebefa', '#da77f2', '#be4bdb', '#9c36b5'],\n\tviolet: ['#f3f0ff', '#d0bfff', '#9775fa', '#7950f2', '#6741d9'],\n\tindigo: ['#edf2ff', '#bac8ff', '#748ffc', '#4c6ef5', '#3b5bdb'],\n\tblue: ['#e7f5ff', '#a5d8ff', '#4dabf7', '#228be6', '#1971c2'],\n\tcyan: ['#e3fafc', '#99e9f2', '#3bc9db', '#15aabf', '#0c8599'],\n\tteal: ['#e6fcf5', '#96f2d7', '#38d9a9', '#12b886', '#099268'],\n\tgreen: ['#ebfbee', '#b2f2bb', '#69db7c', '#40c057', '#2f9e44'],\n\tlime: ['#f4fce3', '#d8f5a2', '#a9e34b', '#82c91e', '#66a80f'],\n\tyellow: ['#fff9db', '#ffec99', '#ffd43b', '#fab005', '#f08c00'],\n\torange: ['#fff4e6', '#ffd8a8', '#ffa94d', '#fd7e14', '#e8590c'],\n}\n\nfunction mapExcalidrawColorToTldrawColors(\n\texcalidrawColor: keyof typeof oc,\n\tlight: TLDefaultColorStyle,\n\tdark: TLDefaultColorStyle\n) {\n\tconst colors = [0, 1, 2, 3, 4].map((index) => oc[excalidrawColor][index])\n\treturn Object.fromEntries(colors.map((c, i) => [c, i < 3 ? light : dark]))\n}\n\nconst colorsToColors: Record<string, TLDefaultColorStyle> = {\n\t...mapExcalidrawColorToTldrawColors('gray', 'grey', 'black'),\n\t...mapExcalidrawColorToTldrawColors('red', 'light-red', 'red'),\n\t...mapExcalidrawColorToTldrawColors('pink', 'light-red', 'red'),\n\t...mapExcalidrawColorToTldrawColors('grape', 'light-violet', 'violet'),\n\t...mapExcalidrawColorToTldrawColors('blue', 'light-blue', 'blue'),\n\t...mapExcalidrawColorToTldrawColors('cyan', 'light-blue', 'blue'),\n\t...mapExcalidrawColorToTldrawColors('teal', 'light-green', 'green'),\n\t...mapExcalidrawColorToTldrawColors('green', 'light-green', 'green'),\n\t...mapExcalidrawColorToTldrawColors('yellow', 'yellow', 'orange'),\n\t...mapExcalidrawColorToTldrawColors('orange', 'yellow', 'orange'),\n\t'#ffffff': 'white',\n\t'#000000': 'black',\n}\n\nconst strokeStylesToStrokeTypes: Record<string, TLDefaultDashStyle> = {\n\tsolid: 'draw',\n\tdashed: 'dashed',\n\tdotted: 'dotted',\n}\n\nconst fillStylesToFillType: Record<string, TLDefaultFillStyle> = {\n\t'cross-hatch': 'pattern',\n\thachure: 'pattern',\n\tsolid: 'solid',\n}\n\nconst textAlignToAlignTypes: Record<string, TLDefaultHorizontalAlignStyle> = {\n\tleft: 'start',\n\tcenter: 'middle',\n\tright: 'end',\n}\n\nconst textAlignToTextAlignTypes: Record<string, TLDefaultTextAlignStyle> = {\n\tleft: 'start',\n\tcenter: 'middle',\n\tright: 'end',\n}\n\nconst arrowheadsToArrowheadTypes: Record<string, TLArrowShapeArrowheadStyle> = {\n\tarrow: 'arrow',\n\tdot: 'dot',\n\ttriangle: 'triangle',\n\tbar: 'pipe',\n}\n\nfunction getBend(element: any, startPoint: any, endPoint: any) {\n\tlet bend = 0\n\tif (element.points.length > 2) {\n\t\tconst start = new Vec(startPoint[0], startPoint[1])\n\t\tconst end = new Vec(endPoint[0], endPoint[1])\n\t\tconst handle = new Vec(element.points[1][0], element.points[1][1])\n\t\tconst delta = Vec.Sub(end, start)\n\t\tconst v = Vec.Per(delta)\n\n\t\tconst med = Vec.Med(end, start)\n\t\tconst A = Vec.Sub(med, v)\n\t\tconst B = Vec.Add(med, v)\n\n\t\tconst point = Vec.NearestPointOnLineSegment(A, B, handle, false)\n\t\tbend = Vec.Dist(point, med)\n\t\tif (Vec.Clockwise(point, end, med)) bend *= -1\n\t}\n\treturn bend\n}\n\nconst getDash = (element: any): TLDefaultDashStyle => {\n\tlet dash: TLDefaultDashStyle = strokeStylesToStrokeTypes[element.strokeStyle] ?? 'draw'\n\tif (dash === 'draw' && element.roughness === 0) {\n\t\tdash = 'solid'\n\t}\n\treturn dash\n}\n\nconst getFill = (element: any): TLDefaultFillStyle => {\n\tif (element.backgroundColor === 'transparent') {\n\t\treturn 'none'\n\t}\n\treturn fillStylesToFillType[element.fillStyle] ?? 'solid'\n}\n"],"names":["index"],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 979, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omar/Desktop/studio/node_modules/tldraw/src/lib/utils/text/textDirection.ts"],"sourcesContent":["import { Extension } from '@tiptap/core'\n\n/**\n * @public\n */\nexport const TextDirection = Extension.create({\n\tname: 'textDirection',\n\n\taddGlobalAttributes() {\n\t\treturn [\n\t\t\t{\n\t\t\t\ttypes: ['heading', 'paragraph'],\n\t\t\t\tattributes: {\n\t\t\t\t\tdir: {\n\t\t\t\t\t\tdefault: 'auto',\n\t\t\t\t\t\tparseHTML: (element) => {\n\t\t\t\t\t\t\tconst dirAttribute = element.getAttribute('dir')\n\t\t\t\t\t\t\tif (dirAttribute && ['ltr', 'rtl', 'auto'].includes(dirAttribute)) {\n\t\t\t\t\t\t\t\treturn dirAttribute\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn 'auto'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\trenderHTML: (attributes) => {\n\t\t\t\t\t\t\treturn { dir: attributes.dir }\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t]\n\t},\n})\n"],"names":[],"mappings":";;;AAAA,SAAS,iBAAiB;;AAKnB,MAAM,qKAAgB,YAAA,CAAU,MAAA,CAAO;IAC7C,MAAM;IAEN,sBAAsB;QACrB,OAAO;YACN;gBACC,OAAO;oBAAC;oBAAW,WAAW;iBAAA;gBAC9B,YAAY;oBACX,KAAK;wBACJ,SAAS;wBACT,WAAW,CAAC,YAAY;4BACvB,MAAM,eAAe,QAAQ,YAAA,CAAa,KAAK;4BAC/C,IAAI,gBAAgB;gCAAC;gCAAO;gCAAO,MAAM;6BAAA,CAAE,QAAA,CAAS,YAAY,GAAG;gCAClE,OAAO;4BACR,OAAO;gCACN,OAAO;4BACR;wBACD;wBACA,YAAY,CAAC,eAAe;4BAC3B,OAAO;gCAAE,KAAK,WAAW,GAAA;4BAAI;wBAC9B;oBACD;gBACD;YACD;SACD;IACD;AACD,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1027, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omar/Desktop/studio/node_modules/tldraw/src/lib/utils/text/richText.ts"],"sourcesContent":["import {\n\tExtension,\n\tExtensions,\n\tgenerateHTML,\n\tgenerateJSON,\n\tgenerateText,\n\tJSONContent,\n} from '@tiptap/core'\nimport Code from '@tiptap/extension-code'\nimport Highlight from '@tiptap/extension-highlight'\nimport Link from '@tiptap/extension-link'\nimport { Node } from '@tiptap/pm/model'\nimport StarterKit from '@tiptap/starter-kit'\nimport {\n\tEditor,\n\tgetOwnProperty,\n\tRichTextFontVisitorState,\n\tTLFontFace,\n\tTLRichText,\n\tWeakCache,\n} from '@tldraw/editor'\nimport { DefaultFontFaces } from '../../shapes/shared/defaultFonts'\nimport { TextDirection } from './textDirection'\n\n/** @public */\nexport const KeyboardShiftEnterTweakExtension = Extension.create({\n\tname: 'keyboardShiftEnterHandler',\n\taddKeyboardShortcuts() {\n\t\treturn {\n\t\t\t// We don't support soft breaks, so we just use the default enter command.\n\t\t\t'Shift-Enter': ({ editor }) => editor.commands.enter(),\n\t\t}\n\t},\n})\n\n// We change the default Code to override what's in the StarterKit.\n// It allows for other attributes/extensions.\nCode.config.excludes = undefined\n\n// We want the highlighting to take precedence over bolding/italics/links\n// as far as rendering is concerned. Otherwise, the highlighting\n// looks broken up.\nHighlight.config.priority = 1100\n\n/**\n * Default extensions for the TipTap editor.\n *\n * @public\n */\nexport const tipTapDefaultExtensions: Extensions = [\n\tStarterKit.configure({\n\t\tblockquote: false,\n\t\tcodeBlock: false,\n\t\thorizontalRule: false,\n\t}),\n\tLink.configure({\n\t\topenOnClick: false,\n\t\tautolink: true,\n\t}),\n\tHighlight,\n\tKeyboardShiftEnterTweakExtension,\n\tTextDirection,\n]\n\n// todo: bust this if the editor changes, too\nconst htmlCache = new WeakCache<TLRichText, string>()\n\n/**\n * Renders HTML from a rich text string.\n *\n * @param editor - The editor instance.\n * @param richText - The rich text content.\n *\n * @public\n */\nexport function renderHtmlFromRichText(editor: Editor, richText: TLRichText) {\n\treturn htmlCache.get(richText, () => {\n\t\tconst tipTapExtensions =\n\t\t\teditor.getTextOptions().tipTapConfig?.extensions ?? tipTapDefaultExtensions\n\t\tconst html = generateHTML(richText as JSONContent, tipTapExtensions)\n\t\t// We replace empty paragraphs with a single line break to prevent the browser from collapsing them.\n\t\treturn html.replaceAll('<p dir=\"auto\"></p>', '<p><br /></p>') ?? ''\n\t})\n}\n\n/**\n * Renders HTML from a rich text string for measurement.\n * @param editor - The editor instance.\n * @param richText - The rich text content.\n *\n *\n * @public\n */\nexport function renderHtmlFromRichTextForMeasurement(editor: Editor, richText: TLRichText) {\n\tconst html = renderHtmlFromRichText(editor, richText)\n\treturn `<div class=\"tl-rich-text\">${html}</div>`\n}\n\n// A weak cache used to store plaintext that's been extracted from rich text.\nconst plainTextFromRichTextCache = new WeakCache<TLRichText, string>()\n\nexport function isEmptyRichText(richText: TLRichText) {\n\tif (richText.content.length === 1) {\n\t\tif (!(richText.content[0] as any).content) return true\n\t}\n\treturn false\n}\n\n/**\n * Renders plaintext from a rich text string.\n * @param editor - The editor instance.\n * @param richText - The rich text content.\n *\n *\n * @public\n */\nexport function renderPlaintextFromRichText(editor: Editor, richText: TLRichText) {\n\tif (isEmptyRichText(richText)) return ''\n\n\treturn plainTextFromRichTextCache.get(richText, () => {\n\t\tconst tipTapExtensions =\n\t\t\teditor.getTextOptions().tipTapConfig?.extensions ?? tipTapDefaultExtensions\n\t\treturn generateText(richText as JSONContent, tipTapExtensions, {\n\t\t\tblockSeparator: '\\n',\n\t\t})\n\t})\n}\n\n/**\n * Renders JSONContent from html.\n * @param editor - The editor instance.\n * @param richText - The rich text content.\n *\n *\n * @public\n */\nexport function renderRichTextFromHTML(editor: Editor, html: string): TLRichText {\n\tconst tipTapExtensions =\n\t\teditor.getTextOptions().tipTapConfig?.extensions ?? tipTapDefaultExtensions\n\treturn generateJSON(html, tipTapExtensions) as TLRichText\n}\n\n/** @public */\nexport function defaultAddFontsFromNode(\n\tnode: Node,\n\tstate: RichTextFontVisitorState,\n\taddFont: (font: TLFontFace) => void\n) {\n\tfor (const mark of node.marks) {\n\t\tif (mark.type.name === 'bold' && state.weight !== 'bold') {\n\t\t\tstate = { ...state, weight: 'bold' }\n\t\t}\n\t\tif (mark.type.name === 'italic' && state.style !== 'italic') {\n\t\t\tstate = { ...state, style: 'italic' }\n\t\t}\n\t\tif (mark.type.name === 'code' && state.family !== 'tldraw_mono') {\n\t\t\tstate = { ...state, family: 'tldraw_mono' }\n\t\t}\n\t}\n\n\tconst fontsForFamily = getOwnProperty(DefaultFontFaces, state.family)\n\tif (!fontsForFamily) return state\n\n\tconst fontsForStyle = getOwnProperty(fontsForFamily, state.style)\n\tif (!fontsForStyle) return state\n\n\tconst fontsForWeight = getOwnProperty(fontsForStyle, state.weight)\n\tif (!fontsForWeight) return state\n\n\taddFont(fontsForWeight)\n\n\treturn state\n}\n"],"names":[],"mappings":";;;;;;;;;;AAAA;AAQA,OAAO,UAAU;AACjB,OAAO,eAAe;AACtB,OAAO,UAAU;AAEjB,OAAO,gBAAgB;;;AACvB;AAQA,SAAS,wBAAwB;AACjC,SAAS,qBAAqB;;;;;;;;;AAGvB,MAAM,wLAAmC,YAAA,CAAU,MAAA,CAAO;IAChE,MAAM;IACN,uBAAuB;QACtB,OAAO;YAAA,0EAAA;YAEN,eAAe,CAAC,EAAE,MAAA,CAAO,CAAA,GAAM,OAAO,QAAA,CAAS,KAAA,CAAM;QACtD;IACD;AACD,CAAC;kKAID,UAAA,CAAK,MAAA,CAAO,QAAA,GAAW,KAAA;uKAKvB,UAAA,CAAU,MAAA,CAAO,QAAA,GAAW;AAOrB,MAAM,0BAAsC;mKAClD,UAAA,CAAW,SAAA,CAAU;QACpB,YAAY;QACZ,WAAW;QACX,gBAAgB;IACjB,CAAC;sKACD,UAAA,CAAK,SAAA,CAAU;QACd,aAAa;QACb,UAAU;IACX,CAAC;2KACD,UAAA;IACA;uLACA,gBAAA;CACD;AAGA,MAAM,YAAY,yKAAI,YAAA,CAA8B;AAU7C,SAAS,uBAAuB,MAAA,EAAgB,QAAA,EAAsB;IAC5E,OAAO,UAAU,GAAA,CAAI,UAAU,MAAM;QACpC,MAAM,mBACL,OAAO,cAAA,CAAe,EAAE,YAAA,EAAc,cAAc;QACrD,MAAM,OAAO,wKAAA,EAAa,UAAyB,gBAAgB;QAEnE,OAAO,KAAK,UAAA,CAAW,sBAAsB,eAAe,KAAK;IAClE,CAAC;AACF;AAUO,SAAS,qCAAqC,MAAA,EAAgB,QAAA,EAAsB;IAC1F,MAAM,OAAO,uBAAuB,QAAQ,QAAQ;IACpD,OAAO,CAAA,0BAAA,EAA6B,IAAI,CAAA,MAAA,CAAA;AACzC;AAGA,MAAM,6BAA6B,yKAAI,YAAA,CAA8B;AAE9D,SAAS,gBAAgB,QAAA,EAAsB;IACrD,IAAI,SAAS,OAAA,CAAQ,MAAA,KAAW,GAAG;QAClC,IAAI,CAAE,SAAS,OAAA,CAAQ,CAAC,CAAA,CAAU,OAAA,CAAS,CAAA,OAAO;IACnD;IACA,OAAO;AACR;AAUO,SAAS,4BAA4B,MAAA,EAAgB,QAAA,EAAsB;IACjF,IAAI,gBAAgB,QAAQ,EAAG,CAAA,OAAO;IAEtC,OAAO,2BAA2B,GAAA,CAAI,UAAU,MAAM;QACrD,MAAM,mBACL,OAAO,cAAA,CAAe,EAAE,YAAA,EAAc,cAAc;QACrD,OAAO,wKAAA,EAAa,UAAyB,kBAAkB;YAC9D,gBAAgB;QACjB,CAAC;IACF,CAAC;AACF;AAUO,SAAS,uBAAuB,MAAA,EAAgB,IAAA,EAA0B;IAChF,MAAM,mBACL,OAAO,cAAA,CAAe,EAAE,YAAA,EAAc,cAAc;IACrD,gKAAO,eAAA,EAAa,MAAM,gBAAgB;AAC3C;AAGO,SAAS,wBACf,IAAA,EACA,KAAA,EACA,OAAA,EACC;IACD,KAAA,MAAW,QAAQ,KAAK,KAAA,CAAO;QAC9B,IAAI,KAAK,IAAA,CAAK,IAAA,KAAS,UAAU,MAAM,MAAA,KAAW,QAAQ;YACzD,QAAQ;gBAAE,GAAG,KAAA;gBAAO,QAAQ;YAAO;QACpC;QACA,IAAI,KAAK,IAAA,CAAK,IAAA,KAAS,YAAY,MAAM,KAAA,KAAU,UAAU;YAC5D,QAAQ;gBAAE,GAAG,KAAA;gBAAO,OAAO;YAAS;QACrC;QACA,IAAI,KAAK,IAAA,CAAK,IAAA,KAAS,UAAU,MAAM,MAAA,KAAW,eAAe;YAChE,QAAQ;gBAAE,GAAG,KAAA;gBAAO,QAAQ;YAAc;QAC3C;IACD;IAEA,MAAM,2LAAiB,iBAAA,uLAAe,mBAAA,EAAkB,MAAM,MAAM;IACpE,IAAI,CAAC,eAAgB,CAAA,OAAO;IAE5B,MAAM,gBAAgB,2LAAA,EAAe,gBAAgB,MAAM,KAAK;IAChE,IAAI,CAAC,cAAe,CAAA,OAAO;IAE3B,MAAM,2LAAiB,iBAAA,EAAe,eAAe,MAAM,MAAM;IACjE,IAAI,CAAC,eAAgB,CAAA,OAAO;IAE5B,QAAQ,cAAc;IAEtB,OAAO;AACR","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1150, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omar/Desktop/studio/node_modules/tldraw/src/lib/utils/text/text.ts"],"sourcesContent":["import { INDENT } from '../../shapes/shared/TextHelpers'\n\nconst rtlRegex = /[\\u0590-\\u05FF\\u0600-\\u06FF\\u0750-\\u077F\\u08A0-\\u08FF\\uFB50-\\uFDFF\\uFE70-\\uFEFF]/\nexport function isRightToLeftLanguage(text: string) {\n\treturn rtlRegex.test(text)\n}\n\n/**\n * Replace any tabs with double spaces.\n * @param text - The text to replace tabs in.\n * @internal\n */\nfunction replaceTabsWithSpaces(text: string) {\n\treturn text.replace(/\\t/g, INDENT)\n}\n\n/**\n * Strip common minimum indentation from each line.\n * @param text - The text to strip.\n * @internal\n */\nfunction stripCommonMinimumIndentation(text: string): string {\n\t// Split the text into individual lines\n\tconst lines = text.split('\\n')\n\n\t// remove any leading lines that are only whitespace or newlines\n\twhile (lines[0] && lines[0].trim().length === 0) {\n\t\tlines.shift()\n\t}\n\n\tlet minIndentation = Infinity\n\tfor (const line of lines) {\n\t\tif (line.trim().length > 0) {\n\t\t\tconst indentation = line.length - line.trimStart().length\n\t\t\tminIndentation = Math.min(minIndentation, indentation)\n\t\t}\n\t}\n\n\treturn lines.map((line) => line.slice(minIndentation)).join('\\n')\n}\n\nconst COMMON_ENTITY_MAP = {\n\t'&amp;': '&',\n\t'&quot;': '\"',\n\t'&apos;': \"'\",\n\t'&#27;': \"'\",\n\t'&#34;': '\"',\n\t'&#38;': '&',\n\t'&#39;': \"'\",\n\t'&#8211;': '–',\n\t'&#8212;': '—',\n\t'&#8216;': '‘',\n\t'&#8217;': '’',\n\t'&#8220;': '“',\n\t'&#8221;': '”',\n\t'&#8230;': '…',\n}\nconst entityRegex = new RegExp(Object.keys(COMMON_ENTITY_MAP).join('|'), 'g')\n\n/**\n * Takes common HTML entities found in web page titles and converts them to regular characters.\n * @param text - The text to convert HTML entities.\n * @internal\n */\nexport function convertCommonTitleHTMLEntities(text: string) {\n\treturn text.replace(entityRegex, (m) => COMMON_ENTITY_MAP[m as keyof typeof COMMON_ENTITY_MAP])\n}\n\n/**\n * Strip trailing whitespace from each line and remove any trailing newlines.\n * @param text - The text to strip.\n * @internal\n */\nfunction stripTrailingWhitespace(text: string): string {\n\treturn text.replace(/[ \\t]+$/gm, '').replace(/\\n+$/, '')\n}\n\n/** @internal */\nexport function cleanupText(text: string) {\n\treturn stripTrailingWhitespace(stripCommonMinimumIndentation(replaceTabsWithSpaces(text)))\n}\n\n/** @public */\nexport const truncateStringWithEllipsis = (str: string, maxLength: number) => {\n\treturn str.length <= maxLength ? str : str.substring(0, maxLength - 3) + '...'\n}\n"],"names":[],"mappings":";;;;;;AAAA,SAAS,cAAc;;AAEvB,MAAM,WAAW;AACV,SAAS,sBAAsB,IAAA,EAAc;IACnD,OAAO,SAAS,IAAA,CAAK,IAAI;AAC1B;AAOA,SAAS,sBAAsB,IAAA,EAAc;IAC5C,OAAO,KAAK,OAAA,CAAQ,2LAAO,SAAM;AAClC;AAOA,SAAS,8BAA8B,IAAA,EAAsB;IAE5D,MAAM,QAAQ,KAAK,KAAA,CAAM,IAAI;IAG7B,MAAO,KAAA,CAAM,CAAC,CAAA,IAAK,KAAA,CAAM,CAAC,CAAA,CAAE,IAAA,CAAK,EAAE,MAAA,KAAW,EAAG;QAChD,MAAM,KAAA,CAAM;IACb;IAEA,IAAI,iBAAiB;IACrB,KAAA,MAAW,QAAQ,MAAO;QACzB,IAAI,KAAK,IAAA,CAAK,EAAE,MAAA,GAAS,GAAG;YAC3B,MAAM,cAAc,KAAK,MAAA,GAAS,KAAK,SAAA,CAAU,EAAE,MAAA;YACnD,iBAAiB,KAAK,GAAA,CAAI,gBAAgB,WAAW;QACtD;IACD;IAEA,OAAO,MAAM,GAAA,CAAI,CAAC,OAAS,KAAK,KAAA,CAAM,cAAc,CAAC,EAAE,IAAA,CAAK,IAAI;AACjE;AAEA,MAAM,oBAAoB;IACzB,SAAS;IACT,UAAU;IACV,UAAU;IACV,SAAS;IACT,SAAS;IACT,SAAS;IACT,SAAS;IACT,WAAW;IACX,WAAW;IACX,WAAW;IACX,WAAW;IACX,WAAW;IACX,WAAW;IACX,WAAW;AACZ;AACA,MAAM,cAAc,IAAI,OAAO,OAAO,IAAA,CAAK,iBAAiB,EAAE,IAAA,CAAK,GAAG,GAAG,GAAG;AAOrE,SAAS,+BAA+B,IAAA,EAAc;IAC5D,OAAO,KAAK,OAAA,CAAQ,aAAa,CAAC,IAAM,iBAAA,CAAkB,CAAmC,CAAC;AAC/F;AAOA,SAAS,wBAAwB,IAAA,EAAsB;IACtD,OAAO,KAAK,OAAA,CAAQ,aAAa,EAAE,EAAE,OAAA,CAAQ,QAAQ,EAAE;AACxD;AAGO,SAAS,YAAY,IAAA,EAAc;IACzC,OAAO,wBAAwB,8BAA8B,sBAAsB,IAAI,CAAC,CAAC;AAC1F;AAGO,MAAM,6BAA6B,CAAC,KAAa,cAAsB;IAC7E,OAAO,IAAI,MAAA,IAAU,YAAY,MAAM,IAAI,SAAA,CAAU,GAAG,YAAY,CAAC,IAAI;AAC1E","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1216, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omar/Desktop/studio/node_modules/tldraw/src/lib/utils/embeds/embeds.ts"],"sourcesContent":["import { safeParseUrl } from '@tldraw/editor'\nimport { TLEmbedDefinition } from '../../defaultEmbedDefinitions'\n\n// https://github.com/sindresorhus/escape-string-regexp/blob/main/index.js\nfunction escapeStringRegexp(string: string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string')\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&').replace(/-/g, '\\\\x2d')\n}\n\n/** @public */\nexport function matchEmbedUrl(definitions: readonly TLEmbedDefinition[], url: string) {\n\tconst parsed = safeParseUrl(url)\n\tif (!parsed) return\n\tconst host = parsed.host.replace('www.', '')\n\tfor (const localEmbedDef of definitions) {\n\t\tif (checkHostnames(localEmbedDef.hostnames, host)) {\n\t\t\tconst originalUrl = localEmbedDef.fromEmbedUrl(url)\n\t\t\tif (originalUrl) {\n\t\t\t\treturn {\n\t\t\t\t\tdefinition: localEmbedDef,\n\t\t\t\t\turl: originalUrl,\n\t\t\t\t\tembedUrl: url,\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nconst globlikeRegExp = (input: string) => {\n\treturn input\n\t\t.split('*')\n\t\t.map((str) => escapeStringRegexp(str))\n\t\t.join('.+')\n}\n\nconst checkHostnames = (hostnames: readonly string[], targetHostname: string) => {\n\treturn !!hostnames.find((hostname) => {\n\t\tconst re = new RegExp(globlikeRegExp(hostname))\n\t\treturn targetHostname.match(re)\n\t})\n}\n\n/** @public */\nexport function matchUrl(definitions: readonly TLEmbedDefinition[], url: string) {\n\tconst parsed = safeParseUrl(url)\n\tif (!parsed) return\n\tconst host = parsed.host.replace('www.', '')\n\tfor (const localEmbedDef of definitions) {\n\t\tif (checkHostnames(localEmbedDef.hostnames, host)) {\n\t\t\tconst embedUrl = localEmbedDef.toEmbedUrl(url)\n\n\t\t\tif (embedUrl) {\n\t\t\t\treturn {\n\t\t\t\t\tdefinition: localEmbedDef,\n\t\t\t\t\tembedUrl,\n\t\t\t\t\turl,\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/** @public */\nexport type TLEmbedResult =\n\t| {\n\t\t\tdefinition: TLEmbedDefinition\n\t\t\turl: string\n\t\t\tembedUrl: string\n\t  }\n\t| undefined\n\n/**\n * Tests whether an URL supports embedding and returns the result. If we encounter an error, we\n * return undefined.\n *\n * @param inputUrl - The URL to match\n * @public\n */\nexport function getEmbedInfo(\n\tdefinitions: readonly TLEmbedDefinition[],\n\tinputUrl: string\n): TLEmbedResult {\n\ttry {\n\t\treturn matchUrl(definitions, inputUrl) ?? matchEmbedUrl(definitions, inputUrl)\n\t} catch {\n\t\treturn undefined\n\t}\n}\n"],"names":[],"mappings":";;;;;AAAA,SAAS,oBAAoB;;;AAI7B,SAAS,mBAAmB,MAAA,EAAgB;IAC3C,IAAI,OAAO,WAAW,UAAU;QAC/B,MAAM,IAAI,UAAU,mBAAmB;IACxC;IAIA,OAAO,OAAO,OAAA,CAAQ,uBAAuB,MAAM,EAAE,OAAA,CAAQ,MAAM,OAAO;AAC3E;AAGO,SAAS,cAAc,WAAA,EAA2C,GAAA,EAAa;IACrF,MAAM,aAAS,kLAAA,EAAa,GAAG;IAC/B,IAAI,CAAC,OAAQ,CAAA;IACb,MAAM,OAAO,OAAO,IAAA,CAAK,OAAA,CAAQ,QAAQ,EAAE;IAC3C,KAAA,MAAW,iBAAiB,YAAa;QACxC,IAAI,eAAe,cAAc,SAAA,EAAW,IAAI,GAAG;YAClD,MAAM,cAAc,cAAc,YAAA,CAAa,GAAG;YAClD,IAAI,aAAa;gBAChB,OAAO;oBACN,YAAY;oBACZ,KAAK;oBACL,UAAU;gBACX;YACD;QACD;IACD;AACD;AAEA,MAAM,iBAAiB,CAAC,UAAkB;IACzC,OAAO,MACL,KAAA,CAAM,GAAG,EACT,GAAA,CAAI,CAAC,MAAQ,mBAAmB,GAAG,CAAC,EACpC,IAAA,CAAK,IAAI;AACZ;AAEA,MAAM,iBAAiB,CAAC,WAA8B,mBAA2B;IAChF,OAAO,CAAC,CAAC,UAAU,IAAA,CAAK,CAAC,aAAa;QACrC,MAAM,KAAK,IAAI,OAAO,eAAe,QAAQ,CAAC;QAC9C,OAAO,eAAe,KAAA,CAAM,EAAE;IAC/B,CAAC;AACF;AAGO,SAAS,SAAS,WAAA,EAA2C,GAAA,EAAa;IAChF,MAAM,UAAS,qLAAA,EAAa,GAAG;IAC/B,IAAI,CAAC,OAAQ,CAAA;IACb,MAAM,OAAO,OAAO,IAAA,CAAK,OAAA,CAAQ,QAAQ,EAAE;IAC3C,KAAA,MAAW,iBAAiB,YAAa;QACxC,IAAI,eAAe,cAAc,SAAA,EAAW,IAAI,GAAG;YAClD,MAAM,WAAW,cAAc,UAAA,CAAW,GAAG;YAE7C,IAAI,UAAU;gBACb,OAAO;oBACN,YAAY;oBACZ;oBACA;gBACD;YACD;QACD;IACD;AACD;AAkBO,SAAS,aACf,WAAA,EACA,QAAA,EACgB;IAChB,IAAI;QACH,OAAO,SAAS,aAAa,QAAQ,KAAK,cAAc,aAAa,QAAQ;IAC9E,EAAA,OAAQ;QACP,OAAO,KAAA;IACR;AACD","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1288, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omar/Desktop/studio/node_modules/tldraw/src/lib/utils/shapes/shapes.ts"],"sourcesContent":["import { Geometry2d, Group2d } from '@tldraw/editor'\n\n/**\n * Return all the text labels in a geometry.\n *\n * @param geometry - The geometry to get the text labels from.\n *\n * @public\n */\nexport function getTextLabels(geometry: Geometry2d) {\n\tif (geometry.isLabel) {\n\t\treturn [geometry]\n\t}\n\n\tif (geometry instanceof Group2d) {\n\t\treturn geometry.children.filter((child) => child.isLabel)\n\t}\n\n\treturn []\n}\n"],"names":[],"mappings":";;;;AAAA,SAAqB,eAAe;;AAS7B,SAAS,cAAc,QAAA,EAAsB;IACnD,IAAI,SAAS,OAAA,EAAS;QACrB,OAAO;YAAC,QAAQ;SAAA;IACjB;IAEA,IAAI,sNAAoB,UAAA,EAAS;QAChC,OAAO,SAAS,QAAA,CAAS,MAAA,CAAO,CAAC,QAAU,MAAM,OAAO;IACzD;IAEA,OAAO,CAAC,CAAA;AACT","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1313, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omar/Desktop/studio/node_modules/tldraw/src/lib/utils/static-assets/assetUrls.ts"],"sourcesContent":["import { RecursivePartial, getDefaultCdnBaseUrl } from '@tldraw/editor'\nimport { useMemo } from 'react'\n\n/** @public */\nexport interface TLEditorAssetUrls {\n\tfonts?: {\n\t\ttldraw_mono?: string\n\t\ttldraw_mono_italic?: string\n\t\ttldraw_mono_bold?: string\n\t\ttldraw_mono_italic_bold?: string\n\t\ttldraw_serif?: string\n\t\ttldraw_serif_italic?: string\n\t\ttldraw_serif_bold?: string\n\t\ttldraw_serif_italic_bold?: string\n\t\ttldraw_sans?: string\n\t\ttldraw_sans_italic?: string\n\t\ttldraw_sans_bold?: string\n\t\ttldraw_sans_italic_bold?: string\n\t\ttldraw_draw?: string\n\t\ttldraw_draw_italic?: string\n\t\ttldraw_draw_bold?: string\n\t\ttldraw_draw_italic_bold?: string\n\t\t[key: string]: string | undefined\n\t}\n}\n\n/** @public */\nexport let defaultEditorAssetUrls: TLEditorAssetUrls = {\n\tfonts: {\n\t\ttldraw_mono: `${getDefaultCdnBaseUrl()}/fonts/IBMPlexMono-Medium.woff2`,\n\t\ttldraw_mono_italic: `${getDefaultCdnBaseUrl()}/fonts/IBMPlexMono-MediumItalic.woff2`,\n\t\ttldraw_mono_bold: `${getDefaultCdnBaseUrl()}/fonts/IBMPlexMono-Bold.woff2`,\n\t\ttldraw_mono_italic_bold: `${getDefaultCdnBaseUrl()}/fonts/IBMPlexMono-BoldItalic.woff2`,\n\t\ttldraw_serif: `${getDefaultCdnBaseUrl()}/fonts/IBMPlexSerif-Medium.woff2`,\n\t\ttldraw_serif_italic: `${getDefaultCdnBaseUrl()}/fonts/IBMPlexSerif-MediumItalic.woff2`,\n\t\ttldraw_serif_bold: `${getDefaultCdnBaseUrl()}/fonts/IBMPlexSerif-Bold.woff2`,\n\t\ttldraw_serif_italic_bold: `${getDefaultCdnBaseUrl()}/fonts/IBMPlexSerif-BoldItalic.woff2`,\n\t\ttldraw_sans: `${getDefaultCdnBaseUrl()}/fonts/IBMPlexSans-Medium.woff2`,\n\t\ttldraw_sans_italic: `${getDefaultCdnBaseUrl()}/fonts/IBMPlexSans-MediumItalic.woff2`,\n\t\ttldraw_sans_bold: `${getDefaultCdnBaseUrl()}/fonts/IBMPlexSans-Bold.woff2`,\n\t\ttldraw_sans_italic_bold: `${getDefaultCdnBaseUrl()}/fonts/IBMPlexSans-BoldItalic.woff2`,\n\t\ttldraw_draw: `${getDefaultCdnBaseUrl()}/fonts/Shantell_Sans-Informal_Regular.woff2`,\n\t\ttldraw_draw_italic: `${getDefaultCdnBaseUrl()}/fonts/Shantell_Sans-Informal_Regular_Italic.woff2`,\n\t\ttldraw_draw_bold: `${getDefaultCdnBaseUrl()}/fonts/Shantell_Sans-Informal_Bold.woff2`,\n\t\ttldraw_draw_italic_bold: `${getDefaultCdnBaseUrl()}/fonts/Shantell_Sans-Informal_Bold_Italic.woff2`,\n\t},\n}\n\n/** @internal */\nexport function setDefaultEditorAssetUrls(assetUrls: TLEditorAssetUrls) {\n\tdefaultEditorAssetUrls = assetUrls\n}\n\n/** @internal */\nexport function useDefaultEditorAssetsWithOverrides(\n\toverrides?: RecursivePartial<TLEditorAssetUrls>\n): TLEditorAssetUrls {\n\treturn useMemo(() => {\n\t\tif (!overrides) return defaultEditorAssetUrls\n\n\t\treturn {\n\t\t\tfonts: { ...defaultEditorAssetUrls.fonts, ...overrides?.fonts },\n\t\t}\n\t}, [overrides])\n}\n"],"names":[],"mappings":";;;;;AAAA,SAA2B,4BAA4B;;AACvD,SAAS,eAAe;;;AA0BjB,IAAI,yBAA4C;IACtD,OAAO;QACN,aAAa,uLAAG,uBAAA,CAAqB,CAAC,EAAA,+BAAA,CAAA;QACtC,oBAAoB,GAAG,2MAAA,CAAqB,CAAC,EAAA,qCAAA,CAAA;QAC7C,kBAAkB,OAAG,uMAAA,CAAqB,CAAC,EAAA,6BAAA,CAAA;QAC3C,yBAAyB,uLAAG,uBAAA,CAAqB,CAAC,EAAA,mCAAA,CAAA;QAClD,cAAc,uLAAG,uBAAA,CAAqB,CAAC,EAAA,gCAAA,CAAA;QACvC,qBAAqB,IAAG,0MAAA,CAAqB,CAAC,EAAA,sCAAA,CAAA;QAC9C,mBAAmB,uLAAG,uBAAA,CAAqB,CAAC,EAAA,8BAAA,CAAA;QAC5C,0BAA0B,uLAAG,uBAAA,CAAqB,CAAC,EAAA,oCAAA,CAAA;QACnD,aAAa,IAAG,0MAAA,CAAqB,CAAC,EAAA,+BAAA,CAAA;QACtC,oBAAoB,uLAAG,uBAAA,CAAqB,CAAC,EAAA,qCAAA,CAAA;QAC7C,kBAAkB,uLAAG,uBAAA,CAAqB,CAAC,EAAA,6BAAA,CAAA;QAC3C,yBAAyB,uLAAG,uBAAA,CAAqB,CAAC,EAAA,mCAAA,CAAA;QAClD,aAAa,uLAAG,uBAAA,CAAqB,CAAC,EAAA,2CAAA,CAAA;QACtC,oBAAoB,GAAG,2MAAA,CAAqB,CAAC,EAAA,kDAAA,CAAA;QAC7C,kBAAkB,uLAAG,uBAAA,CAAqB,CAAC,EAAA,wCAAA,CAAA;QAC3C,yBAAyB,uLAAG,uBAAA,CAAqB,CAAC,EAAA,+CAAA,CAAA;IACnD;AACD;AAGO,SAAS,0BAA0B,SAAA,EAA8B;IACvE,yBAAyB;AAC1B;AAGO,SAAS,oCACf,SAAA,EACoB;IACpB,yKAAO,UAAA;uDAAQ,MAAM;YACpB,IAAI,CAAC,UAAW,CAAA,OAAO;YAEvB,OAAO;gBACN,OAAO;oBAAE,GAAG,uBAAuB,KAAA;oBAAO,GAAG,WAAW,KAAA;gBAAM;YAC/D;QACD;sDAAG;QAAC,SAAS;KAAC;AACf","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1369, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omar/Desktop/studio/node_modules/tldraw/src/lib/utils/assets/preload-font.ts"],"sourcesContent":["/** @public */\nexport interface TLTypeFace {\n\turl: string\n\tdisplay?: any // FontDisplay\n\tfeatureSettings?: string\n\tstretch?: string\n\tstyle?: string\n\tunicodeRange?: string\n\tvariant?: string\n\tweight?: string\n\tformat?: string\n}\n\n/** @public */\nexport async function preloadFont(id: string, font: TLTypeFace) {\n\tconst {\n\t\turl,\n\t\tstyle = 'normal',\n\t\tweight = '500',\n\t\tdisplay,\n\t\tfeatureSettings,\n\t\tstretch,\n\t\tunicodeRange,\n\t\tvariant,\n\t\tformat,\n\t} = font\n\n\tconst descriptors: FontFaceDescriptors = {\n\t\tstyle,\n\t\tweight,\n\t\tdisplay,\n\t\tfeatureSettings,\n\t\tstretch,\n\t\tunicodeRange,\n\t\t// @ts-expect-error why is this here\n\t\tvariant,\n\t}\n\n\tconst fontInstance = new FontFace(id, `url(${url})`, descriptors)\n\tawait fontInstance.load()\n\tdocument.fonts.add(fontInstance)\n\n\t// @ts-expect-error\n\tfontInstance.$$_url = url\n\n\t// @ts-expect-error\n\tfontInstance.$$_fontface = `\n@font-face {\n\tfont-family: ${fontInstance.family};\n\tfont-stretch: ${fontInstance.stretch};\n\tfont-weight: ${fontInstance.weight};\n\tfont-style: ${fontInstance.style};\n\tsrc: url(\"${url}\") format(\"${format}\")\n}`\n\n\treturn fontInstance\n}\n"],"names":[],"mappings":";;;AAcA,eAAsB,YAAY,EAAA,EAAY,IAAA,EAAkB;IAC/D,MAAM,EACL,GAAA,EACA,QAAQ,QAAA,EACR,SAAS,KAAA,EACT,OAAA,EACA,eAAA,EACA,OAAA,EACA,YAAA,EACA,OAAA,EACA,MAAA,EACD,GAAI;IAEJ,MAAM,cAAmC;QACxC;QACA;QACA;QACA;QACA;QACA;QAAA,oCAAA;QAEA;IACD;IAEA,MAAM,eAAe,IAAI,SAAS,IAAI,CAAA,IAAA,EAAO,GAAG,CAAA,CAAA,CAAA,EAAK,WAAW;IAChE,MAAM,aAAa,IAAA,CAAK;IACxB,SAAS,KAAA,CAAM,GAAA,CAAI,YAAY;IAG/B,aAAa,MAAA,GAAS;IAGtB,aAAa,WAAA,GAAc,CAAA;;cAAA,EAEZ,aAAa,MAAM,CAAA;eAAA,EAClB,aAAa,OAAO,CAAA;cAAA,EACrB,aAAa,MAAM,CAAA;aAAA,EACpB,aAAa,KAAK,CAAA;WAAA,EACpB,GAAG,CAAA,WAAA,EAAc,MAAM,CAAA;CAAA,CAAA;IAGnC,OAAO;AACR","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 1406, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omar/Desktop/studio/node_modules/tldraw/src/lib/utils/tldr/buildFromV1Document.ts"],"sourcesContent":["import {\n\tAssetRecordType,\n\tEditor,\n\tPageRecordType,\n\tTLArrowShape,\n\tTLArrowShapeArrowheadStyle,\n\tTLAsset,\n\tTLAssetId,\n\tTLDefaultColorStyle,\n\tTLDefaultDashStyle,\n\tTLDefaultFontStyle,\n\tTLDefaultHorizontalAlignStyle,\n\tTLDefaultSizeStyle,\n\tTLDefaultTextAlignStyle,\n\tTLDrawShape,\n\tTLGeoShape,\n\tTLImageShape,\n\tTLNoteShape,\n\tTLPageId,\n\tTLShapeId,\n\tTLTextShape,\n\tTLVideoShape,\n\tVec,\n\tVecModel,\n\tclamp,\n\tcreateShapeId,\n\tfetch,\n\tstructuredClone,\n\ttoRichText,\n} from '@tldraw/editor'\nimport { getArrowBindings } from '../../shapes/arrow/shared'\n\nconst TLDRAW_V1_VERSION = 15.5\n\n/** @internal */\nexport function buildFromV1Document(editor: Editor, _document: unknown) {\n\tlet document = _document as TLV1Document\n\teditor.run(() => {\n\t\tdocument = migrate(document, TLDRAW_V1_VERSION)\n\t\t// Cancel any interactions / states\n\t\teditor.cancel().cancel().cancel().cancel()\n\n\t\tconst firstPageId = editor.getPages()[0].id\n\n\t\t// Set the current page to the first page\n\t\teditor.setCurrentPage(firstPageId)\n\n\t\t// Delete all pages except first page\n\t\tfor (const page of editor.getPages().slice(1)) {\n\t\t\teditor.deletePage(page.id)\n\t\t}\n\n\t\t// Delete all of the shapes on the current page\n\t\teditor.selectAll()\n\t\teditor.deleteShapes(editor.getSelectedShapeIds())\n\n\t\t// Create assets\n\t\tconst v1AssetIdsToV2AssetIds = new Map<string, TLAssetId>()\n\n\t\tObject.values(document.assets ?? {}).forEach((v1Asset) => {\n\t\t\tswitch (v1Asset.type) {\n\t\t\t\tcase TLV1AssetType.Image: {\n\t\t\t\t\tconst assetId: TLAssetId = AssetRecordType.createId()\n\t\t\t\t\tv1AssetIdsToV2AssetIds.set(v1Asset.id, assetId)\n\t\t\t\t\tconst placeholderAsset: TLAsset = {\n\t\t\t\t\t\tid: assetId,\n\t\t\t\t\t\ttypeName: 'asset',\n\t\t\t\t\t\ttype: 'image',\n\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\tw: coerceDimension(v1Asset.size[0]),\n\t\t\t\t\t\t\th: coerceDimension(v1Asset.size[1]),\n\t\t\t\t\t\t\tname: v1Asset.fileName ?? 'Untitled',\n\t\t\t\t\t\t\tisAnimated: false,\n\t\t\t\t\t\t\tmimeType: null,\n\t\t\t\t\t\t\tsrc: v1Asset.src,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tmeta: {},\n\t\t\t\t\t}\n\t\t\t\t\teditor.createAssets([placeholderAsset])\n\t\t\t\t\ttryMigrateAsset(editor, placeholderAsset)\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcase TLV1AssetType.Video:\n\t\t\t\t\t{\n\t\t\t\t\t\tconst assetId: TLAssetId = AssetRecordType.createId()\n\t\t\t\t\t\tv1AssetIdsToV2AssetIds.set(v1Asset.id, assetId)\n\t\t\t\t\t\teditor.createAssets([\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tid: assetId,\n\t\t\t\t\t\t\t\ttypeName: 'asset',\n\t\t\t\t\t\t\t\ttype: 'video',\n\t\t\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\t\t\tw: coerceDimension(v1Asset.size[0]),\n\t\t\t\t\t\t\t\t\th: coerceDimension(v1Asset.size[1]),\n\t\t\t\t\t\t\t\t\tname: v1Asset.fileName ?? 'Untitled',\n\t\t\t\t\t\t\t\t\tisAnimated: true,\n\t\t\t\t\t\t\t\t\tmimeType: null,\n\t\t\t\t\t\t\t\t\tsrc: v1Asset.src,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tmeta: {},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t])\n\t\t\t\t\t}\n\t\t\t\t\tbreak\n\t\t\t}\n\t\t})\n\n\t\t// Create pages\n\n\t\tconst v1PageIdsToV2PageIds = new Map<string, TLPageId>()\n\n\t\tObject.values(document.pages ?? {})\n\t\t\t.sort((a, b) => ((a.childIndex ?? 1) < (b.childIndex ?? 1) ? -1 : 1))\n\t\t\t.forEach((v1Page, i) => {\n\t\t\t\tif (i === 0) {\n\t\t\t\t\tv1PageIdsToV2PageIds.set(v1Page.id, editor.getCurrentPageId())\n\t\t\t\t} else {\n\t\t\t\t\tconst pageId = PageRecordType.createId()\n\t\t\t\t\tv1PageIdsToV2PageIds.set(v1Page.id, pageId)\n\t\t\t\t\teditor.createPage({ name: v1Page.name ?? 'Page', id: pageId })\n\t\t\t\t}\n\t\t\t})\n\n\t\tObject.values(document.pages ?? {})\n\t\t\t.sort((a, b) => ((a.childIndex ?? 1) < (b.childIndex ?? 1) ? -1 : 1))\n\t\t\t.forEach((v1Page) => {\n\t\t\t\t// Set the current page id to the current page\n\t\t\t\teditor.setCurrentPage(v1PageIdsToV2PageIds.get(v1Page.id)!)\n\n\t\t\t\tconst v1ShapeIdsToV2ShapeIds = new Map<string, TLShapeId>()\n\t\t\t\tconst v1GroupShapeIdsToV1ChildIds = new Map<string, string[]>()\n\n\t\t\t\tconst v1Shapes = Object.values(v1Page.shapes ?? {})\n\t\t\t\t\t.sort((a, b) => (a.childIndex < b.childIndex ? -1 : 1))\n\t\t\t\t\t.slice(0, editor.options.maxShapesPerPage)\n\n\t\t\t\t// Groups only\n\t\t\t\tv1Shapes.forEach((v1Shape) => {\n\t\t\t\t\tif (v1Shape.type !== TLV1ShapeType.Group) return\n\n\t\t\t\t\tconst shapeId = createShapeId()\n\t\t\t\t\tv1ShapeIdsToV2ShapeIds.set(v1Shape.id, shapeId)\n\t\t\t\t\tv1GroupShapeIdsToV1ChildIds.set(v1Shape.id, [])\n\t\t\t\t})\n\n\t\t\t\tfunction decideNotToCreateShape(v1Shape: TLV1Shape) {\n\t\t\t\t\tv1ShapeIdsToV2ShapeIds.delete(v1Shape.id)\n\t\t\t\t\tconst v1GroupParent = v1GroupShapeIdsToV1ChildIds.has(v1Shape.parentId)\n\t\t\t\t\tif (v1GroupParent) {\n\t\t\t\t\t\tconst ids = v1GroupShapeIdsToV1ChildIds\n\t\t\t\t\t\t\t.get(v1Shape.parentId)!\n\t\t\t\t\t\t\t.filter((id) => id !== v1Shape.id)\n\t\t\t\t\t\tv1GroupShapeIdsToV1ChildIds.set(v1Shape.parentId, ids)\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Non-groups only\n\t\t\t\tv1Shapes.forEach((v1Shape) => {\n\t\t\t\t\t// Skip groups for now, we'll create groups via the app's API\n\t\t\t\t\tif (v1Shape.type === TLV1ShapeType.Group) {\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\n\t\t\t\t\tconst shapeId = createShapeId()\n\t\t\t\t\tv1ShapeIdsToV2ShapeIds.set(v1Shape.id, shapeId)\n\n\t\t\t\t\tif (v1Shape.parentId !== v1Page.id) {\n\t\t\t\t\t\t// If the parent is a group, then add the shape to the group's children\n\t\t\t\t\t\tif (v1GroupShapeIdsToV1ChildIds.has(v1Shape.parentId)) {\n\t\t\t\t\t\t\tv1GroupShapeIdsToV1ChildIds.get(v1Shape.parentId)!.push(v1Shape.id)\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.warn('parent does not exist', v1Shape)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// First, try to find the shape's parent among the existing groups\n\t\t\t\t\tconst parentId = v1PageIdsToV2PageIds.get(v1Page.id)!\n\n\t\t\t\t\tconst inCommon = {\n\t\t\t\t\t\tid: shapeId,\n\t\t\t\t\t\tparentId,\n\t\t\t\t\t\tx: coerceNumber(v1Shape.point[0]),\n\t\t\t\t\t\ty: coerceNumber(v1Shape.point[1]),\n\t\t\t\t\t\trotation: 0,\n\t\t\t\t\t\tisLocked: !!v1Shape.isLocked,\n\t\t\t\t\t}\n\n\t\t\t\t\tswitch (v1Shape.type) {\n\t\t\t\t\t\tcase TLV1ShapeType.Sticky: {\n\t\t\t\t\t\t\teditor.createShapes<TLNoteShape>([\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t...inCommon,\n\t\t\t\t\t\t\t\t\ttype: 'note',\n\t\t\t\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\t\t\t\trichText: toRichText(v1Shape.text ?? ''),\n\t\t\t\t\t\t\t\t\t\tcolor: getV2Color(v1Shape.style.color),\n\t\t\t\t\t\t\t\t\t\tsize: getV2Size(v1Shape.style.size),\n\t\t\t\t\t\t\t\t\t\tfont: getV2Font(v1Shape.style.font),\n\t\t\t\t\t\t\t\t\t\talign: getV2Align(v1Shape.style.textAlign),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase TLV1ShapeType.Rectangle: {\n\t\t\t\t\t\t\teditor.createShapes<TLGeoShape>([\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t...inCommon,\n\t\t\t\t\t\t\t\t\ttype: 'geo',\n\t\t\t\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\t\t\t\tgeo: 'rectangle',\n\t\t\t\t\t\t\t\t\t\tw: coerceDimension(v1Shape.size[0]),\n\t\t\t\t\t\t\t\t\t\th: coerceDimension(v1Shape.size[1]),\n\t\t\t\t\t\t\t\t\t\trichText: toRichText(v1Shape.label ?? ''),\n\t\t\t\t\t\t\t\t\t\tfill: getV2Fill(v1Shape.style.isFilled, v1Shape.style.color),\n\t\t\t\t\t\t\t\t\t\tlabelColor: getV2Color(v1Shape.style.color),\n\t\t\t\t\t\t\t\t\t\tcolor: getV2Color(v1Shape.style.color),\n\t\t\t\t\t\t\t\t\t\tsize: getV2Size(v1Shape.style.size),\n\t\t\t\t\t\t\t\t\t\tfont: getV2Font(v1Shape.style.font),\n\t\t\t\t\t\t\t\t\t\tdash: getV2Dash(v1Shape.style.dash),\n\t\t\t\t\t\t\t\t\t\talign: 'middle',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t])\n\n\t\t\t\t\t\t\tconst pageBoundsBeforeLabel = editor.getShapePageBounds(inCommon.id)!\n\n\t\t\t\t\t\t\teditor.updateShapes<TLGeoShape>([\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tid: inCommon.id,\n\t\t\t\t\t\t\t\t\ttype: 'geo',\n\t\t\t\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\t\t\t\trichText: toRichText(v1Shape.label ?? ''),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t])\n\n\t\t\t\t\t\t\tif (pageBoundsBeforeLabel.width === pageBoundsBeforeLabel.height) {\n\t\t\t\t\t\t\t\tconst shape = editor.getShape<TLGeoShape>(inCommon.id)!\n\t\t\t\t\t\t\t\tconst { growY } = shape.props\n\t\t\t\t\t\t\t\tconst w = coerceDimension(shape.props.w)\n\t\t\t\t\t\t\t\tconst h = coerceDimension(shape.props.h)\n\t\t\t\t\t\t\t\tconst newW = w + growY / 2\n\t\t\t\t\t\t\t\tconst newH = h + growY / 2\n\n\t\t\t\t\t\t\t\teditor.updateShapes([\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tid: inCommon.id,\n\t\t\t\t\t\t\t\t\t\ttype: 'geo',\n\t\t\t\t\t\t\t\t\t\tx: coerceNumber(shape.x) - (newW - w) / 2,\n\t\t\t\t\t\t\t\t\t\ty: coerceNumber(shape.y) - (newH - h) / 2,\n\t\t\t\t\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\t\t\t\t\tw: newW,\n\t\t\t\t\t\t\t\t\t\t\th: newH,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase TLV1ShapeType.Triangle: {\n\t\t\t\t\t\t\teditor.createShapes<TLGeoShape>([\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t...inCommon,\n\t\t\t\t\t\t\t\t\ttype: 'geo',\n\t\t\t\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\t\t\t\tgeo: 'triangle',\n\t\t\t\t\t\t\t\t\t\tw: coerceDimension(v1Shape.size[0]),\n\t\t\t\t\t\t\t\t\t\th: coerceDimension(v1Shape.size[1]),\n\t\t\t\t\t\t\t\t\t\tfill: getV2Fill(v1Shape.style.isFilled, v1Shape.style.color),\n\t\t\t\t\t\t\t\t\t\tlabelColor: getV2Color(v1Shape.style.color),\n\t\t\t\t\t\t\t\t\t\tcolor: getV2Color(v1Shape.style.color),\n\t\t\t\t\t\t\t\t\t\tsize: getV2Size(v1Shape.style.size),\n\t\t\t\t\t\t\t\t\t\tfont: getV2Font(v1Shape.style.font),\n\t\t\t\t\t\t\t\t\t\tdash: getV2Dash(v1Shape.style.dash),\n\t\t\t\t\t\t\t\t\t\talign: 'middle',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t])\n\n\t\t\t\t\t\t\tconst pageBoundsBeforeLabel = editor.getShapePageBounds(inCommon.id)!\n\n\t\t\t\t\t\t\teditor.updateShapes<TLGeoShape>([\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tid: inCommon.id,\n\t\t\t\t\t\t\t\t\ttype: 'geo',\n\t\t\t\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\t\t\t\trichText: toRichText(v1Shape.label ?? ''),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t])\n\n\t\t\t\t\t\t\tif (pageBoundsBeforeLabel.width === pageBoundsBeforeLabel.height) {\n\t\t\t\t\t\t\t\tconst shape = editor.getShape<TLGeoShape>(inCommon.id)!\n\t\t\t\t\t\t\t\tconst { growY } = shape.props\n\t\t\t\t\t\t\t\tconst w = coerceDimension(shape.props.w)\n\t\t\t\t\t\t\t\tconst h = coerceDimension(shape.props.h)\n\t\t\t\t\t\t\t\tconst newW = w + growY / 2\n\t\t\t\t\t\t\t\tconst newH = h + growY / 2\n\n\t\t\t\t\t\t\t\teditor.updateShapes([\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tid: inCommon.id,\n\t\t\t\t\t\t\t\t\t\ttype: 'geo',\n\t\t\t\t\t\t\t\t\t\tx: coerceNumber(shape.x) - (newW - w) / 2,\n\t\t\t\t\t\t\t\t\t\ty: coerceNumber(shape.y) - (newH - h) / 2,\n\t\t\t\t\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\t\t\t\t\tw: newW,\n\t\t\t\t\t\t\t\t\t\t\th: newH,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase TLV1ShapeType.Ellipse: {\n\t\t\t\t\t\t\teditor.createShapes<TLGeoShape>([\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t...inCommon,\n\t\t\t\t\t\t\t\t\ttype: 'geo',\n\t\t\t\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\t\t\t\tgeo: 'ellipse',\n\t\t\t\t\t\t\t\t\t\tw: coerceDimension(v1Shape.radius[0]) * 2,\n\t\t\t\t\t\t\t\t\t\th: coerceDimension(v1Shape.radius[1]) * 2,\n\t\t\t\t\t\t\t\t\t\tfill: getV2Fill(v1Shape.style.isFilled, v1Shape.style.color),\n\t\t\t\t\t\t\t\t\t\tlabelColor: getV2Color(v1Shape.style.color),\n\t\t\t\t\t\t\t\t\t\tcolor: getV2Color(v1Shape.style.color),\n\t\t\t\t\t\t\t\t\t\tsize: getV2Size(v1Shape.style.size),\n\t\t\t\t\t\t\t\t\t\tfont: getV2Font(v1Shape.style.font),\n\t\t\t\t\t\t\t\t\t\tdash: getV2Dash(v1Shape.style.dash),\n\t\t\t\t\t\t\t\t\t\talign: 'middle',\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t])\n\n\t\t\t\t\t\t\tconst pageBoundsBeforeLabel = editor.getShapePageBounds(inCommon.id)!\n\n\t\t\t\t\t\t\teditor.updateShapes<TLGeoShape>([\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tid: inCommon.id,\n\t\t\t\t\t\t\t\t\ttype: 'geo',\n\t\t\t\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\t\t\t\trichText: toRichText(v1Shape.label ?? ''),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t])\n\n\t\t\t\t\t\t\tif (pageBoundsBeforeLabel.width === pageBoundsBeforeLabel.height) {\n\t\t\t\t\t\t\t\tconst shape = editor.getShape<TLGeoShape>(inCommon.id)!\n\t\t\t\t\t\t\t\tconst { growY } = shape.props\n\t\t\t\t\t\t\t\tconst w = coerceDimension(shape.props.w)\n\t\t\t\t\t\t\t\tconst h = coerceDimension(shape.props.h)\n\t\t\t\t\t\t\t\tconst newW = w + growY / 2\n\t\t\t\t\t\t\t\tconst newH = h + growY / 2\n\n\t\t\t\t\t\t\t\teditor.updateShapes([\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tid: inCommon.id,\n\t\t\t\t\t\t\t\t\t\ttype: 'geo',\n\t\t\t\t\t\t\t\t\t\tx: coerceNumber(shape.x) - (newW - w) / 2,\n\t\t\t\t\t\t\t\t\t\ty: coerceNumber(shape.y) - (newH - h) / 2,\n\t\t\t\t\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\t\t\t\t\tw: newW,\n\t\t\t\t\t\t\t\t\t\t\th: newH,\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase TLV1ShapeType.Draw: {\n\t\t\t\t\t\t\tif (v1Shape.points.length === 0) {\n\t\t\t\t\t\t\t\tdecideNotToCreateShape(v1Shape)\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\teditor.createShapes<TLDrawShape>([\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t...inCommon,\n\t\t\t\t\t\t\t\t\ttype: 'draw',\n\t\t\t\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\t\t\t\tfill: getV2Fill(v1Shape.style.isFilled, v1Shape.style.color),\n\t\t\t\t\t\t\t\t\t\tcolor: getV2Color(v1Shape.style.color),\n\t\t\t\t\t\t\t\t\t\tsize: getV2Size(v1Shape.style.size),\n\t\t\t\t\t\t\t\t\t\tdash: getV2Dash(v1Shape.style.dash),\n\t\t\t\t\t\t\t\t\t\tisPen: false,\n\t\t\t\t\t\t\t\t\t\tisComplete: v1Shape.isComplete,\n\t\t\t\t\t\t\t\t\t\tsegments: [{ type: 'free', points: v1Shape.points.map(getV2Point) }],\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase TLV1ShapeType.Arrow: {\n\t\t\t\t\t\t\tconst v1Bend = coerceNumber(v1Shape.bend)\n\t\t\t\t\t\t\tconst v1Start = getV2Point(v1Shape.handles.start.point)\n\t\t\t\t\t\t\tconst v1End = getV2Point(v1Shape.handles.end.point)\n\t\t\t\t\t\t\tconst dist = Vec.Dist(v1Start, v1End)\n\t\t\t\t\t\t\tconst v2Bend = (dist * -v1Bend) / 2\n\n\t\t\t\t\t\t\t// Could also be a line... but we'll use it as an arrow anyway\n\t\t\t\t\t\t\teditor.createShapes<TLArrowShape>([\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t...inCommon,\n\t\t\t\t\t\t\t\t\ttype: 'arrow',\n\t\t\t\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\t\t\t\ttext: v1Shape.label ?? '',\n\t\t\t\t\t\t\t\t\t\tcolor: getV2Color(v1Shape.style.color),\n\t\t\t\t\t\t\t\t\t\tlabelColor: getV2Color(v1Shape.style.color),\n\t\t\t\t\t\t\t\t\t\tsize: getV2Size(v1Shape.style.size),\n\t\t\t\t\t\t\t\t\t\tfont: getV2Font(v1Shape.style.font),\n\t\t\t\t\t\t\t\t\t\tdash: getV2Dash(v1Shape.style.dash),\n\t\t\t\t\t\t\t\t\t\tarrowheadStart: getV2Arrowhead(v1Shape.decorations?.start),\n\t\t\t\t\t\t\t\t\t\tarrowheadEnd: getV2Arrowhead(v1Shape.decorations?.end),\n\t\t\t\t\t\t\t\t\t\tstart: {\n\t\t\t\t\t\t\t\t\t\t\tx: coerceNumber(v1Shape.handles.start.point[0]),\n\t\t\t\t\t\t\t\t\t\t\ty: coerceNumber(v1Shape.handles.start.point[1]),\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tend: {\n\t\t\t\t\t\t\t\t\t\t\tx: coerceNumber(v1Shape.handles.end.point[0]),\n\t\t\t\t\t\t\t\t\t\t\ty: coerceNumber(v1Shape.handles.end.point[1]),\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tbend: v2Bend,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t])\n\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase TLV1ShapeType.Text: {\n\t\t\t\t\t\t\teditor.createShapes<TLTextShape>([\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t...inCommon,\n\t\t\t\t\t\t\t\t\ttype: 'text',\n\t\t\t\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\t\t\t\trichText: toRichText(v1Shape.text ?? ' '),\n\t\t\t\t\t\t\t\t\t\tcolor: getV2Color(v1Shape.style.color),\n\t\t\t\t\t\t\t\t\t\tsize: getV2TextSize(v1Shape.style.size),\n\t\t\t\t\t\t\t\t\t\tfont: getV2Font(v1Shape.style.font),\n\t\t\t\t\t\t\t\t\t\ttextAlign: getV2TextAlign(v1Shape.style.textAlign),\n\t\t\t\t\t\t\t\t\t\tscale: v1Shape.style.scale ?? 1,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase TLV1ShapeType.Image: {\n\t\t\t\t\t\t\tconst assetId = v1AssetIdsToV2AssetIds.get(v1Shape.assetId)\n\n\t\t\t\t\t\t\tif (!assetId) {\n\t\t\t\t\t\t\t\tconsole.warn('Could not find asset id', v1Shape.assetId)\n\t\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\teditor.createShapes<TLImageShape>([\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t...inCommon,\n\t\t\t\t\t\t\t\t\ttype: 'image',\n\t\t\t\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\t\t\t\tw: coerceDimension(v1Shape.size[0]),\n\t\t\t\t\t\t\t\t\t\th: coerceDimension(v1Shape.size[1]),\n\t\t\t\t\t\t\t\t\t\tassetId,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcase TLV1ShapeType.Video: {\n\t\t\t\t\t\t\tconst assetId = v1AssetIdsToV2AssetIds.get(v1Shape.assetId)\n\n\t\t\t\t\t\t\tif (!assetId) {\n\t\t\t\t\t\t\t\tconsole.warn('Could not find asset id', v1Shape.assetId)\n\t\t\t\t\t\t\t\treturn\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\teditor.createShapes<TLVideoShape>([\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t...inCommon,\n\t\t\t\t\t\t\t\t\ttype: 'video',\n\t\t\t\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\t\t\t\tw: coerceDimension(v1Shape.size[0]),\n\t\t\t\t\t\t\t\t\t\th: coerceDimension(v1Shape.size[1]),\n\t\t\t\t\t\t\t\t\t\tassetId,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst rotation = coerceNumber(v1Shape.rotation)\n\n\t\t\t\t\tif (rotation !== 0) {\n\t\t\t\t\t\teditor.select(shapeId)\n\t\t\t\t\t\teditor.rotateShapesBy([shapeId], rotation)\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\t\t// Create groups\n\t\t\t\tv1GroupShapeIdsToV1ChildIds.forEach((v1ChildIds, v1GroupId) => {\n\t\t\t\t\tconst v2ChildShapeIds = v1ChildIds.map((id) => v1ShapeIdsToV2ShapeIds.get(id)!)\n\t\t\t\t\tconst v2GroupId = v1ShapeIdsToV2ShapeIds.get(v1GroupId)!\n\t\t\t\t\teditor.groupShapes(v2ChildShapeIds, { groupId: v2GroupId })\n\n\t\t\t\t\tconst v1Group = v1Page.shapes[v1GroupId]\n\t\t\t\t\tconst rotation = coerceNumber(v1Group.rotation)\n\n\t\t\t\t\tif (rotation !== 0) {\n\t\t\t\t\t\teditor.select(v2GroupId)\n\t\t\t\t\t\teditor.rotateShapesBy([v2GroupId], rotation)\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\t\t// Bind arrows to shapes\n\n\t\t\t\tv1Shapes.forEach((v1Shape) => {\n\t\t\t\t\tif (v1Shape.type !== TLV1ShapeType.Arrow) {\n\t\t\t\t\t\treturn\n\t\t\t\t\t}\n\n\t\t\t\t\tconst v2ShapeId = v1ShapeIdsToV2ShapeIds.get(v1Shape.id)!\n\t\t\t\t\tconst util = editor.getShapeUtil<TLArrowShape>('arrow')\n\n\t\t\t\t\t// dumb but necessary\n\t\t\t\t\teditor.inputs.ctrlKey = false\n\n\t\t\t\t\tfor (const handleId of ['start', 'end'] as const) {\n\t\t\t\t\t\tconst bindingId = v1Shape.handles[handleId].bindingId\n\t\t\t\t\t\tif (bindingId) {\n\t\t\t\t\t\t\tconst binding = v1Page.bindings[bindingId]\n\t\t\t\t\t\t\tif (!binding) {\n\t\t\t\t\t\t\t\t// arrow has a reference to a binding that no longer exists\n\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst targetId = v1ShapeIdsToV2ShapeIds.get(binding.toId)!\n\n\t\t\t\t\t\t\tconst targetShape = editor.getShape(targetId)!\n\n\t\t\t\t\t\t\t// (unexpected) We didn't create the target shape\n\t\t\t\t\t\t\tif (!targetShape) continue\n\n\t\t\t\t\t\t\tif (targetId) {\n\t\t\t\t\t\t\t\tconst bounds = editor.getShapePageBounds(targetId)!\n\n\t\t\t\t\t\t\t\tconst v2ShapeFresh = editor.getShape<TLArrowShape>(v2ShapeId)!\n\n\t\t\t\t\t\t\t\tconst nx = clamp((coerceNumber(binding.point[0]) + 0.5) / 2, 0.2, 0.8)\n\t\t\t\t\t\t\t\tconst ny = clamp((coerceNumber(binding.point[1]) + 0.5) / 2, 0.2, 0.8)\n\n\t\t\t\t\t\t\t\tconst point = editor.getPointInShapeSpace(v2ShapeFresh, {\n\t\t\t\t\t\t\t\t\tx: bounds.minX + bounds.width * nx,\n\t\t\t\t\t\t\t\t\ty: bounds.minY + bounds.height * ny,\n\t\t\t\t\t\t\t\t})\n\n\t\t\t\t\t\t\t\tconst handles = editor.getShapeHandles(v2ShapeFresh)!\n\t\t\t\t\t\t\t\tconst change = util.onHandleDrag!(v2ShapeFresh, {\n\t\t\t\t\t\t\t\t\thandle: {\n\t\t\t\t\t\t\t\t\t\t...handles.find((h) => h.id === handleId)!,\n\t\t\t\t\t\t\t\t\t\tx: point.x,\n\t\t\t\t\t\t\t\t\t\ty: point.y,\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tisPrecise: point.x !== 0.5 || point.y !== 0.5,\n\t\t\t\t\t\t\t\t})\n\n\t\t\t\t\t\t\t\tif (change) {\n\t\t\t\t\t\t\t\t\teditor.updateShape(change)\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tconst freshBinding = getArrowBindings(\n\t\t\t\t\t\t\t\t\teditor,\n\t\t\t\t\t\t\t\t\teditor.getShape<TLArrowShape>(v2ShapeId)!\n\t\t\t\t\t\t\t\t)[handleId]\n\t\t\t\t\t\t\t\tif (freshBinding) {\n\t\t\t\t\t\t\t\t\tconst updatedFreshBinding = structuredClone(freshBinding)\n\t\t\t\t\t\t\t\t\tif (binding.distance === 0) {\n\t\t\t\t\t\t\t\t\t\tupdatedFreshBinding.props.isExact = true\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (updatedFreshBinding.toId !== targetId) {\n\t\t\t\t\t\t\t\t\t\tupdatedFreshBinding.toId = targetId\n\t\t\t\t\t\t\t\t\t\tupdatedFreshBinding.props.normalizedAnchor = { x: nx, y: ny }\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\teditor.updateBinding(updatedFreshBinding)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t})\n\n\t\t// Set the current page to the first page again\n\t\teditor.setCurrentPage(firstPageId)\n\n\t\teditor.clearHistory()\n\t\teditor.selectNone()\n\n\t\tconst bounds = editor.getCurrentPageBounds()\n\t\tif (bounds) {\n\t\t\teditor.zoomToBounds(bounds, { targetZoom: 1 })\n\t\t}\n\t})\n}\n\nfunction coerceNumber(n: unknown): number {\n\tif (typeof n !== 'number') return 0\n\tif (Number.isNaN(n)) return 0\n\tif (!Number.isFinite(n)) return 0\n\treturn n\n}\n\nfunction coerceDimension(d: unknown): number {\n\tconst n = coerceNumber(d)\n\tif (n <= 0) return 1\n\treturn n\n}\n\n/**\n * We want to move assets over to our new S3 bucket & extract any relevant metadata. That process is\n * async though, where the rest of our migration is synchronous.\n *\n * We'll write placeholder assets to the app using the old asset URLs, then kick off a process async\n * to try and download the real assets, extract the metadata, and upload them to our new bucket.\n * It's not a big deal if this fails though.\n */\nasync function tryMigrateAsset(editor: Editor, placeholderAsset: TLAsset) {\n\ttry {\n\t\tif (placeholderAsset.type === 'bookmark' || !placeholderAsset.props.src) return\n\n\t\tconst response = await fetch(placeholderAsset.props.src)\n\t\tif (!response.ok) return\n\n\t\tconst file = new File([await response.blob()], placeholderAsset.props.name, {\n\t\t\ttype: response.headers.get('content-type') ?? placeholderAsset.props.mimeType ?? undefined,\n\t\t})\n\n\t\tconst newAsset = await editor.getAssetForExternalContent({ type: 'file', file })\n\t\tif (!newAsset) throw new Error('Could not get asset for external content')\n\t\tif (newAsset.type === 'bookmark') return\n\n\t\teditor.updateAssets([\n\t\t\t{\n\t\t\t\tid: placeholderAsset.id,\n\t\t\t\ttype: placeholderAsset.type,\n\t\t\t\tprops: {\n\t\t\t\t\t...newAsset.props,\n\t\t\t\t\tname: placeholderAsset.props.name,\n\t\t\t\t},\n\t\t\t},\n\t\t])\n\t} catch {\n\t\t// not a big deal, we'll just keep the placeholder asset\n\t}\n}\n\nfunction migrate(document: TLV1Document, newVersion: number): TLV1Document {\n\tconst { version = 0 } = document\n\n\tif (!document.assets) {\n\t\tdocument.assets = {}\n\t}\n\n\t// Remove unused assets when loading a document\n\tconst assetIdsInUse = new Set<string>()\n\n\tObject.values(document.pages).forEach((page) =>\n\t\tObject.values(page.shapes).forEach((shape) => {\n\t\t\tconst { parentId, children, assetId } = shape\n\n\t\t\tif (assetId) {\n\t\t\t\tassetIdsInUse.add(assetId)\n\t\t\t}\n\n\t\t\t// Fix missing parent bug\n\t\t\tif (parentId !== page.id && !page.shapes[parentId]) {\n\t\t\t\tconsole.warn('Encountered a shape with a missing parent!')\n\t\t\t\tshape.parentId = page.id\n\t\t\t}\n\n\t\t\tif (shape.type === TLV1ShapeType.Group && children) {\n\t\t\t\tchildren.forEach((childId) => {\n\t\t\t\t\tif (!page.shapes[childId]) {\n\t\t\t\t\t\tconsole.warn('Encountered a parent with a missing child!', shape.id, childId)\n\t\t\t\t\t\tchildren?.splice(children.indexOf(childId), 1)\n\t\t\t\t\t}\n\t\t\t\t})\n\n\t\t\t\t// TODO: Remove the shape if it has no children\n\t\t\t}\n\t\t})\n\t)\n\n\tObject.keys(document.assets).forEach((assetId) => {\n\t\tif (!assetIdsInUse.has(assetId)) {\n\t\t\tdelete document.assets[assetId]\n\t\t}\n\t})\n\n\tif (version !== newVersion) {\n\t\tif (version < 14) {\n\t\t\tObject.values(document.pages).forEach((page) => {\n\t\t\t\tObject.values(page.shapes)\n\t\t\t\t\t.filter((shape) => shape.type === TLV1ShapeType.Text)\n\t\t\t\t\t.forEach((shape) => {\n\t\t\t\t\t\tif ((shape as TLV1TextShape).style.font === undefined) {\n\t\t\t\t\t\t\t;(shape as TLV1TextShape).style.font = TLV1FontStyle.Script\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t})\n\t\t}\n\n\t\t// Lowercase styles, move binding meta to binding\n\t\tif (version <= 13) {\n\t\t\tObject.values(document.pages).forEach((page) => {\n\t\t\t\tObject.values(page.bindings).forEach((binding) => {\n\t\t\t\t\tObject.assign(binding, (binding as any).meta)\n\t\t\t\t})\n\n\t\t\t\tObject.values(page.shapes).forEach((shape) => {\n\t\t\t\t\tObject.entries(shape.style).forEach(([id, style]) => {\n\t\t\t\t\t\tif (typeof style === 'string') {\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\tshape.style[id] = style.toLowerCase()\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\n\t\t\t\t\tif (shape.type === TLV1ShapeType.Arrow) {\n\t\t\t\t\t\tif (shape.decorations) {\n\t\t\t\t\t\t\tObject.entries(shape.decorations).forEach(([id, decoration]) => {\n\t\t\t\t\t\t\t\tif ((decoration as unknown) === 'Arrow') {\n\t\t\t\t\t\t\t\t\tshape.decorations = {\n\t\t\t\t\t\t\t\t\t\t...shape.decorations,\n\t\t\t\t\t\t\t\t\t\t[id]: TLV1Decoration.Arrow,\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t})\n\t\t}\n\n\t\t// Add document name and file system handle\n\t\tif (version <= 13.1 && document.name == null) {\n\t\t\tdocument.name = 'New Document'\n\t\t}\n\n\t\tif (version < 15 && document.assets == null) {\n\t\t\tdocument.assets = {}\n\t\t}\n\n\t\tObject.values(document.pages).forEach((page) => {\n\t\t\tObject.values(page.shapes).forEach((shape) => {\n\t\t\t\tif (version < 15.2) {\n\t\t\t\t\tif (\n\t\t\t\t\t\t(shape.type === TLV1ShapeType.Image || shape.type === TLV1ShapeType.Video) &&\n\t\t\t\t\t\tshape.style.isFilled == null\n\t\t\t\t\t) {\n\t\t\t\t\t\tshape.style.isFilled = true\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (version < 15.3) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tshape.type === TLV1ShapeType.Rectangle ||\n\t\t\t\t\t\tshape.type === TLV1ShapeType.Triangle ||\n\t\t\t\t\t\tshape.type === TLV1ShapeType.Ellipse ||\n\t\t\t\t\t\tshape.type === TLV1ShapeType.Arrow\n\t\t\t\t\t) {\n\t\t\t\t\t\tif ('text' in shape && typeof shape.text === 'string') {\n\t\t\t\t\t\t\tshape.label = shape.text\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!shape.label) {\n\t\t\t\t\t\t\tshape.label = ''\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!shape.labelPoint) {\n\t\t\t\t\t\t\tshape.labelPoint = [0.5, 0.5]\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t})\n\t}\n\n\t// Cleanup\n\tObject.values(document.pageStates).forEach((pageState) => {\n\t\tpageState.selectedIds = pageState.selectedIds.filter((id) => {\n\t\t\treturn document.pages[pageState.id].shapes[id] !== undefined\n\t\t})\n\t\tpageState.bindingId = undefined\n\t\tpageState.editingId = undefined\n\t\tpageState.hoveredId = undefined\n\t\tpageState.pointedId = undefined\n\t})\n\n\tdocument.version = newVersion\n\n\treturn document\n}\n\n/* -------------------- TLV1 Types -------------------- */\n\n/** @internal */\nexport interface TLV1Handle {\n\tid: string\n\tindex: number\n\tpoint: number[]\n\tcanBind?: boolean\n\tbindingId?: string\n}\n\n/** @internal */\nexport interface TLV1BaseBinding {\n\tid: string\n\ttoId: string\n\tfromId: string\n}\n\n/** @internal */\nexport enum TLV1ShapeType {\n\tSticky = 'sticky',\n\tEllipse = 'ellipse',\n\tRectangle = 'rectangle',\n\tTriangle = 'triangle',\n\tDraw = 'draw',\n\tArrow = 'arrow',\n\tText = 'text',\n\tGroup = 'group',\n\tImage = 'image',\n\tVideo = 'video',\n}\n\n/** @internal */\nexport enum TLV1ColorStyle {\n\tWhite = 'white',\n\tLightGray = 'lightGray',\n\tGray = 'gray',\n\tBlack = 'black',\n\tGreen = 'green',\n\tCyan = 'cyan',\n\tBlue = 'blue',\n\tIndigo = 'indigo',\n\tViolet = 'violet',\n\tRed = 'red',\n\tOrange = 'orange',\n\tYellow = 'yellow',\n}\n\n/** @internal */\nexport enum TLV1SizeStyle {\n\tSmall = 'small',\n\tMedium = 'medium',\n\tLarge = 'large',\n}\n\n/** @internal */\nexport enum TLV1DashStyle {\n\tDraw = 'draw',\n\tSolid = 'solid',\n\tDashed = 'dashed',\n\tDotted = 'dotted',\n}\n\n/** @internal */\nexport enum TLV1AlignStyle {\n\tStart = 'start',\n\tMiddle = 'middle',\n\tEnd = 'end',\n\tJustify = 'justify',\n}\n\n/** @internal */\nexport enum TLV1FontStyle {\n\tScript = 'script',\n\tSans = 'sans',\n\tSerif = 'serif',\n\tMono = 'mono',\n}\n\n/** @internal */\nexport interface TLV1ShapeStyles {\n\tcolor: TLV1ColorStyle\n\tsize: TLV1SizeStyle\n\tdash: TLV1DashStyle\n\tfont?: TLV1FontStyle\n\ttextAlign?: TLV1AlignStyle\n\tisFilled?: boolean\n\tscale?: number\n}\n\n/** @internal */\nexport interface TLV1BaseShape {\n\tid: string\n\tparentId: string\n\tchildIndex: number\n\tname: string\n\tpoint: number[]\n\tassetId?: string\n\trotation?: number\n\tchildren?: string[]\n\tisGhost?: boolean\n\tisHidden?: boolean\n\tisLocked?: boolean\n\tisGenerated?: boolean\n\tisAspectRatioLocked?: boolean\n\tstyle: TLV1ShapeStyles\n\ttype: TLV1ShapeType\n\tlabel?: string\n\thandles?: Record<string, TLV1Handle>\n}\n\n/** @internal */\nexport interface TLV1DrawShape extends TLV1BaseShape {\n\ttype: TLV1ShapeType.Draw\n\tpoints: number[][]\n\tisComplete: boolean\n}\n\n/** @internal */\nexport interface TLV1RectangleShape extends TLV1BaseShape {\n\ttype: TLV1ShapeType.Rectangle\n\tsize: number[]\n\tlabel?: string\n\tlabelPoint?: number[]\n}\n\n/** @internal */\nexport interface TLV1EllipseShape extends TLV1BaseShape {\n\ttype: TLV1ShapeType.Ellipse\n\tradius: number[]\n\tlabel?: string\n\tlabelPoint?: number[]\n}\n\n/** @internal */\nexport interface TLV1TriangleShape extends TLV1BaseShape {\n\ttype: TLV1ShapeType.Triangle\n\tsize: number[]\n\tlabel?: string\n\tlabelPoint?: number[]\n}\n\n/** @internal */\nexport enum TLV1Decoration {\n\tArrow = 'arrow',\n}\n\n// The shape created with the arrow tool\n/** @internal */\nexport interface TLV1ArrowShape extends TLV1BaseShape {\n\ttype: TLV1ShapeType.Arrow\n\tbend: number\n\thandles: {\n\t\tstart: TLV1Handle\n\t\tbend: TLV1Handle\n\t\tend: TLV1Handle\n\t}\n\tdecorations?: {\n\t\tstart?: TLV1Decoration\n\t\tend?: TLV1Decoration\n\t\tmiddle?: TLV1Decoration\n\t}\n\tlabel?: string\n\tlabelPoint?: number[]\n}\n\n/** @internal */\nexport interface TLV1ArrowBinding extends TLV1BaseBinding {\n\thandleId: keyof TLV1ArrowShape['handles']\n\tdistance: number\n\tpoint: number[]\n}\n\n/** @internal */\nexport type TLV1Binding = TLV1ArrowBinding\n\n/** @internal */\nexport interface TLV1ImageShape extends TLV1BaseShape {\n\ttype: TLV1ShapeType.Image\n\tsize: number[]\n\tassetId: string\n}\n\n/** @internal */\nexport interface TLV1VideoShape extends TLV1BaseShape {\n\ttype: TLV1ShapeType.Video\n\tsize: number[]\n\tassetId: string\n\tisPlaying: boolean\n\tcurrentTime: number\n}\n\n// The shape created by the text tool\n/** @internal */\nexport interface TLV1TextShape extends TLV1BaseShape {\n\ttype: TLV1ShapeType.Text\n\ttext: string\n}\n\n// The shape created by the sticky tool\n/** @internal */\nexport interface TLV1StickyShape extends TLV1BaseShape {\n\ttype: TLV1ShapeType.Sticky\n\tsize: number[]\n\ttext: string\n}\n\n// The shape created when multiple shapes are grouped\n/** @internal */\nexport interface TLV1GroupShape extends TLV1BaseShape {\n\ttype: TLV1ShapeType.Group\n\tsize: number[]\n\tchildren: string[]\n}\n\n/** @internal */\nexport type TLV1Shape =\n\t| TLV1RectangleShape\n\t| TLV1EllipseShape\n\t| TLV1TriangleShape\n\t| TLV1DrawShape\n\t| TLV1ArrowShape\n\t| TLV1TextShape\n\t| TLV1GroupShape\n\t| TLV1StickyShape\n\t| TLV1ImageShape\n\t| TLV1VideoShape\n\n/** @internal */\nexport interface TLV1Page {\n\tid: string\n\tname?: string\n\tchildIndex?: number\n\tshapes: Record<string, TLV1Shape>\n\tbindings: Record<string, TLV1Binding>\n}\n\n/** @internal */\nexport interface TLV1Bounds {\n\tminX: number\n\tminY: number\n\tmaxX: number\n\tmaxY: number\n\twidth: number\n\theight: number\n\trotation?: number\n}\n\n/** @internal */\nexport interface TLV1PageState {\n\tid: string\n\tselectedIds: string[]\n\tcamera: {\n\t\tpoint: number[]\n\t\tzoom: number\n\t}\n\tbrush?: TLV1Bounds | null\n\tpointedId?: string | null\n\thoveredId?: string | null\n\teditingId?: string | null\n\tbindingId?: string | null\n}\n\n/** @internal */\nexport enum TLV1AssetType {\n\tImage = 'image',\n\tVideo = 'video',\n}\n\n/** @internal */\nexport interface TLV1ImageAsset extends TLV1BaseAsset {\n\ttype: TLV1AssetType.Image\n\tfileName: string\n\tsrc: string\n\tsize: number[]\n}\n\n/** @internal */\nexport interface TLV1VideoAsset extends TLV1BaseAsset {\n\ttype: TLV1AssetType.Video\n\tfileName: string\n\tsrc: string\n\tsize: number[]\n}\n\n/** @internal */\nexport interface TLV1BaseAsset {\n\tid: string\n\ttype: string\n}\n\n/** @internal */\nexport type TLV1Asset = TLV1ImageAsset | TLV1VideoAsset\n\n/** @internal */\nexport interface TLV1Document {\n\tid: string\n\tname: string\n\tversion: number\n\tpages: Record<string, TLV1Page>\n\tpageStates: Record<string, TLV1PageState>\n\tassets: Record<string, TLV1Asset>\n}\n\n/* ------------------ Translations ------------------ */\n\nconst v1ColorsToV2Colors: Record<TLV1ColorStyle, TLDefaultColorStyle> = {\n\t[TLV1ColorStyle.White]: 'black',\n\t[TLV1ColorStyle.Black]: 'black',\n\t[TLV1ColorStyle.LightGray]: 'grey',\n\t[TLV1ColorStyle.Gray]: 'grey',\n\t[TLV1ColorStyle.Green]: 'light-green',\n\t[TLV1ColorStyle.Cyan]: 'green',\n\t[TLV1ColorStyle.Blue]: 'light-blue',\n\t[TLV1ColorStyle.Indigo]: 'blue',\n\t[TLV1ColorStyle.Orange]: 'orange',\n\t[TLV1ColorStyle.Yellow]: 'yellow',\n\t[TLV1ColorStyle.Red]: 'red',\n\t[TLV1ColorStyle.Violet]: 'light-violet',\n}\n\nconst v1FontsToV2Fonts: Record<TLV1FontStyle, TLDefaultFontStyle> = {\n\t[TLV1FontStyle.Mono]: 'mono',\n\t[TLV1FontStyle.Sans]: 'sans',\n\t[TLV1FontStyle.Script]: 'draw',\n\t[TLV1FontStyle.Serif]: 'serif',\n}\n\nconst v1AlignsToV2Aligns: Record<TLV1AlignStyle, TLDefaultHorizontalAlignStyle> = {\n\t[TLV1AlignStyle.Start]: 'start',\n\t[TLV1AlignStyle.Middle]: 'middle',\n\t[TLV1AlignStyle.End]: 'end',\n\t[TLV1AlignStyle.Justify]: 'start',\n}\n\nconst v1TextAlignsToV2TextAligns: Record<TLV1AlignStyle, TLDefaultTextAlignStyle> = {\n\t[TLV1AlignStyle.Start]: 'start',\n\t[TLV1AlignStyle.Middle]: 'middle',\n\t[TLV1AlignStyle.End]: 'end',\n\t[TLV1AlignStyle.Justify]: 'start',\n}\n\nconst v1TextSizesToV2TextSizes: Record<TLV1SizeStyle, TLDefaultSizeStyle> = {\n\t[TLV1SizeStyle.Small]: 's',\n\t[TLV1SizeStyle.Medium]: 'l',\n\t[TLV1SizeStyle.Large]: 'xl',\n}\n\nconst v1SizesToV2Sizes: Record<TLV1SizeStyle, TLDefaultSizeStyle> = {\n\t[TLV1SizeStyle.Small]: 'm',\n\t[TLV1SizeStyle.Medium]: 'l',\n\t[TLV1SizeStyle.Large]: 'xl',\n}\n\nconst v1DashesToV2Dashes: Record<TLV1DashStyle, TLDefaultDashStyle> = {\n\t[TLV1DashStyle.Solid]: 'solid',\n\t[TLV1DashStyle.Dashed]: 'dashed',\n\t[TLV1DashStyle.Dotted]: 'dotted',\n\t[TLV1DashStyle.Draw]: 'draw',\n}\n\nfunction getV2Color(color: TLV1ColorStyle | undefined): TLDefaultColorStyle {\n\treturn color ? (v1ColorsToV2Colors[color] ?? 'black') : 'black'\n}\n\nfunction getV2Font(font: TLV1FontStyle | undefined): TLDefaultFontStyle {\n\treturn font ? (v1FontsToV2Fonts[font] ?? 'draw') : 'draw'\n}\n\nfunction getV2Align(align: TLV1AlignStyle | undefined): TLDefaultHorizontalAlignStyle {\n\treturn align ? (v1AlignsToV2Aligns[align] ?? 'middle') : 'middle'\n}\n\nfunction getV2TextAlign(align: TLV1AlignStyle | undefined): TLDefaultTextAlignStyle {\n\treturn align ? (v1TextAlignsToV2TextAligns[align] ?? 'middle') : 'middle'\n}\n\nfunction getV2TextSize(size: TLV1SizeStyle | undefined): TLDefaultSizeStyle {\n\treturn size ? (v1TextSizesToV2TextSizes[size] ?? 'm') : 'm'\n}\n\nfunction getV2Size(size: TLV1SizeStyle | undefined): TLDefaultSizeStyle {\n\treturn size ? (v1SizesToV2Sizes[size] ?? 'l') : 'l'\n}\n\nfunction getV2Dash(dash: TLV1DashStyle | undefined): TLDefaultDashStyle {\n\treturn dash ? (v1DashesToV2Dashes[dash] ?? 'draw') : 'draw'\n}\n\nfunction getV2Point(point: number[]): VecModel {\n\treturn {\n\t\tx: coerceNumber(point[0]),\n\t\ty: coerceNumber(point[1]),\n\t\tz: point[2] == null ? 0.5 : coerceNumber(point[2]),\n\t}\n}\n\nfunction getV2Arrowhead(decoration: TLV1Decoration | undefined): TLArrowShapeArrowheadStyle {\n\treturn decoration === TLV1Decoration.Arrow ? 'arrow' : 'none'\n}\n\nfunction getV2Fill(isFilled: boolean | undefined, color: TLV1ColorStyle) {\n\treturn isFilled\n\t\t? color === TLV1ColorStyle.Black || color === TLV1ColorStyle.White\n\t\t\t? 'semi'\n\t\t\t: 'solid'\n\t\t: 'none'\n}\n"],"names":["bounds","TLV1ShapeType","TLV1ColorStyle","TLV1SizeStyle","TLV1DashStyle","TLV1AlignStyle","TLV1FontStyle","TLV1Decoration","TLV1AssetType"],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 2241, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/omar/Desktop/studio/node_modules/tldraw/src/lib/utils/tldr/file.ts"],"sourcesContent":["import {\n\tEditor,\n\tFileHelpers,\n\tMigrationFailureReason,\n\tMigrationResult,\n\tRecordId,\n\tResult,\n\tSerializedSchema,\n\tSerializedSchemaV1,\n\tSerializedSchemaV2,\n\tSerializedStore,\n\tStoreSnapshot,\n\tT,\n\tTLAssetId,\n\tTLImageAsset,\n\tTLRecord,\n\tTLSchema,\n\tTLStore,\n\tTLVideoAsset,\n\tUnknownRecord,\n\tcreateTLStore,\n\texhaustiveSwitchError,\n\tfetch,\n\ttransact,\n} from '@tldraw/editor'\nimport { TLUiToastsContextType } from '../../ui/context/toasts'\nimport { TLUiTranslationKey } from '../../ui/hooks/useTranslation/TLUiTranslationKey'\nimport { buildFromV1Document } from '../tldr/buildFromV1Document'\n\n/** @public */\nexport const TLDRAW_FILE_MIMETYPE = 'application/vnd.tldraw+json' as const\n\n/** @public */\nexport const TLDRAW_FILE_EXTENSION = '.tldr' as const\n\n// When incrementing this, you'll need to update parseTldrawJsonFile to handle\n// both your new changes and the old file format\nconst LATEST_TLDRAW_FILE_FORMAT_VERSION = 1\n\n/** @public */\nexport interface TldrawFile {\n\ttldrawFileFormatVersion: number\n\tschema: SerializedSchema\n\trecords: UnknownRecord[]\n}\n\nconst schemaV1 = T.object<SerializedSchemaV1>({\n\tschemaVersion: T.literal(1),\n\tstoreVersion: T.positiveInteger,\n\trecordVersions: T.dict(\n\t\tT.string,\n\t\tT.object({\n\t\t\tversion: T.positiveInteger,\n\t\t\tsubTypeVersions: T.dict(T.string, T.positiveInteger).optional(),\n\t\t\tsubTypeKey: T.string.optional(),\n\t\t})\n\t),\n})\n\nconst schemaV2 = T.object<SerializedSchemaV2>({\n\tschemaVersion: T.literal(2),\n\tsequences: T.dict(T.string, T.positiveInteger),\n})\n\nconst tldrawFileValidator: T.Validator<TldrawFile> = T.object({\n\ttldrawFileFormatVersion: T.nonZeroInteger,\n\tschema: T.numberUnion('schemaVersion', {\n\t\t1: schemaV1,\n\t\t2: schemaV2,\n\t}),\n\trecords: T.arrayOf(\n\t\tT.object({\n\t\t\tid: T.string as any as T.Validator<RecordId<any>>,\n\t\t\ttypeName: T.string,\n\t\t}).allowUnknownProperties()\n\t),\n})\n\n/** @public */\nexport function isV1File(data: any) {\n\ttry {\n\t\tif (data.document?.version) {\n\t\t\treturn true\n\t\t}\n\t\treturn false\n\t} catch {\n\t\treturn false\n\t}\n}\n\n/** @public */\nexport type TldrawFileParseError =\n\t| { type: 'v1File'; data: any }\n\t| { type: 'notATldrawFile'; cause: unknown }\n\t| { type: 'fileFormatVersionTooNew'; version: number }\n\t| { type: 'migrationFailed'; reason: MigrationFailureReason }\n\t| { type: 'invalidRecords'; cause: unknown }\n\n/** @public */\nexport function parseTldrawJsonFile({\n\tjson,\n\tschema,\n}: {\n\tschema: TLSchema\n\tjson: string\n}): Result<TLStore, TldrawFileParseError> {\n\t// first off, we parse .json file and check it matches the general shape of\n\t// a tldraw file\n\tlet data\n\ttry {\n\t\tdata = tldrawFileValidator.validate(JSON.parse(json))\n\t} catch (e) {\n\t\t// could be a v1 file!\n\t\ttry {\n\t\t\tdata = JSON.parse(json)\n\t\t\tif (isV1File(data)) {\n\t\t\t\treturn Result.err({ type: 'v1File', data })\n\t\t\t}\n\t\t} catch {\n\t\t\t// noop\n\t\t}\n\n\t\treturn Result.err({ type: 'notATldrawFile', cause: e })\n\t}\n\n\t// if the file format version isn't supported, we can't open it - it's\n\t// probably from a newer version of tldraw\n\tif (data.tldrawFileFormatVersion > LATEST_TLDRAW_FILE_FORMAT_VERSION) {\n\t\treturn Result.err({\n\t\t\ttype: 'fileFormatVersionTooNew',\n\t\t\tversion: data.tldrawFileFormatVersion,\n\t\t})\n\t}\n\n\t// even if the file version is up to date, it might contain old-format\n\t// records. lets create a store with the records and migrate it to the\n\t// latest version\n\tlet migrationResult: MigrationResult<SerializedStore<TLRecord>>\n\tlet storeSnapshot: SerializedStore<TLRecord>\n\ttry {\n\t\tconst records = pruneUnusedAssets(data.records as TLRecord[])\n\t\tstoreSnapshot = Object.fromEntries(records.map((r) => [r.id, r]))\n\t\tmigrationResult = schema.migrateStoreSnapshot({ store: storeSnapshot, schema: data.schema })\n\t} catch (e) {\n\t\t// junk data in the migration\n\t\treturn Result.err({ type: 'invalidRecords', cause: e })\n\t}\n\t// if the migration failed, we can't open the file\n\tif (migrationResult.type === 'error') {\n\t\treturn Result.err({ type: 'migrationFailed', reason: migrationResult.reason })\n\t}\n\n\t// at this stage, the store should have records at the latest versions, so\n\t// we should be able to validate them. if any of the records at this stage\n\t// are invalid, we don't open the file\n\ttry {\n\t\treturn Result.ok(\n\t\t\tcreateTLStore({\n\t\t\t\tsnapshot: { store: storeSnapshot, schema: data.schema },\n\t\t\t\tschema,\n\t\t\t})\n\t\t)\n\t} catch (e) {\n\t\t// junk data in the records (they're not validated yet!) could cause the\n\t\t// migrations to crash. We treat any throw from a migration as an\n\t\t// invalid record\n\t\treturn Result.err({ type: 'invalidRecords', cause: e })\n\t}\n}\n\nfunction pruneUnusedAssets(records: TLRecord[]) {\n\tconst usedAssets = new Set<TLAssetId>()\n\tfor (const record of records) {\n\t\tif (record.typeName === 'shape' && 'assetId' in record.props && record.props.assetId) {\n\t\t\tusedAssets.add(record.props.assetId)\n\t\t}\n\t}\n\treturn records.filter((r) => r.typeName !== 'asset' || usedAssets.has(r.id))\n}\n\n/** @public */\nexport async function serializeTldrawJson(editor: Editor): Promise<string> {\n\tconst records: TLRecord[] = []\n\tfor (const record of editor.store.allRecords()) {\n\t\tswitch (record.typeName) {\n\t\t\tcase 'asset':\n\t\t\t\tif (\n\t\t\t\t\trecord.type !== 'bookmark' &&\n\t\t\t\t\trecord.props.src &&\n\t\t\t\t\t!record.props.src.startsWith('data:')\n\t\t\t\t) {\n\t\t\t\t\tlet assetSrcToSave\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlet src = record.props.src\n\t\t\t\t\t\tif (!src.startsWith('http')) {\n\t\t\t\t\t\t\tsrc =\n\t\t\t\t\t\t\t\t(await editor.resolveAssetUrl(record.id, { shouldResolveToOriginal: true })) || ''\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// try to save the asset as a base64 string\n\t\t\t\t\t\tassetSrcToSave = await FileHelpers.blobToDataUrl(await (await fetch(src)).blob())\n\t\t\t\t\t} catch {\n\t\t\t\t\t\t// if that fails, just save the original src\n\t\t\t\t\t\tassetSrcToSave = record.props.src\n\t\t\t\t\t}\n\n\t\t\t\t\trecords.push({\n\t\t\t\t\t\t...record,\n\t\t\t\t\t\tprops: {\n\t\t\t\t\t\t\t...record.props,\n\t\t\t\t\t\t\tsrc: assetSrcToSave,\n\t\t\t\t\t\t},\n\t\t\t\t\t})\n\t\t\t\t} else {\n\t\t\t\t\trecords.push(record)\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\tdefault:\n\t\t\t\trecords.push(record)\n\t\t\t\tbreak\n\t\t}\n\t}\n\n\treturn JSON.stringify({\n\t\ttldrawFileFormatVersion: LATEST_TLDRAW_FILE_FORMAT_VERSION,\n\t\tschema: editor.store.schema.serialize(),\n\t\trecords: pruneUnusedAssets(records),\n\t})\n}\n\n/** @public */\nexport async function serializeTldrawJsonBlob(editor: Editor): Promise<Blob> {\n\treturn new Blob([await serializeTldrawJson(editor)], { type: TLDRAW_FILE_MIMETYPE })\n}\n\n/** @internal */\nexport async function parseAndLoadDocument(\n\teditor: Editor,\n\tdocument: string,\n\tmsg: (id: TLUiTranslationKey | Exclude<string, TLUiTranslationKey>) => string,\n\taddToast: TLUiToastsContextType['addToast'],\n\tonV1FileLoad?: () => void,\n\tforceDarkMode?: boolean\n) {\n\tconst parseFileResult = parseTldrawJsonFile({\n\t\tschema: editor.store.schema,\n\t\tjson: document,\n\t})\n\tif (!parseFileResult.ok) {\n\t\tlet description\n\t\tswitch (parseFileResult.error.type) {\n\t\t\tcase 'notATldrawFile':\n\t\t\t\teditor.annotateError(parseFileResult.error.cause, {\n\t\t\t\t\torigin: 'file-system.open.parse',\n\t\t\t\t\twillCrashApp: false,\n\t\t\t\t\ttags: { parseErrorType: parseFileResult.error.type },\n\t\t\t\t})\n\t\t\t\treportError(parseFileResult.error.cause)\n\t\t\t\tdescription = msg('file-system.file-open-error.not-a-tldraw-file')\n\t\t\t\tbreak\n\t\t\tcase 'fileFormatVersionTooNew':\n\t\t\t\tdescription = msg('file-system.file-open-error.file-format-version-too-new')\n\t\t\t\tbreak\n\t\t\tcase 'migrationFailed':\n\t\t\t\tif (parseFileResult.error.reason === MigrationFailureReason.TargetVersionTooNew) {\n\t\t\t\t\tdescription = msg('file-system.file-open-error.file-format-version-too-new')\n\t\t\t\t} else {\n\t\t\t\t\tdescription = msg('file-system.file-open-error.generic-corrupted-file')\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\tcase 'invalidRecords':\n\t\t\t\teditor.annotateError(parseFileResult.error.cause, {\n\t\t\t\t\torigin: 'file-system.open.parse',\n\t\t\t\t\twillCrashApp: false,\n\t\t\t\t\ttags: { parseErrorType: parseFileResult.error.type },\n\t\t\t\t})\n\t\t\t\treportError(parseFileResult.error.cause)\n\t\t\t\tdescription = msg('file-system.file-open-error.generic-corrupted-file')\n\t\t\t\tbreak\n\t\t\tcase 'v1File': {\n\t\t\t\tbuildFromV1Document(editor, parseFileResult.error.data.document)\n\t\t\t\tonV1FileLoad?.()\n\t\t\t\treturn\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\texhaustiveSwitchError(parseFileResult.error, 'type')\n\t\t}\n\t\taddToast({\n\t\t\ttitle: msg('file-system.file-open-error.title'),\n\t\t\tdescription,\n\t\t\tseverity: 'error',\n\t\t})\n\n\t\treturn\n\t}\n\n\t// tldraw file contain the full state of the app,\n\t// including ephemeral data. it up to the opener to\n\t// decide what to restore and what to retain. Here, we\n\t// just restore everything, so if the user has opened\n\t// this file before they'll get their camera etc.\n\t// restored. we could change this in the future.\n\ttransact(() => {\n\t\tconst snapshot = parseFileResult.value.getStoreSnapshot()\n\t\teditor.loadSnapshot(snapshot)\n\t\teditor.clearHistory()\n\n\t\textractAssets(editor, snapshot, msg, addToast)\n\n\t\tconst bounds = editor.getCurrentPageBounds()\n\t\tif (bounds) {\n\t\t\teditor.zoomToBounds(bounds, { targetZoom: 1, immediate: true })\n\t\t}\n\t})\n\n\tif (forceDarkMode) editor.user.updateUserPreferences({ colorScheme: 'dark' })\n}\n\nasync function extractAssets(\n\teditor: Editor,\n\tsnapshot: StoreSnapshot<TLRecord>,\n\tmsg: (id: TLUiTranslationKey | Exclude<string, TLUiTranslationKey>) => string,\n\taddToast: TLUiToastsContextType['addToast']\n) {\n\tconst mediaAssets = new Map<TLAssetId, TLImageAsset | TLVideoAsset>()\n\tfor (const record of Object.values(snapshot.store)) {\n\t\tif (\n\t\t\trecord.typeName === 'asset' &&\n\t\t\trecord.props.src &&\n\t\t\trecord.props.src.startsWith('data:') &&\n\t\t\t(record.type === 'image' || record.type === 'video')\n\t\t) {\n\t\t\tmediaAssets.set(record.id, record)\n\t\t}\n\t}\n\n\tPromise.allSettled(\n\t\t[...mediaAssets].map(async ([id, asset]) => {\n\t\t\ttry {\n\t\t\t\tconst blob = await fetch(asset.props.src!).then((r) => r.blob())\n\t\t\t\tconst file = new File([blob], asset.props.name, {\n\t\t\t\t\ttype: asset.props.mimeType!,\n\t\t\t\t})\n\n\t\t\t\tconst newAsset = await editor.getAssetForExternalContent({\n\t\t\t\t\ttype: 'file',\n\t\t\t\t\tfile,\n\t\t\t\t})\n\n\t\t\t\tif (!newAsset) {\n\t\t\t\t\tthrow Error('Could not create an asset')\n\t\t\t\t}\n\n\t\t\t\t// Save the new asset under the old asset's id\n\t\t\t\teditor.updateAssets([{ ...newAsset, id }])\n\t\t\t} catch (error) {\n\t\t\t\taddToast({\n\t\t\t\t\ttitle: msg('assets.files.upload-failed'),\n\t\t\t\t\tseverity: 'error',\n\t\t\t\t})\n\t\t\t\tconsole.error(error)\n\t\t\t\treturn\n\t\t\t}\n\t\t})\n\t)\n}\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}